{
  "name": "从零到部署：用 Vue 和 Express 实现一个迷你全栈电商应用",
  "version": "v1",
  "description": "Vue 是尤雨溪在2014年创建的一个前端框架，目前 Github Star 数高达150K，是 Star 数最高的前端项目，并且 Vue 有着极为活跃的社区生态以及专职团队进行维护以确保项目可以健康长久的发展。\n\n目前中国很多互联网公司前端程序员的招聘要求都要求程序员掌握 Vue，像滴滴、美团、饿了么等大厂也在重度使用 Vue 进行开发，并且有着像 Element 、mpvue、iView 这样优秀的基于 Vue 的开源项目存在，所以学习 Vue 是一个不错的投资，当你学会 Vue，就可以快速开发项目，这样不仅可以接外包挣外快，而且当有了一定的项目经验，还可以在一线互联网大厂找到一份不错的工作。\n\n看到这里你心动了嘛？心动不如行动！而最幸运的是，本教程将会一步一步带你以实战的方式实现一个 real-life （真实世界中的运行的）项目，并在实战的过程中，了解 Vue 的全貌，现在就打开电脑，跟随者我的脚步，这一次彻底掌握 Vue 开发！",
  "id": "092faf468f0108b393159a8456de3e15",
  "created": "2019-10-17T00:00:00.509Z",
  "github": "https://github.com/tuture-dev/vue-online-shop-frontend",
  "topics": ["Vue"],
  "categories": ["前端", "Vue", "入门"],
  "articles": [
    {
      "name": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（一）",
      "description": "Vue 是尤雨溪在2014年创建的一个前端框架，目前 Github Star 数高达150K，是 Star 数最高的前端项目，并且 Vue 有着极为活跃的社区生态以及专职团队进行维护以确保项目可以健康长久的发展。\n目前中国很多互联网公司前端程序员的招聘要求都要求程序员掌握 Vue，像滴滴、美团、饿了么等大厂也在重度使用 Vue 进行开发，并且有着像 Element 、mpvue、iView 这样优秀的基于 Vue 开源项目存在，所以学习 Vue 是一个不错的投资，当你学会 Vue，就可以快速开发项目，这样不仅可以接外包挣外快，而且当有了一定的项目经验，还可以在一线互联网大厂找到一份不错的工作。\n看到这里你心动了嘛？心动不如行动！而最幸运的是，本教程将会一步一步带你以实战的方式实现一个 real-life （真实世界中的运行的）项目，并在实战的过程中，了解 Vue 的全貌，现在就打开电脑，跟随者我的脚步，这一次彻底掌握 Vue 开发！",
      "id": "0b662ce",
      "created": "2019-10-17T00:00:00.509Z",
      "cover": "https://imgkr.cn-bj.ufileos.com/3e119a16-f74d-4bab-922e-80504879485a.jpg"
    },
    {
      "name": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（三）",
      "description": "在这篇文章中，我们将讲解 Vue 实例的 Props 和 Methods，接着讲解最常见的 Vue 模板语法，并通过实例的方式将这些模板语法都实践一番，最后将讲解 Vue 组件的组合，并完成了我们的发表商品页面。",
      "id": "5e10a4665188253a800423a5",
      "created": "2019-12-18T00:00:00.509Z",
      "cover": "https://imgkr.cn-bj.ufileos.com/09a5ff8d-b2c7-4699-bed6-cd331e54d8a1.jpg"
    },
    {
      "name": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（四）",
      "description": "随着前端应用的日渐复杂，状态和数据管理成为了构建大型应用的关键。受 Redux 等项目的启发，Vue.js 团队也量身定做了状态管理库 Vuex。在这篇教程中，我们将带你熟悉 Store、Mutation 和 Action 三大关键概念，并升级迷你商城应用的前端代码。",
      "topics": ["Vue", "Vuex"],
      "id": "ae8a389b0b6f1fb121a6881d2ec2544f",
      "created": "2020-01-10T00:00:00.509Z",
      "cover": "https://imgkr.cn-bj.ufileos.com/49ed15a4-31b9-416d-8a74-124e24029ed3.jpg"
    },
    {
      "name": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（五）",
      "description": "组件化和逻辑复用能帮助写出简洁易懂的代码，随着应用越写越复杂，我们有必要把视图层中重复的逻辑抽成组件，以求在多个页面中复用；同时对于 Vuex 端，Store 中的逻辑也会越来越臃肿，我们有必要使用 Vuex 提供的 Getters 来复用本地数据获取逻辑。在这篇教程中，我们将带领你抽出 Vue 组件简化页面逻辑，使用 Vuex Getters 复用本地数据获取逻辑。",
      "topics": ["Vue", "Vuex"],
      "id": "6f96d15",
      "created": "2020-02-11T00:00:00.509Z",
      "cover": "https://imgkr.cn-bj.ufileos.com/d7c72ec8-d28d-4f52-b0da-b212f2e69950.jpg"
    },
    {
      "id": "-OixkkqI",
      "name": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（六）",
      "topics": ["Vue.js", "Vuex"],
      "cover": "https://imgkr.cn-bj.ufileos.com/d357716a-929b-48b2-acdb-75f1f9840ae3.jpg",
      "description": "前面五篇教程我们已经基本实现了迷你全栈电商应用的界面展示以及功能逻辑，相信大家在这个过程中都收获颇丰，并且迈向了全栈工程师的第一步。但是我们却并不满足于此，我们还需要对我们的项目代码进行优化，使得我们的代码可读性更高，也更好维护。相信细心的你们已经感觉到了项目中的store实例实在是过于臃肿，因此，本篇教程就是带大家一起学习如何抽出 Getters 、 Mutations 和Actions 逻辑实现store的“减重”以及如何干掉 mutation-types 硬编码。",
      "created": "2020-03-03T00:00:00.509Z"
    },
    {
      "id": "tc1c9oDB",
      "created": "2020-03-13T02:00:37.658Z",
      "name": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（七）",
      "topics": ["Vue", "Element UI"],
      "cover": "https://imgkr.cn-bj.ufileos.com/50009d9a-e157-43d9-803f-d3e7459a492d.jpg",
      "description": "在之前的六篇教程中我们已经基本实现了迷你全栈电商应用，相信大家对于一个全栈应用的开发已经有了一个全面的认知。但是一个追求完美的工程师是不会吝啬他的艺术创造，仅仅实现应用的功能还不能满足用户的高需求，应用的界面效果也是提高用户体验的关键因素。因此本篇教程将基于element-ui组件库重构项目的前端代码，改善迷你电商应用的界面效果，提高用户的体验感。虽然我们可以轻松地引入现成的组件库，但是与之对应的数据处理也值得我们注意，那我会在引入组件库的同时带大家一起踩一踩element-ui给我们挖的坑，毕竟踩坑才能成长嘛。"
    },
    {
      "id": "-td0ssrw",
      "created": "2020-03-14T03:10:55.150Z",
      "name": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（八）",
      "topics": ["Docker", "Docker Compose"],
      "cover": "https://imgkr.cn-bj.ufileos.com/4cde7f12-c425-4e35-9f63-a3582d05b38e.jpg",
      "description": "本篇是系列文章终篇，我们将实现应用的部署，这篇教程将首先 Docker 来容器化你的应用，接着教你配置 MongoDB 的身份验证机制，给你的数据库添加一份安全守护，最后我们会带你使用阿里云的容器镜像服务将整个全栈应用部署到云端，使得你互联网上的用户可以访问你的网站，希望这篇教程能解决长期困扰你的部署上云的问题！"
    },
    {
      "id": "nO-RmUbzz",
      "created": "2020-05-17T02:25:27.336Z",
      "name": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（九）：使用 Authing 集成完整的用户系统",
      "topics": ["Vue", "Express", "Authing", "OAuth", "第三方登录"],
      "cover": "https://imgkr.cn-bj.ufileos.com/329b0aa0-5db5-449c-a71b-20f6c078ad63.jpg",
      "description": "在之前的迷你电商应用中，我们的网站缺少了一个关键组成部分：用户鉴权系统，包括登录、注册、以及权限管理等相应的配置。徒手实现这些功能固然可行，但是对于一支崇尚精益的团队来说，选择可靠的身份认证服务（IDaaS）是更加明智的选择，不仅能够提供完善且丰富的身份认证和用户鉴权功能，还确保遵循最佳安全实践和优秀的可扩展性。在这篇教程中，我们将手把手带你在本系列之前完成的迷你电商应用中快速集成 Authing 用户认证模块，提供一致、流畅、安全的身份认证体验。",
      "categories": ["前端", "Vue", "进阶"]
    }
  ],
  "steps": [
    {
      "commit": "36796af",
      "id": "w7XxUuKy",
      "articleId": "0b662ce",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "36796af",
          "id": "Pfv1tsjmQ",
          "fixed": true,
          "children": [
            {
              "text": "快速入门"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Vue 是"
                },
                {
                  "link": true,
                  "url": "https://evanyou.me/",
                  "text": "尤雨溪"
                },
                {
                  "text": "在 2014 年创建的一个前端框架，目前 "
                },
                {
                  "link": true,
                  "url": "https://github.com/vuejs/vue",
                  "text": "Github"
                },
                {
                  "text": " Star 数高达150K，是 Star 数最高的前端项目，并且 Vue 有着极为活跃的社区生态以及专职团队进行维护以确保项目可以健康长久地发展。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "目前中国很多互联网公司前端程序员的招聘要求都要求程序员掌握 Vue，像滴滴、美团、饿了么等大厂也在重度使用 Vue 进行开发，并且有着像 "
                },
                {
                  "link": true,
                  "url": "https://element.eleme.cn/#/zh-CN",
                  "text": "Element"
                },
                {
                  "text": " 、"
                },
                {
                  "link": true,
                  "url": "http://mpvue.com/",
                  "text": "mpvue"
                },
                {
                  "text": "、"
                },
                {
                  "link": true,
                  "url": "http://iview.talkingdata.com/#/",
                  "text": "iView"
                },
                {
                  "text": " 这样优秀的基于 Vue 开源项目存在，所以学习 Vue 是一个不错的投资，当你学会 Vue，就可以快速开发项目，这样不仅可以接外包挣外快，而且当有了一定的项目经验，还可以在一线互联网大厂找到一份不错的工作。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "看到这里你心动了嘛？心动不如行动！而最幸运的是，本教程将会一步一步带你以实战的方式实现一个迷你全栈电商网站。并在实战的过程中，了解 Vue 的全貌，现在就打开电脑，跟随我的脚步，彻底掌握 Vue 开发！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "代码"
                }
              ],
              "id": "pdUqPjDhH"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你可以在 Github 查看完整的源码："
                },
                {
                  "link": true,
                  "url": "https://github.com/pftom/vue-online-shop-frontend/tree/aca2bb64cbdaebb7e4a62e252bc00a439eede9a5",
                  "text": "源码地址"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "项目准备"
                }
              ],
              "id": "jOy4UTa5m"
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "安装依赖"
                }
              ],
              "id": "2kVw81a7H"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "安装 Node.js，你可以去 "
                },
                {
                  "link": true,
                  "url": "https://nodejs.org/en/",
                  "text": "Node.js"
                },
                {
                  "text": " 官网下载安装包，通过安装包安装会同时安装 Node.js 包管理工具 Npm，用于便捷的管理项目依赖和下载第三方包。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "打开终端，输入如下命令测试是否安装成功："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "node -v # v10.16.0"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm -v # 6.9.0"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果在你的终端有如上输出，那么代表你安装成功。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "通过上面安装包安装，你会安装最新的 Node 稳定版本，这可能和我的机器上的 Node 版本不一致，但是不用担心，本教程使用到的代码语法适用于绝大多数新的或更老的 Node。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "安装 vue-cli，在绝大多数场景下，我们使用 vue-cli 来初始化我们的 vue 项目，本教程也不例外，在终端运行如下命令来安装："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm install -g vue-cli"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "打开终端，输入如下命令测试是否安装成功："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "vue --version # 2.9.6"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "虽然 Vue 3.x 已经正式推出，但是这篇教程用的是主流、稳定的 Vue 2.x 版本。由于 Vue 的整体思想基本没有改变，所以不影响我们的学习。在接下来的教程中，我们会迁移到 Vue 3.x，并通过讲解新老 Vue 版本的差异让你更好地理解 Vue 的演变。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面两个安装步骤已经足够完成我们的教程的学习，但是我想额外推荐你一款编辑器，VSCode，你可以通过访问 "
                },
                {
                  "link": true,
                  "url": "https://code.visualstudio.com/",
                  "text": "VSCode"
                },
                {
                  "text": " 官网安装。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 VSCode 里面找到 Vue 插件，可以获得"
                },
                {
                  "link": true,
                  "url": "https://marketplace.visualstudio.com/items?itemName=octref.vetur",
                  "text": "代码语法高亮以及自动格式化"
                },
                {
                  "text": "非常便捷的功能，并且 VSCode 天然对 JavaScript 的支持，会大大提高我们的开发效率，本教程所涉及项目的开发都是使用 VSCode 完成的。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "初始化项目"
                }
              ],
              "id": "N3lwlxgDx"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "打开终端输入如下命令初始化我们的 Vue 项目："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "vue init webpack vue-online-shop-frontend"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "命令行接着会显示一些列选项让你选择，具体我们的选择如下图："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/16f2652f23b7ebd0.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其中 "
                    },
                    {
                      "code": true,
                      "text": "Author"
                    },
                    {
                      "text": " 字段你可以填自己的昵称，然后我们在选择了安装 "
                    },
                    {
                      "code": true,
                      "text": "vue-router"
                    },
                    {
                      "text": " 之后，其他的都选择了 "
                    },
                    {
                      "code": true,
                      "text": "no"
                    },
                    {
                      "text": "，因为本篇教程是面向初学者的实战教程，如果引入了过多和 Vue 核心无关的概念，就会引起很多困惑，所以这里我们不配置它们"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当项目初始化成功之后，接下来通过如下命令开启项目："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# code vue-online-shop-frontend # 如果你使用了 VSCode 编辑器，可以用这行命令打开项目"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd vue-online-shop-frontend && npm start"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接着打开浏览器，访问 "
                },
                {
                  "code": true,
                  "text": "http://localhost:8080/"
                },
                {
                  "text": " 查看我们初始好的项目效果。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果你使用 VSCode 编辑器打开项目进行开发，在运行 "
                    },
                    {
                      "code": true,
                      "text": "code project-name"
                    },
                    {
                      "text": " 之前需要安装 "
                    },
                    {
                      "code": true,
                      "text": "code"
                    },
                    {
                      "text": " 脚本，具体我找了一篇教程："
                    },
                    {
                      "link": true,
                      "url": "https://www.cnblogs.com/Zhangcsc/p/11362987.html",
                      "text": "戳我访问"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".babelrc",
          "display": false,
          "id": "RctjDnT18",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".babelrc",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".editorconfig",
          "display": false,
          "id": "cWg_NZHiJ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".editorconfig",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".eslintignore",
          "display": false,
          "id": "GepOcITRr",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".eslintignore",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".eslintrc.js",
          "display": false,
          "id": "ZNsGrn03T",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".eslintrc.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "id": "9haW3JaZQ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ],
          "display": false
        },
        {
          "type": "file",
          "file": ".postcssrc.js",
          "display": false,
          "id": "q2cRDtevb",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".postcssrc.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "README.md",
          "display": false,
          "id": "Rj1bu7Hm5",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "README.md",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "build/build.js",
          "display": false,
          "id": "YD6EnkHzW",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "build/build.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "build/check-versions.js",
          "display": false,
          "id": "DccjCyOhk",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "build/check-versions.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "build/logo.png",
          "display": false,
          "id": "E80hhfDkh",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "build/logo.png",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "build/utils.js",
          "display": false,
          "id": "oCn4mltK6A",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "build/utils.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "build/vue-loader.conf.js",
          "display": false,
          "id": "n15Mm0TgBl",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "build/vue-loader.conf.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "build/webpack.base.conf.js",
          "display": false,
          "id": "VFeNJsP9b1",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "build/webpack.base.conf.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "build/webpack.dev.conf.js",
          "display": false,
          "id": "_A2toadmbJ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "build/webpack.dev.conf.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "build/webpack.prod.conf.js",
          "display": false,
          "id": "Iykn7mXW-C",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "build/webpack.prod.conf.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "config/dev.env.js",
          "display": false,
          "id": "YOrorClo5E",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config/dev.env.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "config/index.js",
          "display": false,
          "id": "U6JO4mvzJ4",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config/index.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "config/prod.env.js",
          "display": false,
          "id": "-ehZo-56Eq",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config/prod.env.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/main.js",
          "display": true,
          "commit": "36796af",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "初探脚手架代码"
                    }
                  ],
                  "id": "hsK_D5IbuV"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "通过 vue-cli 初始化的脚手架代码中，我们在整个教程中需要了解的就是以下五个文件："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "src/main.js"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "index.html"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "src/App.vue"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "src/router/index.js"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "src/components/HelloWorld.vue"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "src/main.js"
                    }
                  ],
                  "id": "WTul1hz2TS"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们来看一下 "
                    },
                    {
                      "code": true,
                      "text": "src/main.js"
                    },
                    {
                      "text": "，这个是 Vue 应用的入口。我们通过导入 "
                    },
                    {
                      "code": true,
                      "text": "Vue"
                    },
                    {
                      "text": " 类、"
                    },
                    {
                      "code": true,
                      "text": "App"
                    },
                    {
                      "text": " 组件、"
                    },
                    {
                      "code": true,
                      "text": "router"
                    },
                    {
                      "text": " 路由，再加上 "
                    },
                    {
                      "code": true,
                      "text": "el"
                    },
                    {
                      "text": " ，将这些参数传给 "
                    },
                    {
                      "code": true,
                      "text": "Vue"
                    },
                    {
                      "text": " 类，生成一个 Vue 实例。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/main.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "index.html",
          "display": true,
          "commit": "36796af",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "index.html"
                    }
                  ],
                  "id": "94AR6fg-6i"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们来看一下 "
                    },
                    {
                      "code": true,
                      "text": "index.html"
                    },
                    {
                      "text": " 文件，它的代码是这样的："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "index.html",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当我们开启项目之后，Vue 所使用的构建工具 "
                    },
                    {
                      "link": true,
                      "url": "https://webpack.docschina.org/",
                      "text": "Webpack"
                    },
                    {
                      "text": " 将会："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "根据入口文件 "
                        },
                        {
                          "code": true,
                          "text": "src/main.js"
                        },
                        {
                          "text": " 里面声明的 "
                        },
                        {
                          "code": true,
                          "text": "el"
                        },
                        {
                          "text": " 属性（"
                        },
                        {
                          "code": true,
                          "text": "#app"
                        },
                        {
                          "text": "），找到 "
                        },
                        {
                          "code": true,
                          "text": "index.html"
                        },
                        {
                          "text": " 中 id 为"
                        },
                        {
                          "code": true,
                          "text": "app"
                        },
                        {
                          "text": " 的 DOM 节点"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "把编译好的视图模板代码挂载到这个 DOM 节点下面"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "将项目涉及的 JavaScript 和 CSS 代码以 "
                        },
                        {
                          "code": true,
                          "text": "script"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "link"
                        },
                        {
                          "text": " 的方式插入到 "
                        },
                        {
                          "code": true,
                          "text": "index.html"
                        },
                        {
                          "text": " 中"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "开启开发服务器，打开浏览器，进而浏览器将 "
                        },
                        {
                          "code": true,
                          "text": "index.html"
                        },
                        {
                          "text": " 渲染，我们就可以看到写好的 Vue 页面效果。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package-lock.json",
          "id": "rC8dp8iIX_",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package-lock.json",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": false,
          "id": "A0SE2VrhkP",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.vue",
          "display": true,
          "commit": "36796af",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "src/App.vue"
                    }
                  ],
                  "id": "8k2vrE1zuD"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "src/App.vue"
                    },
                    {
                      "text": " 就是 Vue 为我们提供的组件文件，使得我们可以以组件的形式来组织代码，并通过组件的组合来构建任意规模的项目，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.vue",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到， "
                    },
                    {
                      "code": true,
                      "text": "App"
                    },
                    {
                      "text": " 组件包含了三个部分的代码："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "template"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "script"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "style"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其实就是对应了传统 Web “三剑客”，"
                    },
                    {
                      "code": true,
                      "text": "HTML"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "JavaScript"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "CSS"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里在 "
                    },
                    {
                      "code": true,
                      "text": "template"
                    },
                    {
                      "text": " 部分展示了一张 Vue 的 logo 图片，然后显示此刻渲染的路由组件："
                    },
                    {
                      "code": true,
                      "text": "<router-view />"
                    },
                    {
                      "text": "。我们将在后面继续讲解路由，这里不懂也没有关系哦。"
                    },
                    {
                      "code": true,
                      "text": "script"
                    },
                    {
                      "text": " 部分，主要是导出了一个名为 "
                    },
                    {
                      "code": true,
                      "text": "App"
                    },
                    {
                      "text": " 的组件。"
                    },
                    {
                      "code": true,
                      "text": "style"
                    },
                    {
                      "text": " 部分就是我们熟悉的 CSS 代码了。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "上面所讲的是比较小的组件的写法，当组件中涉及的代码较多时，我们需要把 "
                        },
                        {
                          "code": true,
                          "text": "script"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "style"
                        },
                        {
                          "text": " 抽成独立的 "
                        },
                        {
                          "code": true,
                          "text": ".js"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": ".css"
                        },
                        {
                          "text": " 文件。就像下面这样："
                        }
                      ]
                    },
                    {
                      "type": "code-block",
                      "lang": "JavaScript",
                      "children": [
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "<!-- ./src/App.vue -->"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "<template>"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "  <div id=\"app\">"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "    <img src=\"./assets/hello.png\">"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "    <router-view/>"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "  </div>"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "</template>"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "<script src=\"./app.js\"></script>"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "<style src=\"./app.css\"></style>"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Vue 组件和模板语法是 Vue 的核心概念，我们在后面会以实战的形式重点讲解这些内容。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/router/index.js",
          "display": true,
          "commit": "36796af",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "src/router/index.js"
                    }
                  ],
                  "id": "loPaDtd14s"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "src/router/index.js"
                    },
                    {
                      "text": " 文件是 Vue 为我们提供的路由文件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/router/index.js",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们导入了 Vue 类，以及 Router 类，以及我们的 "
                    },
                    {
                      "code": true,
                      "text": "HelloWorld"
                    },
                    {
                      "text": " 组件。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们使用 "
                    },
                    {
                      "code": true,
                      "text": "Vue.use(Router)"
                    },
                    {
                      "text": " 告诉 Vue，我们应用接入了路由。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在导出的路由实例中，我们通过 "
                    },
                    {
                      "code": true,
                      "text": "routes"
                    },
                    {
                      "text": " 数组定义了项目所有的页面，每个页面是一个类似 "
                    },
                    {
                      "code": true,
                      "text": "{ path, name, component }"
                    },
                    {
                      "text": " 的对象。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "比如初始化时生成的 "
                    },
                    {
                      "code": true,
                      "text": "HelloWorld.vue"
                    },
                    {
                      "text": " 就是我们的网站首页 – 也就是打开浏览器访问到的第一个页面，因为它的路径（"
                    },
                    {
                      "code": true,
                      "text": "path"
                    },
                    {
                      "text": "）定义为 "
                    },
                    {
                      "code": true,
                      "text": "/"
                    },
                    {
                      "text": " 。此外一个页面定义还需要 "
                    },
                    {
                      "code": true,
                      "text": "name"
                    },
                    {
                      "text": "，它代表此页面在 "
                    },
                    {
                      "code": true,
                      "text": "vue-router"
                    },
                    {
                      "text": " 中的标识符，"
                    },
                    {
                      "code": true,
                      "text": "component"
                    },
                    {
                      "text": " 则代表此页面渲染时的所用到的组件。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里我们可以看到导出 "
                        },
                        {
                          "code": true,
                          "text": "HelloWorld"
                        },
                        {
                          "text": " 组件时，我们在路径最前面加上了 "
                        },
                        {
                          "code": true,
                          "text": "\"@\""
                        },
                        {
                          "text": "，那是因为我们在 "
                        },
                        {
                          "code": true,
                          "text": "webpack"
                        },
                        {
                          "text": " 配置中将会 "
                        },
                        {
                          "code": true,
                          "text": "\"@\""
                        },
                        {
                          "text": "映射成 "
                        },
                        {
                          "code": true,
                          "text": "resolve('src')"
                        },
                        {
                          "text": "，也就是我们项目目录下 "
                        },
                        {
                          "code": true,
                          "text": "src"
                        },
                        {
                          "text": " 文件夹的路径，最后我们的 "
                        },
                        {
                          "code": true,
                          "text": "'@/components/HelloWorld'"
                        },
                        {
                          "text": " 的实际上的效果相当于取到了项目目录 "
                        },
                        {
                          "code": true,
                          "text": "src"
                        },
                        {
                          "text": " 文件夹里面的 "
                        },
                        {
                          "code": true,
                          "text": "components/HelloWorld"
                        },
                        {
                          "text": " 组件。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/assets/logo.png",
          "display": false,
          "id": "QrUqoV0VX1",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/assets/logo.png",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/HelloWorld.vue",
          "display": true,
          "commit": "36796af",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "src/components/HelloWorld.vue"
                    }
                  ],
                  "id": "IJxJHnQFF0"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后是 "
                    },
                    {
                      "code": true,
                      "text": "src/components/HelloWorld.vue"
                    },
                    {
                      "text": " 文件，是脚手架代码为我们提供的一个实例组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/HelloWorld.vue",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，其结构大致与 "
                    },
                    {
                      "code": true,
                      "text": "App.vue"
                    },
                    {
                      "text": " 类似。其中也有一些不同，比如 "
                    },
                    {
                      "code": true,
                      "text": "script"
                    },
                    {
                      "text": " 里面的 "
                    },
                    {
                      "code": true,
                      "text": "data"
                    },
                    {
                      "text": " 字段，还有 "
                    },
                    {
                      "code": true,
                      "text": "template"
                    },
                    {
                      "text": " 中的 "
                    },
                    {
                      "code": true,
                      "text": "{{ }}"
                    },
                    {
                      "text": " 语法。这个我们会在下一节进行讲解。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当我们打开浏览器时，地址为："
                    },
                    {
                      "code": true,
                      "text": "http://localhost:8080/"
                    },
                    {
                      "text": " 此时路径为 "
                    },
                    {
                      "code": true,
                      "text": "/"
                    },
                    {
                      "text": "，激活 "
                    },
                    {
                      "code": true,
                      "text": "HelloWorld.vue"
                    },
                    {
                      "text": " 组件，所以最后我们整个项目渲染 "
                    },
                    {
                      "code": true,
                      "text": "App.vue"
                    },
                    {
                      "text": " 的内容，显示的结构即为："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "一张 Vue logo 图"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们的 "
                        },
                        {
                          "code": true,
                          "text": "HelloWorld.vue"
                        },
                        {
                          "text": " 组件的内容"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/092faf4/16f2653b19ea8fe1.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "static/.gitkeep",
          "display": false,
          "id": "lfuUmp5Wej",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "static/.gitkeep",
              "commit": "36796af",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "93LxZtrlia"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过一窥 "
                },
                {
                  "code": true,
                  "text": "vue-cli"
                },
                {
                  "text": " 为我们初始化的项目代码，我们可以学到如下的知识："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Vue 通过组件来组织项目，单个组件就是我们传统的 Web “三剑客”：HTML、JavaScript、CSS。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Vue 通过路由来定义多个页面，并且进行页面之间的跳转。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "一个页面是一个组件，一个组件可以由很多组件组成，通过这种组合式的思想，我们可以编写任意复杂的项目。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "056d555",
      "id": "8msmjYO0GS",
      "articleId": "0b662ce",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "056d555",
          "id": "0gIMVvHqLh",
          "fixed": true,
          "children": [
            {
              "text": "编写你的第一个 Vue 页面"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "下面我们来编写电商应用的首页。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/HelloWorld.vue",
          "display": false,
          "id": "-pdfmfy9gH",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/HelloWorld.vue",
              "commit": "056d555",
              "hiddenLines": [
                [88, 89],
                [101, 119]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/Home.vue",
          "display": true,
          "commit": "056d555",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "编写页面组件"
                    }
                  ],
                  "id": "WiZAW1fThQ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "code": true,
                      "text": "src/components"
                    },
                    {
                      "text": " 下面创建 "
                    },
                    {
                      "code": true,
                      "text": "Home.vue"
                    },
                    {
                      "text": " 文件，然后编写如下代码："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Home.vue",
              "commit": "056d555",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上面，我们创建了一个名为 "
                    },
                    {
                      "code": true,
                      "text": "Home.vue"
                    },
                    {
                      "text": " 的 Vue 组件，可以看到它和我们之前的 "
                    },
                    {
                      "code": true,
                      "text": "HelloWorld.vue"
                    },
                    {
                      "text": " 的内容大致相仿，但是也有一些不同的地方："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先，我们暂时没有写样式（没有 "
                        },
                        {
                          "code": true,
                          "text": "style"
                        },
                        {
                          "text": " 部分），而是先专注于基础知识的讲解。在后续教程中，我们会使用 "
                        },
                        {
                          "link": true,
                          "url": "https://element.eleme.cn/",
                          "text": "Element UI"
                        },
                        {
                          "text": " 组件库让我们的界面变得专业美观。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "其次，我们在 "
                        },
                        {
                          "code": true,
                          "text": "script"
                        },
                        {
                          "text": " 中引入了 "
                        },
                        {
                          "code": true,
                          "text": "data"
                        },
                        {
                          "text": " ，在 "
                        },
                        {
                          "code": true,
                          "text": "template"
                        },
                        {
                          "text": " 引入了插值语法 "
                        },
                        {
                          "code": true,
                          "text": "{{var}}"
                        },
                        {
                          "text": "。其中 "
                        },
                        {
                          "code": true,
                          "text": "data"
                        },
                        {
                          "text": " 是声明此组件的初始化数据，而 "
                        },
                        {
                          "code": true,
                          "text": "{{var}}"
                        },
                        {
                          "text": " 插值语法是方便将数据渲染到视图模板中；这里我们将在 "
                        },
                        {
                          "code": true,
                          "text": "script"
                        },
                        {
                          "text": " 中定义的 "
                        },
                        {
                          "code": true,
                          "text": "data"
                        },
                        {
                          "text": " 中的 "
                        },
                        {
                          "code": true,
                          "text": "msg"
                        },
                        {
                          "text": " 插值到视图模板中，最终会渲染一个 "
                        },
                        {
                          "code": true,
                          "text": "h1"
                        },
                        {
                          "text": " 标签，标签内容就为 "
                        },
                        {
                          "code": true,
                          "text": "msg"
                        },
                        {
                          "text": " 的内容。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/router/index.js",
          "display": true,
          "commit": "056d555",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "接入路由"
                    }
                  ],
                  "id": "Ki5TR_cFWB"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着，我们在 "
                    },
                    {
                      "code": true,
                      "text": "src/router/index.js"
                    },
                    {
                      "text": " 路由中将主页路由 "
                    },
                    {
                      "code": true,
                      "text": "/"
                    },
                    {
                      "text": " 所绑定的组件从默认的 "
                    },
                    {
                      "code": true,
                      "text": "HelloWorld"
                    },
                    {
                      "text": " 修改为刚才写好的 "
                    },
                    {
                      "code": true,
                      "text": "Home"
                    },
                    {
                      "text": " 组件："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/router/index.js",
              "commit": "056d555",
              "hiddenLines": [[7, 7]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "现在我们保存代码，打开浏览器，就会显示刚才在 "
                    },
                    {
                      "code": true,
                      "text": "Home.vue"
                    },
                    {
                      "text": " 里面填写的那个标题："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/092faf4/16f2657c42c648fb.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "19a30e7",
      "id": "_lu0JNmjrM",
      "articleId": "0b662ce",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "19a30e7",
          "id": "m09p86JyYM",
          "fixed": true,
          "children": [
            {
              "text": "使用路由进行多页面跳转"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一个经典的电商应用通常包括如下部分："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "商品展示列表 （"
                    },
                    {
                      "code": true,
                      "text": "Home.vue"
                    },
                    {
                      "text": "）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "商品详情（"
                    },
                    {
                      "code": true,
                      "text": "Detail.vue"
                    },
                    {
                      "text": "）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "购物车（"
                    },
                    {
                      "code": true,
                      "text": "Cart.vue"
                    },
                    {
                      "text": "）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里因为我们追求简单，也将商品的后台管理页面 （"
                },
                {
                  "code": true,
                  "text": "Admin.vue"
                },
                {
                  "text": "）放入了项目中。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在我们先来实现商品展示列表、购物车和后台管理页面的模板内容。因为商品详情页后面将会使用组件进行复用，所以这里我们暂时先不创建。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.vue",
          "display": true,
          "commit": "19a30e7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "添加首页导航"
                    }
                  ],
                  "id": "m3DCgSe9GM"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先修改 "
                    },
                    {
                      "code": true,
                      "text": "App.vue"
                    },
                    {
                      "text": " ，加入三个导航链接 "
                    },
                    {
                      "code": true,
                      "text": "router-link"
                    },
                    {
                      "text": "，方便让用户跳转到到自己想看的页面，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.vue",
              "commit": "19a30e7",
              "hiddenLines": [[22, 38]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们在头部添加了三个 "
                    },
                    {
                      "code": true,
                      "text": "router-link"
                    },
                    {
                      "text": " 代表我们的头部导航。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "router-link"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "a"
                    },
                    {
                      "text": " 标签类似，只不过 Vue 为它添加一些额外的优化逻辑。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/HelloWorld.vue",
          "display": false,
          "id": "5UMR3-49se",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/HelloWorld.vue",
              "commit": "19a30e7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/Admin.vue",
          "display": true,
          "commit": "19a30e7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建后台管理页面"
                    }
                  ],
                  "id": "Z8hoptknb4"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们编写 "
                    },
                    {
                      "code": true,
                      "text": "Admin.vue"
                    },
                    {
                      "text": " 组件，但这里稍微有点不同，即我们在 "
                    },
                    {
                      "code": true,
                      "text": "src/pages"
                    },
                    {
                      "text": " 下创建 "
                    },
                    {
                      "code": true,
                      "text": "Admin.vue"
                    },
                    {
                      "text": " 组件，因为对于页面级组件，我们倾向于将其放到一个特殊 "
                    },
                    {
                      "code": true,
                      "text": "pages"
                    },
                    {
                      "text": " 文件夹，这样方便组织项目。其代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Admin.vue",
              "commit": "19a30e7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到这个页面内容和我们之前的 "
                    },
                    {
                      "code": true,
                      "text": "Home.vue"
                    },
                    {
                      "text": " 内容相似。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/Cart.vue",
          "display": true,
          "commit": "19a30e7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建购物车页面"
                    }
                  ],
                  "id": "eIIV1AB2gP"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后是我们的购物车页面 "
                    },
                    {
                      "code": true,
                      "text": "Cart.vue"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Cart.vue",
              "commit": "19a30e7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到这个页面内容和我们之前的 "
                    },
                    {
                      "code": true,
                      "text": "Home.vue"
                    },
                    {
                      "text": " 内容相似。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/Home.vue",
          "display": false,
          "id": "hHfNy_nnvR",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后是我们的商品详情列表 "
                    },
                    {
                      "code": true,
                      "text": "Home.vue"
                    },
                    {
                      "text": "，只不过这一次我们需要将它从 "
                    },
                    {
                      "code": true,
                      "text": "src/components/Home.vue"
                    },
                    {
                      "text": " 移动到 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/Home.vue"
                    },
                    {
                      "text": " 下。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Home.vue",
              "commit": "19a30e7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/router/index.js",
          "display": true,
          "commit": "19a30e7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "将新页面导入路由"
                    }
                  ],
                  "id": "8tK05wEon0"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后，我们把上一步中创建的 "
                    },
                    {
                      "code": true,
                      "text": "Home.vue"
                    },
                    {
                      "text": " 移到 "
                    },
                    {
                      "code": true,
                      "text": "src/pages"
                    },
                    {
                      "text": " 目录中，并在路由文件 "
                    },
                    {
                      "code": true,
                      "text": "src/routes/index.js"
                    },
                    {
                      "text": " 中导入这三个页面，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/router/index.js",
              "commit": "19a30e7",
              "hiddenLines": [[9, 12]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "保存代码，然后打开浏览器，我们可以看到下面的效果："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/16f265b24d1615d4.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你可以点击头部的三个导航链接，下面的标题内容会随着点击的链接变化。恭喜你，你已经成功地实现了一个基于 Vue 的多页面网站了！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "4bad80e",
      "id": "OcHhN6vvi2",
      "articleId": "0b662ce",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "4bad80e",
          "id": "QgEtw232Mg",
          "fixed": true,
          "children": [
            {
              "text": "使用嵌套路由和动态路由合理组织页面"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "随着页面的增多，如果我们把所有的页面都塞到一个 "
                },
                {
                  "code": true,
                  "text": "routes"
                },
                {
                  "text": " 数组里面会显得很乱，你无法确定哪些页面存在关系。还好 "
                },
                {
                  "code": true,
                  "text": "vue-router"
                },
                {
                  "text": " 提供了嵌套路由的功能，让我们能把相关联的页面组织在一起。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/router/index.js",
          "display": true,
          "commit": "4bad80e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "升级路由"
                    }
                  ],
                  "id": "lko5lId0Gb"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在我们的商城项目中，后台管理页 "
                    },
                    {
                      "code": true,
                      "text": "Admin"
                    },
                    {
                      "text": " 涉及到很多操作页面，比如："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "/create"
                        },
                        {
                          "text": " 创建新的商品"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "/edit"
                        },
                        {
                          "text": " 编辑商品信息"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们通过"
                    },
                    {
                      "bold": true,
                      "text": "嵌套路由"
                    },
                    {
                      "text": "的方式将它们组织在一起。首先在路由文件 "
                    },
                    {
                      "code": true,
                      "text": "src/router/index.js"
                    },
                    {
                      "text": " 中声明后台管理所有用到的页面组件（我们马上就会去实现它们）："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/router/index.js",
              "commit": "4bad80e",
              "hiddenLines": [
                [16, 21],
                [47, 51]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "嵌套路由的用法就是给需要归为一类的页面设置一个入口页面，然后把这一类页面都放到这个路由页面路由定义的 "
                    },
                    {
                      "code": true,
                      "text": "children"
                    },
                    {
                      "text": " 字段数组中。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "通过上面的代码我们可以看到，"
                    },
                    {
                      "code": true,
                      "text": "Admin"
                    },
                    {
                      "text": " 类别下有四个组件，"
                    },
                    {
                      "code": true,
                      "text": "Index"
                    },
                    {
                      "text": " 是我们 "
                    },
                    {
                      "code": true,
                      "text": "Admin"
                    },
                    {
                      "text": " 类别的入口组件，也是作为 "
                    },
                    {
                      "code": true,
                      "text": "path = /admin"
                    },
                    {
                      "text": " 的渲染组件，然后其他组件就放到 "
                    },
                    {
                      "code": true,
                      "text": "path = /admin"
                    },
                    {
                      "text": " 这个路由定义的 "
                    },
                    {
                      "code": true,
                      "text": "children"
                    },
                    {
                      "text": " 数组里，其定义和其他父级一致。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这样的嵌套写法带来了两个好处："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "很清晰的组织了一类页面，方便阅读。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在定义路由的 "
                        },
                        {
                          "code": true,
                          "text": "path"
                        },
                        {
                          "text": " 的时候，复用了父级的 "
                        },
                        {
                          "code": true,
                          "text": "path"
                        },
                        {
                          "text": "，即现在我们的 "
                        },
                        {
                          "code": true,
                          "text": "New"
                        },
                        {
                          "text": " 这个路由，它在浏览器中访问的路径为："
                        },
                        {
                          "code": true,
                          "text": "'/admin' +  'new'"
                        },
                        {
                          "text": "，如果我们统一放到 "
                        },
                        {
                          "code": true,
                          "text": "routes"
                        },
                        {
                          "text": " 数组的第一级定义，那么后面的 "
                        },
                        {
                          "code": true,
                          "text": "Products"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "Edit"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "path"
                        },
                        {
                          "text": " 都要带上诸如 "
                        },
                        {
                          "code": true,
                          "text": "/admin"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "/admin/edit/:id"
                        },
                        {
                          "text": " 这样长长的路径，显得特别复杂。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里还有一个改变就是，我们发现 "
                    },
                    {
                      "code": true,
                      "text": "Edit"
                    },
                    {
                      "text": " 这个路由的 "
                    },
                    {
                      "code": true,
                      "text": "path"
                    },
                    {
                      "text": " 有点不太一样，它有个特殊的标志 "
                    },
                    {
                      "code": true,
                      "text": "edit/:id"
                    },
                    {
                      "text": "，这种写法被称为"
                    },
                    {
                      "bold": true,
                      "text": "动态路由"
                    },
                    {
                      "text": "，即 "
                    },
                    {
                      "code": true,
                      "text": ":id"
                    },
                    {
                      "text": " 会匹配任意字符串，所以用户访问 "
                    },
                    {
                      "code": true,
                      "text": "/admin/edit/<any-string>"
                    },
                    {
                      "text": " 都会激活 "
                    },
                    {
                      "code": true,
                      "text": "Edit"
                    },
                    {
                      "text": " 路由，从而渲染 "
                    },
                    {
                      "code": true,
                      "text": "Edit.vue"
                    },
                    {
                      "text": " 组件。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Index.vue",
          "display": true,
          "commit": "4bad80e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 Admin 的子页面"
                    }
                  ],
                  "id": "KWy7_CPB34"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先创建 "
                    },
                    {
                      "code": true,
                      "text": "Index.vue"
                    },
                    {
                      "text": " 入口组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Index.vue",
              "commit": "4bad80e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，它作为嵌套路由的入口级组件，和我们之前在 "
                    },
                    {
                      "code": true,
                      "text": "App.vue"
                    },
                    {
                      "text": " 里面看到的样子类似，在其中会有 "
                    },
                    {
                      "code": true,
                      "text": "router-link"
                    },
                    {
                      "text": " 导向更深层级的路由."
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "router-view"
                    },
                    {
                      "text": " 用于渲染子路由组件，比如我们此时访问 "
                    },
                    {
                      "code": true,
                      "text": "/admin/new"
                    },
                    {
                      "text": " 页面，那么 "
                    },
                    {
                      "code": true,
                      "text": "router-view"
                    },
                    {
                      "text": " 部分会被替换成 "
                    },
                    {
                      "code": true,
                      "text": "New.vue"
                    },
                    {
                      "text": " 组件的内容，因为我们在之前的嵌套路由定义中  "
                    },
                    {
                      "code": true,
                      "text": "path"
                    },
                    {
                      "text": " 为 "
                    },
                    {
                      "code": true,
                      "text": "new"
                    },
                    {
                      "text": " 的渲染组件为 "
                    },
                    {
                      "code": true,
                      "text": "New.vue"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Edit.vue",
          "display": true,
          "commit": "4bad80e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/Edit.vue"
                    },
                    {
                      "text": " 组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Edit.vue",
              "commit": "4bad80e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，当用户访问 "
                    },
                    {
                      "code": true,
                      "text": "/admin/edit/:id"
                    },
                    {
                      "text": "，会激活渲染 "
                    },
                    {
                      "code": true,
                      "text": "Edit.vue"
                    },
                    {
                      "text": " 组件，我们可以通过 "
                    },
                    {
                      "code": true,
                      "text": "$route.params.id"
                    },
                    {
                      "text": " 的方式获取用户输入的路径 "
                    },
                    {
                      "code": true,
                      "text": ":id"
                    },
                    {
                      "text": " 部分。比如我们在浏览器中输入 "
                    },
                    {
                      "code": true,
                      "text": "/admin/edit/52tuture"
                    },
                    {
                      "text": "，那么浏览器将会以 "
                    },
                    {
                      "code": true,
                      "text": "h1"
                    },
                    {
                      "text": " 的形式打出 "
                    },
                    {
                      "code": true,
                      "text": "\"This is Admin/Edit/52tuture\""
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "code": true,
                          "text": "$route"
                        },
                        {
                          "text": " 这个变量是 Vue 在运行时为我们自动插入到所有组件属性中的，所有我们不用手动去管理它。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/New.vue",
          "display": true,
          "commit": "4bad80e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/New.vue"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/New.vue",
              "commit": "4bad80e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Products.vue",
          "display": true,
          "commit": "4bad80e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/Products.vue"
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Products.vue",
              "commit": "4bad80e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/Admin.vue",
          "display": false,
          "id": "6RtnOoKA-n",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Admin.vue",
              "commit": "4bad80e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "保存我们编写的内容，打开浏览器，我们可以看到如下内容："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/16f265b9cfeec55f.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "至此，我们的迷你全栈电商应用的第一部分就完成了，在接下来的教程中，我们将用 Express 和 MongoDB 搭建这个电商应用的后端 API，不见不散哦~"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "f2fa516",
      "id": "DFpxITAESe",
      "articleId": "5e10a4665188253a800423a5",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f2fa516",
          "id": "YWR31DLotZ",
          "fixed": true,
          "children": [
            {
              "text": "用模板语法和双向绑定实现数据的添加"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这篇文章中，我们将讲解 Vue 实例的 Props 和 Methods，接着讲解最常见的 Vue 模板语法，并通过实例的方式将这些模板语法都实践了一番，最后我们讲解了 Vue 组件的组合，并完成了我们的发表商品页面。"
                }
              ]
            }
          ],
          "flag": "step_start"
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当我们完成了商城应用的基本页面框架之后，我们就可以开始考虑具体页面的内容了。首先我们要考虑的就是数据的来源，即添加商品页面。有了添加商品的入口，我们就可以展示商品列表，获取商品详情，甚至是修改商品信息。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "不过在此之前，我们打算先复习一下 Vue 的一些重要知识点。如果你已经很熟悉了，可以直接跳到下面实现 ProductForm.vue 的代码部分。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Vue 实例：Props 和 Methods"
                }
              ],
              "id": "aVFtO48exc"
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "Props"
                }
              ],
              "id": "ilXbvMpim-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 是 Vue 进行组件之间传参的形式。比如我们有如两个组件 "
                },
                {
                  "code": true,
                  "text": "New.vue"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "ProductForm.vue"
                },
                {
                  "text": "，在 "
                },
                {
                  "code": true,
                  "text": "New.vue"
                },
                {
                  "text": " 组件中需要使用到 "
                },
                {
                  "code": true,
                  "text": "ProductForm.vue"
                },
                {
                  "text": " 组件。其中 "
                },
                {
                  "code": true,
                  "text": "New.vue"
                },
                {
                  "text": " 组件是用来创建商品的，它的代码大致是这样的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "import ProductForm from '@/components/ProductForm.vue';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<ProductForm :manufacturers=\"manufacturers\" />"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "它需要给 "
                },
                {
                  "code": true,
                  "text": "ProductForm.vue"
                },
                {
                  "text": " 组件传递一个 "
                },
                {
                  "code": true,
                  "text": "manufacturers"
                },
                {
                  "text": " 属性，以确保我们在创建商品时，可以选择这个商品所属的制造商，接着我们就可以在 "
                },
                {
                  "code": true,
                  "text": "ProductForm.vue"
                },
                {
                  "text": " 中的 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 中取到这个 "
                },
                {
                  "code": true,
                  "text": "manufacturers"
                },
                {
                  "text": " 属性。"
                },
                {
                  "code": true,
                  "text": "ProductForm.vue"
                },
                {
                  "text": " 的代码大致是这样的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<!-- 模板部分 -->"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<script>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "export default {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  props: ['manufacturers'],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</script>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们在 "
                },
                {
                  "code": true,
                  "text": "ProductForm.vue"
                },
                {
                  "text": " 的 "
                },
                {
                  "code": true,
                  "text": "script"
                },
                {
                  "text": " 部分导出的对象里面找到 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 属性，然后取到 "
                },
                {
                  "code": true,
                  "text": "manufacturers"
                },
                {
                  "text": " 属性。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "Methods"
                }
              ],
              "id": "e_1uRep6l-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后是 "
                },
                {
                  "code": true,
                  "text": "methods"
                },
                {
                  "text": " ，"
                },
                {
                  "code": true,
                  "text": "methods"
                },
                {
                  "text": " 是用来定义在组件中会用到的一些方法，如果说我们前面提到的 "
                },
                {
                  "code": true,
                  "text": "data"
                },
                {
                  "text": " ，是从数据从逻辑层（JS）向视图层（Html）流动的话，那么这里的 "
                },
                {
                  "code": true,
                  "text": "methods"
                },
                {
                  "text": " 就是视图层触发事件，如 click、submit等，反过来修改逻辑层的数据的方法，"
                },
                {
                  "code": true,
                  "text": "methods"
                },
                {
                  "text": " 使得数据可以双向流动。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "让我们在完善一下我们的 "
                },
                {
                  "code": true,
                  "text": "ProductForm.vue"
                },
                {
                  "text": " ，看一下 Methods 在 Vue 中是如何运作的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<form @submit.prevent=\"saveProduct\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<!-- 其他表单，如 input 等 -->"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<div class=\"form-group new-button\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  <button class=\"button\">Add Product</button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</form>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<script>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "export default {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  data: { isSaved: false },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  props: ['manufacturers'],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  methods: {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    saveProduct() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "       this.isSaved = true;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      // 完成一些保存创建商品的逻辑 ..."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</script>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们可以通过在 "
                },
                {
                  "code": true,
                  "text": "template"
                },
                {
                  "text": " （视图层）通过点击提交按钮，发起表单提交事件，进而调用在 "
                },
                {
                  "code": true,
                  "text": "script"
                },
                {
                  "text": " 中定义在 "
                },
                {
                  "code": true,
                  "text": "methods"
                },
                {
                  "text": " 属性中的 "
                },
                {
                  "code": true,
                  "text": "saveProduct"
                },
                {
                  "text": " 方法，这个方法可以进一步修改定义在定义在 "
                },
                {
                  "code": true,
                  "text": "data"
                },
                {
                  "text": " 属性中的数据；甚至如果父组件 "
                },
                {
                  "code": true,
                  "text": "New.vue"
                },
                {
                  "text": " 传递了方法（以 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 的形式）给 "
                },
                {
                  "code": true,
                  "text": "ProductForm.vue"
                },
                {
                  "text": " 组件，我们可在 "
                },
                {
                  "code": true,
                  "text": "saveProduct"
                },
                {
                  "text": " 调用这个传递下来的方法，进而可以影响到父组件 "
                },
                {
                  "code": true,
                  "text": "New.vue"
                },
                {
                  "text": " 中的数据。我们将在后面的正式实现 "
                },
                {
                  "code": true,
                  "text": "ProductForm"
                },
                {
                  "text": " 组件时讲解到它。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "模板语法：v-on"
                }
              ],
              "id": "re3eqX5TT1"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接下来我们再来谈一谈 v-bind 和 v-on 。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 Vue 中，我们通过 "
                },
                {
                  "code": true,
                  "text": "v-on"
                },
                {
                  "text": " 的方式接管了之前在 HTML 中 "
                },
                {
                  "code": true,
                  "text": "onEvent"
                },
                {
                  "text": " ："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "比如之前我们在 HTML 中的写法是这样的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "HTML",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<div onclick=\"alert('I love tuture')\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Hello Tuture"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</div>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在在 Vue 的模板语法中我们需要写出这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "HTML",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<div v-on:click=\"alert('I love tuture')\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Hello Tuture"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</div>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "类似的 "
                },
                {
                  "code": true,
                  "text": "onEvent"
                },
                {
                  "text": " 都要改成 "
                },
                {
                  "code": true,
                  "text": "v-on:Event"
                },
                {
                  "text": "。然后这样写显得比较冗余，所以 Vue 支持简化写法，用 "
                },
                {
                  "code": true,
                  "text": "@"
                },
                {
                  "text": " 替换 "
                },
                {
                  "code": true,
                  "text": "v-on:"
                },
                {
                  "text": " 部分，我们就可以写出这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "HTML",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<div @click=\"alert('I love tuture')\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Hello Tuture"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</div>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "调用事件之后我们一般有一些这样的操作，比如禁用浏览器默认行为，然后自己去处理事件，获取后端数据，以前我们会这样写："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "HTML",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<div onclick=\"saveProduct()\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Hello Tuture"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<script>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "var saveProduct = function (e) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  e.preventDefault();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // do something you like"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</script>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "但是这样写又显得特别繁琐了，Vue 也觉得这样可以简化，于是我们直接将这些禁止默认行为的调用作为绑定事件的属性来进行处理，于是乎在 Vue 中我们可以写出这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  <div @click.prevent=\"saveProduct\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  Hello Tuture"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<script>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "export default {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  methods: {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    saveProduct() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      // do something you like"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</script>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "不知道看了上面的长文，你有没有一点晕，不管你晕不晕，我是得喝口水缓一下。 - v -"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "模板语法：v-bind"
                }
              ],
              "id": "cEfHN7RtX-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们已经看到在 Vue 模板中我们可以使用如下的功能："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "{{}}"
                    },
                    {
                      "text": " 插值语法将 "
                    },
                    {
                      "code": true,
                      "text": "data"
                    },
                    {
                      "text": " 渲染到 HTML 元素内容中"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "v-on"
                    },
                    {
                      "text": " 或者简化写法 "
                    },
                    {
                      "code": true,
                      "text": "@"
                    },
                    {
                      "text": " ，等用来取代 HTML 的事件绑定"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "有了上面的功能，我们可以让 HTML 动起来了，但是还缺点什么，比如我们的 HTML 属性，如 "
                },
                {
                  "code": true,
                  "text": "id"
                },
                {
                  "text": "、"
                },
                {
                  "code": true,
                  "text": "class"
                },
                {
                  "text": " 等，是不是也能动态的获取变化值，你还别说，还真的可以，Vue 模板语法为我们提供了 "
                },
                {
                  "code": true,
                  "text": "v-bind"
                },
                {
                  "text": " 用于动态绑定属性值，我们来看个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<option v-bind:id=\"_id\"  v-bind:value=\"value\" />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<script>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "export default {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  data: { _id: '1', value: \"Xiaomi\" },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</script>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们在 "
                },
                {
                  "code": true,
                  "text": "script"
                },
                {
                  "text": " 中导出的对象属性 "
                },
                {
                  "code": true,
                  "text": "data"
                },
                {
                  "text": " 中，定义了 "
                },
                {
                  "code": true,
                  "text": "_id"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "value"
                },
                {
                  "text": " 值，然后我们通过在 "
                },
                {
                  "code": true,
                  "text": "<template>"
                },
                {
                  "text": " 模板中使用 "
                },
                {
                  "code": true,
                  "text": "v-bind"
                },
                {
                  "text": " 语法动态的给 "
                },
                {
                  "code": true,
                  "text": "option"
                },
                {
                  "text": " 标签的 "
                },
                {
                  "code": true,
                  "text": "id"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "value"
                },
                {
                  "text": " 属性赋值，最后的结果看起来是这样的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<option id=\"1\" value=\"Xiaomi\" />"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然，当需要绑定的属性多了，每次都写 "
                },
                {
                  "code": true,
                  "text": "v-bind"
                },
                {
                  "text": " 显得相当繁琐，所以 Vue 为我们提供了 "
                },
                {
                  "code": true,
                  "text": "v-bind"
                },
                {
                  "text": " 的简洁语法 "
                },
                {
                  "code": true,
                  "text": ":"
                },
                {
                  "text": "，即我们之前的绑定语法从 "
                },
                {
                  "code": true,
                  "text": "v-bind:id=\"_id\""
                },
                {
                  "text": " 变成了 "
                },
                {
                  "code": true,
                  "text": ":id=\"_id\""
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面的代码用简洁语法改写如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<option :id=\"_id\"  :value=\"value\" />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<script>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "export default {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  data: { _id: '1', value: \"Xiaomi\" },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</script>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "模板语法：v-model 双向绑定"
                }
              ],
              "id": "I1Op45B3wj"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "前面我们提到通过 "
                },
                {
                  "code": true,
                  "text": "{{}}"
                },
                {
                  "text": " 插值语法渲染来自 "
                },
                {
                  "code": true,
                  "text": "data"
                },
                {
                  "text": " 的数据实现了逻辑层向视图层的数据流动，通过 "
                },
                {
                  "code": true,
                  "text": "methods"
                },
                {
                  "text": " 在视图层操作逻辑层的数据，实现了视图层的数据向逻辑层的数据流动，从而达到了双向绑定，当我们的应用越来越复杂，我们会发现这样的数据双向流动会越来越频繁，而且粒度也会大小不一，有很多单纯修改某个值的方法调用就会显得特别繁杂，因此 Vue 通过提供 "
                },
                {
                  "code": true,
                  "text": "v-model"
                },
                {
                  "text": " 进行了视图层和逻辑层的双向绑定，让我们来看个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "HTML",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<!-- 其他代码 ... -->"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<input"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  type=\"text\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  placeholder=\"Name\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  v-model=\"name\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<!-- 其他代码 ... -->"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</template>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<script>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "export default {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  data: { name: 'ProductForm' },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</script>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里我们通过申明 "
                },
                {
                  "code": true,
                  "text": "v-mode"
                },
                {
                  "text": " 将此 input 的值和我们在 Vue 实例中的 "
                },
                {
                  "code": true,
                  "text": "model"
                },
                {
                  "text": " 的 "
                },
                {
                  "code": true,
                  "text": "name"
                },
                {
                  "text": " 属性进行了双向绑定，即当 data 中的 "
                },
                {
                  "code": true,
                  "text": "name"
                },
                {
                  "text": " 发生变化，input 的值也会跟着变化，当 input 的值发生变化，我们 data 中的 "
                },
                {
                  "code": true,
                  "text": "name"
                },
                {
                  "text": " 的值也会被修改，这一切都是自动发生的，不需要我们额外的添加 "
                },
                {
                  "code": true,
                  "text": "methods"
                },
                {
                  "text": " 里面的方法调用来手动修改。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "模板语法：循环"
                }
              ],
              "id": "t27LGu0rNP"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好了，Vue 替我们接管了 HTML 元素属性值、事件处理、元素内容，这些都还只属于原来 HTML 的部分，它更强大的一点就是将 JS 的功能引入了模板语法中，使得我们可以实现类似循环，条件选择操作等功能。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接下来我们先来看一下 Vue 为我们提供的 “循环” 模板语法， 它使得我们可以快速渲染大量具有相似结构的数据，比如渲染一个数组的数据，生成一个 HTML 元素列表，这在我们平时看到的新闻 App 里面很常见，我们浏览新闻时，发现其实每条新闻的结构都很相似，并且有很多条新闻（可能多大几百上千条），如果每一条我们都手动写 HTML 代码的话，无疑显得相当繁琐，并且数据一多，我们手动就显得无能为力了，而 Vue 为我们提供的 “循环” 模板语法，使得我们可以通过非常简单的写法就可以渲染大量数据，我们来看个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "HTML",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<!--"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "manufacturers = ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { _id: 1, name: 'Apple' },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { _id: 2, name: 'Xiaomi' }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "]"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "model = { _id: 1, name: 'Apple' }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": " -->"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<template v-for=\"manufacturer in manufacturers\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  <option :value=\"manufacturer._id\" :selected=\"manufacturer._id == model._id\">{{manufacturer.name}}</option>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</template>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最后渲染的结果为："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "HTML",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<option value=\"1\" selected=\"true\">Apple</option>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<option value=\"2\" selected=\"false\">Xiaomi</option>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "注意到，如果我们在写 “循环” 语法时，使用了一个额外的标签 "
                },
                {
                  "code": true,
                  "text": "template"
                },
                {
                  "text": " 来包裹我们需要渲染的 HTML 元素，这也是 Vue 推荐的写法；我们在 "
                },
                {
                  "code": true,
                  "text": "template"
                },
                {
                  "text": " 标签的属性上添加 "
                },
                {
                  "code": true,
                  "text": "v-for"
                },
                {
                  "text": " 然后给它赋值 "
                },
                {
                  "code": true,
                  "text": "\"manufacturer in manufacturers\""
                },
                {
                  "text": "，通过这样的形式进行列表数据的遍历，每次从 "
                },
                {
                  "code": true,
                  "text": "manufacturers"
                },
                {
                  "text": " 中取一个元素，并赋值给 "
                },
                {
                  "code": true,
                  "text": "manufacturer"
                },
                {
                  "text": " ，然后我们就可以在 "
                },
                {
                  "code": true,
                  "text": "option"
                },
                {
                  "text": "  标签中使用 "
                },
                {
                  "code": true,
                  "text": "manufacturer"
                },
                {
                  "text": " 和我们定义的 "
                },
                {
                  "code": true,
                  "text": "model"
                },
                {
                  "text": " 进行比较。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为我们的 "
                },
                {
                  "code": true,
                  "text": "model._id"
                },
                {
                  "text": " 为 "
                },
                {
                  "code": true,
                  "text": "1"
                },
                {
                  "text": "，它和 "
                },
                {
                  "code": true,
                  "text": "manufacturers"
                },
                {
                  "text": " 数组的第一项元素的 "
                },
                {
                  "code": true,
                  "text": "_id"
                },
                {
                  "text": " 一致，所以我们返回的两个 "
                },
                {
                  "code": true,
                  "text": "option"
                },
                {
                  "text": " 标签，第一个 "
                },
                {
                  "code": true,
                  "text": "selected"
                },
                {
                  "text": " 属性为 "
                },
                {
                  "code": true,
                  "text": "true"
                },
                {
                  "text": "，第二个为 "
                },
                {
                  "code": true,
                  "text": "false"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "模板语法：条件选择"
                }
              ],
              "id": "_kfCuxMfVG"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面的讲述了循环是如何在 Vue 中使用的，下面我们来看一看条件语法是如何在 Vue 中使用的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<span v-if=\"isEditing\">Update Product</span>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<span v-else>Add Product</span>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<script>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "export default {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  data: { isEditing: false },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "</script>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以看到，通过在标签上加 "
                },
                {
                  "code": true,
                  "text": "v-if"
                },
                {
                  "text": " 并后面紧跟加 "
                },
                {
                  "code": true,
                  "text": "v-else"
                },
                {
                  "text": " 的标签我们可以判断最终渲染的标签，比如我们这里 "
                },
                {
                  "code": true,
                  "text": "isEditing"
                },
                {
                  "text": " 为 "
                },
                {
                  "code": true,
                  "text": "false"
                },
                {
                  "text": "，那么我们最终渲染的结果为："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<span>Add Product</span>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然你可以添加诸如 "
                },
                {
                  "code": true,
                  "text": "v-else-if"
                },
                {
                  "text": " 的标签来做多重判断。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里的带 "
                    },
                    {
                      "code": true,
                      "text": "v-if"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "v-else-if"
                    },
                    {
                      "text": " 或 "
                    },
                    {
                      "code": true,
                      "text": "v-else"
                    },
                    {
                      "text": " 的标签需要依次紧跟着前面的标签，不能在这些带条件属性的标签中插入其他不带条件的标签，比如下面这段代码就是错误的："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "html",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<span v-if=\"isEditing\">Update Product</span>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<span>我是错误插入的标签</span>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<span v-else>Add Product</span>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<script>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export default {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  data: { isEditing: false },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "</script>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "flag": "step_start"
        },
        {
          "type": "file",
          "file": "package-lock.json",
          "id": "UJifQWsvz4",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package-lock.json",
              "commit": "f2fa516",
              "hiddenLines": [
                [0, 11938],
                [11950, 12767]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": false,
          "id": "nQoWcOWfYQ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "f2fa516",
              "hiddenLines": [
                [0, 9],
                [17, 71]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductForm.vue",
          "display": true,
          "commit": "f2fa516",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "动手实现"
                    }
                  ],
                  "id": "WE6ayD7kUt"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "讲解完 Vue 的基础知识之后，我们马上将所有的知识运用起来，来编写我们的 "
                    },
                    {
                      "code": true,
                      "text": "ProductForm.vue"
                    },
                    {
                      "text": " 组件，它用来添加或者更新商品的信息。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在 "
                    },
                    {
                      "code": true,
                      "text": "src/components"
                    },
                    {
                      "text": " 中创建 "
                    },
                    {
                      "code": true,
                      "text": "ProductForm.vue"
                    },
                    {
                      "text": " 表单组件，代码如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductForm.vue",
              "commit": "f2fa516",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这段代码看起来很长，你可能被吓到了，让我们一段一段来拆解它。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "script 部分"
                    }
                  ],
                  "id": "ma1FHjdWsH"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们的 "
                    },
                    {
                      "code": true,
                      "text": "props"
                    },
                    {
                      "text": " 接收来自父组件的三个参数："
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "isEditing"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后我们定义了一个 "
                    },
                    {
                      "code": true,
                      "text": "saveProduct"
                    },
                    {
                      "text": " 方法，就是当用户填写完商品信息的表单之后，点击提交按钮会触发的方法，在 "
                    },
                    {
                      "code": true,
                      "text": "saveProduct"
                    },
                    {
                      "text": " 内部，我们调用了父组件的 "
                    },
                    {
                      "code": true,
                      "text": "save-product"
                    },
                    {
                      "text": " 方法，并把修改后的 "
                    },
                    {
                      "code": true,
                      "text": "this.model"
                    },
                    {
                      "text": " 变量内容传给父组件。所以这里我们还可以看到，"
                    },
                    {
                      "code": true,
                      "text": "methods"
                    },
                    {
                      "text": " 不仅可以使得数据可以双向流动，而且还可以在子组件反向操作父组件的内容，使得数据还可以上下流动。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "template 部分"
                    }
                  ],
                  "id": "CgQ9Us_VF6"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来我们再来谈一谈 "
                    },
                    {
                      "code": true,
                      "text": "template"
                    },
                    {
                      "text": " 里面发生的事情。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到 "
                    },
                    {
                      "code": true,
                      "text": "template"
                    },
                    {
                      "text": " 里面就是一个表单，这个表单定义了一个 "
                    },
                    {
                      "code": true,
                      "text": "submit"
                    },
                    {
                      "text": " 事件，并且使用了禁用默认事件的简洁写法 "
                    },
                    {
                      "code": true,
                      "text": "@submit.prevent"
                    },
                    {
                      "text": "。 这个事件触发会调用我们上面提到的 "
                    },
                    {
                      "code": true,
                      "text": "saveProduct"
                    },
                    {
                      "text": " 方法。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们定义了好几个 "
                    },
                    {
                      "code": true,
                      "text": "class"
                    },
                    {
                      "text": " 为 "
                    },
                    {
                      "code": true,
                      "text": "form-group"
                    },
                    {
                      "text": " 的元素块，每个块代表我们创建商品所需要填写的相关信息，我们注意到，前两个 "
                    },
                    {
                      "code": true,
                      "text": "form-group"
                    },
                    {
                      "text": " 使用 "
                    },
                    {
                      "code": true,
                      "text": "v-model"
                    },
                    {
                      "text": " 双向绑定语法分别绑定了 "
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": " 的 "
                    },
                    {
                      "code": true,
                      "text": "name"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "price"
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "第三个 "
                    },
                    {
                      "code": true,
                      "text": "form-group"
                    },
                    {
                      "text": " 我们首先在 "
                    },
                    {
                      "code": true,
                      "text": "select"
                    },
                    {
                      "text": " 标签中使用 "
                    },
                    {
                      "code": true,
                      "text": "v-model"
                    },
                    {
                      "text": " 双向绑定了 "
                    },
                    {
                      "code": true,
                      "text": "model.manufacturer"
                    },
                    {
                      "text": "，表示我们在视图里面进行选择时，会修改对应的 "
                    },
                    {
                      "code": true,
                      "text": "model.manufacturer"
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们对 "
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": " 进行循环遍历，构造多个 "
                    },
                    {
                      "code": true,
                      "text": "option"
                    },
                    {
                      "text": " 标签选项，然后使用了属性绑定语法的简洁写法绑定了 "
                    },
                    {
                      "code": true,
                      "text": "option"
                    },
                    {
                      "text": " 的 "
                    },
                    {
                      "code": true,
                      "text": "value"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "selected"
                    },
                    {
                      "text": " 属性，"
                    },
                    {
                      "code": true,
                      "text": "value"
                    },
                    {
                      "text": " 属性赋值为 "
                    },
                    {
                      "code": true,
                      "text": "manufacturer._id"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "selected"
                    },
                    {
                      "text": " 属性会进行判断，"
                    },
                    {
                      "code": true,
                      "text": "model.manufacturer && model.manufacturer._id"
                    },
                    {
                      "text": " 表示首先检验 "
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": " 的 "
                    },
                    {
                      "code": true,
                      "text": "manufacturer"
                    },
                    {
                      "text": " 属性是否存在，正常情况下它应该是一个对象，如果 "
                    },
                    {
                      "code": true,
                      "text": "model.manufacturer"
                    },
                    {
                      "text": " 属性存在，那么获取 "
                    },
                    {
                      "code": true,
                      "text": "model.manufacturer._id"
                    },
                    {
                      "text": "，然后用获取到的这个  "
                    },
                    {
                      "code": true,
                      "text": "model.manufacturer._id"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "manufacturer._id"
                    },
                    {
                      "text": " 进行比较，如果一致，那么 "
                    },
                    {
                      "code": true,
                      "text": "selected"
                    },
                    {
                      "text": " 属性为 "
                    },
                    {
                      "code": true,
                      "text": "true"
                    },
                    {
                      "text": "，不一致就为 "
                    },
                    {
                      "code": true,
                      "text": "false"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后我们来看一下第二段 "
                    },
                    {
                      "code": true,
                      "text": "form-group"
                    },
                    {
                      "text": "，也就是第 4-6 个 "
                    },
                    {
                      "code": true,
                      "text": "form-group"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到前两个 "
                    },
                    {
                      "code": true,
                      "text": "form-group"
                    },
                    {
                      "text": " 使用 "
                    },
                    {
                      "code": true,
                      "text": "v-model"
                    },
                    {
                      "text": " 双向绑定了 "
                    },
                    {
                      "code": true,
                      "text": "model.image"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "model.description "
                    },
                    {
                      "text": " ，表示当用户上传了商品图片和描述之后，对应的 "
                    },
                    {
                      "code": true,
                      "text": "model.image"
                    },
                    {
                      "text": " 就会变成用户上传的商品图片，"
                    },
                    {
                      "code": true,
                      "text": "model.description"
                    },
                    {
                      "text": " 就会变成用户撰写的商品描述。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后一个 "
                    },
                    {
                      "code": true,
                      "text": "form-group"
                    },
                    {
                      "text": " 我们使用了条件选择语法，判断 "
                    },
                    {
                      "code": true,
                      "text": "isEditing"
                    },
                    {
                      "text": "，来渲染不同的按钮文案。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "type": "file",
          "file": "src/main.js",
          "display": false,
          "id": "BlwiCDCNxy",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/main.js",
              "commit": "f2fa516",
              "hiddenLines": [[13, 17]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/New.vue",
          "display": true,
          "commit": "f2fa516",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "Vue 组件组合"
                    }
                  ],
                  "id": "7Pf6YKXgNH"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "编写完上面的表单之后，我们在 "
                    },
                    {
                      "code": true,
                      "text": "New.vue"
                    },
                    {
                      "text": " 中引入我们创建的表单组件："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/New.vue",
              "commit": "f2fa516",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当一个组件要在模板语法中使用另外一个组件时，需要申明此组件，即在组件的 "
                    },
                    {
                      "code": true,
                      "text": "components"
                    },
                    {
                      "text": " 属性中申明要使用的组件，比如我们上面使用名为 "
                    },
                    {
                      "code": true,
                      "text": "'product-form'"
                    },
                    {
                      "text": " 的名称来申明使用 "
                    },
                    {
                      "code": true,
                      "text": "ProductForm"
                    },
                    {
                      "text": " 组件，这样在 "
                    },
                    {
                      "code": true,
                      "text": "template"
                    },
                    {
                      "text": " 中我们就可以以 "
                    },
                    {
                      "code": true,
                      "text": "<product-form />"
                    },
                    {
                      "text": " 形式使用导入的表单组件。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同时我们在组件的 "
                    },
                    {
                      "code": true,
                      "text": "data"
                    },
                    {
                      "text": " 中定义了 "
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": " 以及在 "
                    },
                    {
                      "code": true,
                      "text": "methods"
                    },
                    {
                      "text": " 中定义了 "
                    },
                    {
                      "code": true,
                      "text": "addProduct"
                    },
                    {
                      "text": " 方法，并将它们以属性绑定 "
                    },
                    {
                      "code": true,
                      "text": ":model=\"model\""
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": ":manufacturers=\"manufacturers\""
                    },
                    {
                      "text": " 和事件绑定 "
                    },
                    {
                      "code": true,
                      "text": "@save-product=\"saveProduct\""
                    },
                    {
                      "text": " 的方式传递给表单组件。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当保存上面编写的代码之后，我们打开浏览器，点击导航链接 "
                },
                {
                  "code": true,
                  "text": "Admin"
                },
                {
                  "text": "，然后点击子导航链接 "
                },
                {
                  "code": true,
                  "text": "New Products"
                },
                {
                  "text": "，切换到我们的 "
                },
                {
                  "code": true,
                  "text": "New.vue"
                },
                {
                  "text": " 添加商品页面，我们可以看到如下的效果："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/16f71022a22e3093.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "QjAXsgdEMg"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "到现在为止，我们已经了解了 Vue 的基础部分，包括："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "用路由进行多页面的跳转和导航"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "用嵌套路由和动态路由合理组织页面"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Vue 组件和 Vue 实例"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Vue 模板语法"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "掌握了这些知识后，我们已经可以实现很多前端的功能，完成一些简单的 Vue 应用了。但是如果要完成数据逻辑复杂的大型应用，目前学到的知识就力不从心了。但是没关系，我们将在后面学习 Vuex 这一前端状态管理工具，有了 Vuex 的加持，我们就能用 Vuex 写出任意复杂的应用了。"
                }
              ]
            }
          ],
          "flag": "step_end"
        }
      ]
    },
    {
      "type": "step",
      "commit": "0dfeb91",
      "id": "weUUCo3Dyp",
      "articleId": "ae8a389b0b6f1fb121a6881d2ec2544f",
      "children": [
        {
          "type": "heading-two",
          "commit": "0dfeb91",
          "id": "7tTJmUnB8X",
          "fixed": true,
          "children": [
            {
              "text": "使用 Vuex 进行状态管理"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在"
                },
                {
                  "link": true,
                  "url": "https.tuture.co/2019/10/17/0b662ce/",
                  "text": "第一篇"
                },
                {
                  "text": "和"
                },
                {
                  "link": true,
                  "url": "https.tuture.co/2019/10/17/5e10a46/",
                  "text": "第三篇"
                },
                {
                  "text": "中讲解了 Vue 的基础部分，利用这些知识你已经可以实现一些比较简单的应用了。但是针对复杂的应用，比如组件嵌套超过三级，我们前面讲解的知识处理起来就很费力了，还好 Vue 社区为我们打造了状态管理容器 "
                },
                {
                  "link": true,
                  "url": "https://vuex.vuejs.org/zh/",
                  "text": "Vuex"
                },
                {
                  "text": "，用来处理大型应用的数据和状态管理。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "安装 Vuex 依赖"
                }
              ],
              "id": "lg8g-cFv-6"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先我们打开命令行，进入项目目录，执行如下命令安装 Vuex:"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "shell",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm install vuex"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package-lock.json",
          "id": "oHEzTeu3Se",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package-lock.json",
              "commit": "0dfeb91",
              "hiddenLines": [
                [0, 12084],
                [12096, 12772]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": false,
          "id": "aOy0np_uCI",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "0dfeb91",
              "hiddenLines": [
                [0, 11],
                [21, 73]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/store/index.js",
          "display": true,
          "id": "QX3OyM3FaL",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 Vuex Store"
                    }
                  ],
                  "id": "jwD0m5xVnf"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Vuex 是一个前端状态管理工具，它致力于接管 Vue 的状态，使得 Vue 专心做好渲染页面的事情；它类似在前端建立了一个 “数据库”，然后将所有的前端状态都保存在这个 “数据库” 里面。这个 “数据库” 其实就是一个普通的 JavaScript 对象。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好了，讲述了 Vuex 是干什么之后，我们来看一下如何在 Vue 中运用 Vuex。Vuex 建立的这个 “数据库” 一般用术语 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 来表示，通常我们建立一个单独的 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 文件夹，用于保存和 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 有关的内容。我们在 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": " 文件夹下建立 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 文件夹，然后在里面创建 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 文件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/index.js",
              "commit": "0dfeb91",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面的代码可以分为三部分。"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们导入 "
                        },
                        {
                          "code": true,
                          "text": "Vue"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "Vuex"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后我们调用 "
                        },
                        {
                          "code": true,
                          "text": "Vue.use"
                        },
                        {
                          "text": " 方法，告诉 Vue 我们将使用 "
                        },
                        {
                          "code": true,
                          "text": "Vuex"
                        },
                        {
                          "text": "，这和我们之前使用 "
                        },
                        {
                          "code": true,
                          "text": "Vue.use(router)"
                        },
                        {
                          "text": " 的原理一样"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们导出 "
                        },
                        {
                          "code": true,
                          "text": "Vuex.Store"
                        },
                        {
                          "text": " 实例，并且传入了 "
                        },
                        {
                          "code": true,
                          "text": "strict"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "state"
                        },
                        {
                          "text": " 参数。这里 "
                        },
                        {
                          "code": true,
                          "text": "strict"
                        },
                        {
                          "text": " 参数表示，我们必须使用 Vuex 的 Mutation 函数来改变 "
                        },
                        {
                          "code": true,
                          "text": "state"
                        },
                        {
                          "text": "，否则就会报错（关于 Mutation 我们将在 “使用 Vuex 进行状态管理” 一节讲解）。而 "
                        },
                        {
                          "code": true,
                          "text": "state"
                        },
                        {
                          "text": " 参数用来存放我们全局的状态，比如我们这里定义了 "
                        },
                        {
                          "code": true,
                          "text": "cart"
                        },
                        {
                          "text": "、 "
                        },
                        {
                          "code": true,
                          "text": "showLoader"
                        },
                        {
                          "text": " 等属性都是后面我们完善应用的内容需要的数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/main.js",
          "display": true,
          "id": "1iBtvROONL",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "将 Vuex 和 Vue 整合"
                    }
                  ],
                  "id": "H3z5iv57oN"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当我们创建并导出了 Vuex 的 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 实例之后，我们就可以使用它了。打开 "
                    },
                    {
                      "code": true,
                      "text": "src/main.js"
                    },
                    {
                      "text": " 文件，在开头导入之前创建的 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " ，并将 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 添加到 Vue 初始化的参数列表里，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/main.js",
              "commit": "0dfeb91",
              "hiddenLines": [
                [0, 3],
                [11, 12]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，在上面的文件中，我们一开头导入了我们之前在 "
                    },
                    {
                      "code": true,
                      "text": "src/store/index.js"
                    },
                    {
                      "text": " 里定义的 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 实例，接着，在 Vue 实例初始化时，我们将这个 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 实例使用对象属性简洁写法添加到了参数列表里。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当我们将 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 当做参数传给 Vue 进行初始化之后，Vue 就会将 Store 里面的 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": " 注入到所有的 Vue 组件中，这样所有的 Vue 组件共享同一个全局的 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": " ，它其实就是一个 JS 对象，应用中所有状态的变化都是对 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": " 进行操作，然后响应式的触发组件的重新渲染，所以这里的 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": " 也有 “数据的唯一真相来源” 的称谓。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这种将状态保存到一个全局的 JavaScript 对象 – state 中，然后所有的增、删、改、查操作都是对这个 JavaScript 对象进行，使得我们可以避免组件嵌套层级过深时，组件之间传递属性的复杂性，让属性的定义，获取，修改非常直观，方便开发大型应用和团队协作。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/admin/Products.vue",
          "display": true,
          "id": "xLplD1GcfU",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "查看 Vuex 整合后的效果"
                    }
                  ],
                  "id": "ccBF_DgL_E"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在将 Vuex 和 Vue 整合好之后，我们马上来看一下 Vuex 带来的效果，不过在此之前我们先来讲一讲什么是计算属性（"
                    },
                    {
                      "code": true,
                      "text": "computed"
                    },
                    {
                      "text": "）。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "计算属性（Computed）"
                    }
                  ],
                  "id": "1rJPJaZ-8t"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们新增了 "
                    },
                    {
                      "code": true,
                      "text": "script"
                    },
                    {
                      "text": " 部分，然后在导出的对象里面增加了一个 "
                    },
                    {
                      "code": true,
                      "text": "computed"
                    },
                    {
                      "text": " 属性，这个属性里面的内容用于申明一些可能要在 "
                    },
                    {
                      "code": true,
                      "text": "template"
                    },
                    {
                      "text": " 里面使用的复杂表达式。我们来看一个例子来讲解一下 "
                    },
                    {
                      "code": true,
                      "text": "computed"
                    },
                    {
                      "text": " 属性："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在模板中可能要获取一个多级嵌套对象里面的某个数据，或者要渲染的数据需要经过复杂的表达式来计算，比如我们要渲染这样一个数据 "
                    },
                    {
                      "code": true,
                      "text": "obj1.obj2.obj3.a + obj1.obj4.b"
                    },
                    {
                      "text": "，写在模板里就是这样的："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "HTML",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<template>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  {{ obj1.obj2.obj3.a + obj1.obj4.b }}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "</div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "</template>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<script>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export default {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  data: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    obj1: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      obj2: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        obj3: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          a"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      obj4: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        b"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "</script>"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们一眼看上去，这个模板里面有这样一个复杂的表达式，很不容易反应出来它到底要渲染什么，这样代码的可读性就很差，所以 Vue 为我们提供了计算属性（ "
                    },
                    {
                      "code": true,
                      "text": "computed"
                    },
                    {
                      "text": " ），用于用简单的变量来代表复杂的表达式结果，进而简化模板中插值的内容，让我们的模板看起来可读性更好，上面的代码使用计算属性来改进会变成下面这样："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<template>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  {{ addResult }}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "</div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "</template>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<script>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export default {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  data: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    obj1: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      obj2: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        obj3: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          a"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      obj4: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        b"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  computed: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    addResult() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      return this.obj1.obj2.obj3.a + this.obj1.obj4.b"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "</script>"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，当我们使用了计算属性 "
                    },
                    {
                      "code": true,
                      "text": "addResult"
                    },
                    {
                      "text": " 之后，我们在模板里面的写法就简化了很多，而且一目了然我们是渲染了什么。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "了解了计算属性之后，我们打开 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/Products.vue"
                    },
                    {
                      "text": "，对内容作出如下改进以查看 Vuex 和 Vue 整合之后的效果："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Products.vue",
              "commit": "0dfeb91",
              "hiddenLines": [[0, 1]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容改进主要分为两个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们定义了一个 "
                        },
                        {
                          "code": true,
                          "text": "product"
                        },
                        {
                          "text": " 计算属性，它里面返回一个从 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 中保存的 "
                        },
                        {
                          "code": true,
                          "text": "state"
                        },
                        {
                          "text": " 取到的 "
                        },
                        {
                          "code": true,
                          "text": "products"
                        },
                        {
                          "text": " 数组的第一个元素，注意到当我们在 “将 Vuex 和 Vue 整合” 这一小节中将 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 作为 Vue 初始化实例参数，所以我们在所有的 Vue 组件中可以通过 "
                        },
                        {
                          "code": true,
                          "text": "this.$store.state"
                        },
                        {
                          "text": " 的形式取到 Vuex Store 中保存的 "
                        },
                        {
                          "code": true,
                          "text": "state"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用了计算属性 "
                        },
                        {
                          "code": true,
                          "text": "product"
                        },
                        {
                          "text": "，取到了它的 "
                        },
                        {
                          "code": true,
                          "text": "name"
                        },
                        {
                          "text": " 属性进行渲染。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "dE9Q8kbrMF"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一小节中，我们学习了如何将 Vuex 整合进 Vue 中："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先我们安装了 "
                    },
                    {
                      "code": true,
                      "text": "vuex"
                    },
                    {
                      "text": " 依赖"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "接着我们在 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": " 下面创建了 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 文件夹，用于保存 Vuex 相关的内容，在 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 文件下之下，我们创建了 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 文件，在里面实例化了 "
                    },
                    {
                      "code": true,
                      "text": "Vuex.Store"
                    },
                    {
                      "text": " 类，我们在实例化的过程中传递了两个参数："
                    },
                    {
                      "code": true,
                      "text": "strict"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "strict"
                    },
                    {
                      "text": " 表示我们告诉 Vue，只允许 "
                    },
                    {
                      "code": true,
                      "text": "Mutation"
                    },
                    {
                      "text": " 方法才能修改 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": "，确保修改状态的唯一性；"
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": " 是我们整个应用的状态，整个应用的状态都是从它获取，整个应用状态的改变都是修改它，所以这个 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": " 也有 “数据的唯一真相来源” 的称谓。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "然后我们通过在 "
                    },
                    {
                      "code": true,
                      "text": "main.js"
                    },
                    {
                      "text": " 里面导入实例化的 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "，将它加入到初始化 Vue 实例的参数列表中，实现了 Vuex 和 Vue 的整合。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最后我们讲解了计算属性，然后通过在计算属性中获取 "
                    },
                    {
                      "code": true,
                      "text": "this.$store.state"
                    },
                    {
                      "text": " 的方式展示了 Vuex 整合之后的效果。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好了，我们已经整合了 Vuex，并在 Vue 组件中获取了保存在 Vuex Store 中的状态（state），接下来我们来看一下如何修改这个状态。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "7b7d864",
      "id": "_bBwfk_yHQ",
      "articleId": "ae8a389b0b6f1fb121a6881d2ec2544f",
      "children": [
        {
          "type": "heading-two",
          "commit": "7b7d864",
          "id": "WTwvOaefi3",
          "fixed": true,
          "children": [
            {
              "text": "使用 Mutation 修改本地状态"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在上一节中定义了 Vuex Store，并在里面保存了全局的状态 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": "，这一节我们来学习如何修改这一状态。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "理解 Mutation：修改状态的唯一手段"
                }
              ],
              "id": "h8ti3wuEkk"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Vuex 为我们提供了 "
                },
                {
                  "code": true,
                  "text": "Mutation"
                },
                {
                  "text": "，它是修改 Vuex Store 中保存状态的唯一手段。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Mutation 是定义在 Vuex Store 的 "
                },
                {
                  "code": true,
                  "text": "mutation"
                },
                {
                  "text": " 属性中的一系列形如 "
                },
                {
                  "code": true,
                  "text": "(state, payload) => newState"
                },
                {
                  "text": " 的函数，用于响应从 Vue 视图层发出来的事件或动作，例如："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "ACTION_NAME(state, payload) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 对 `state` 进行操作以返回新的 `state`"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return newState;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中方法名 "
                },
                {
                  "code": true,
                  "text": "ACTION_NAME"
                },
                {
                  "text": " 用于对应从视图层里面发出的事件或动作的名称，这个函数接收两个参数 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "payload"
                },
                {
                  "text": "，"
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": " 就是我们 Vuex Store 中保存的 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": "，"
                },
                {
                  "code": true,
                  "text": "payload"
                },
                {
                  "text": " 是被响应的那个事件或动作携带的参数，然后我们通过 "
                },
                {
                  "code": true,
                  "text": "payload"
                },
                {
                  "text": " 的参数来操作现有的 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": "，返回新的 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": "，通过这样的方式，我们就可以响应修改 Vuex Store 中保存的全局状态。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "了解了 Mutation 的概念之后，我们马上来看一下如何运用它。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/store/index.js",
          "display": true,
          "id": "kxbm1o0hYH",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "初始化状态（硬编码）"
                    }
                  ],
                  "id": "91I6514g-Q"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们打开 "
                    },
                    {
                      "code": true,
                      "text": "src/store/index.js"
                    },
                    {
                      "text": " 文件，修改其中的 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": " 并加上 "
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": " 如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/index.js",
              "commit": "7b7d864",
              "hiddenLines": [[0, 13]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的代码改进分为两个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们扩充了 "
                        },
                        {
                          "code": true,
                          "text": "state"
                        },
                        {
                          "text": " 中的 "
                        },
                        {
                          "code": true,
                          "text": "products"
                        },
                        {
                          "text": " 属性，在里面保存一开始我们的迷你电商平台的初始数据，这里我们是硬编码到代码中的，在下一节 “使用 Action 获取远程数据”中，我们将动态获取后端服务器的数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们在 "
                        },
                        {
                          "code": true,
                          "text": "Vuex.Store"
                        },
                        {
                          "text": " 实例化的参数中添加了一个 "
                        },
                        {
                          "code": true,
                          "text": "mutations"
                        },
                        {
                          "text": " 属性，在里面定义了两个函数 "
                        },
                        {
                          "code": true,
                          "text": "ADD_TO_CART"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "REMOVE_FROM_CART"
                        },
                        {
                          "text": "，分别代表响应从视图层发起的对应将商品添加至购物车和从购物车移除商品的动作。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/products/ProductList.vue",
          "display": true,
          "id": "nUZjdoTyhp",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 ProductList 组件"
                    }
                  ],
                  "id": "OcG1TzUkwB"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/products/ProductList.vue"
                    },
                    {
                      "text": " 文件，它是商品列表组件，用来展示商品的详细信息，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductList.vue",
              "commit": "7b7d864",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们首先来看该组件的 "
                    },
                    {
                      "code": true,
                      "text": "script"
                    },
                    {
                      "text": " 部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "先定义了一个计算属性 "
                        },
                        {
                          "code": true,
                          "text": "products"
                        },
                        {
                          "text": "，通过 "
                        },
                        {
                          "code": true,
                          "text": "this.$store.state.products"
                        },
                        {
                          "text": " 从本地状态中获取到了 "
                        },
                        {
                          "code": true,
                          "text": "products"
                        },
                        {
                          "text": " 数组，并作为计算属性 "
                        },
                        {
                          "code": true,
                          "text": "products"
                        },
                        {
                          "text": " 的返回值"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后定义了一个点击事件 "
                        },
                        {
                          "code": true,
                          "text": "addToCart"
                        },
                        {
                          "text": "，并且传入了当前处于激活状态的 "
                        },
                        {
                          "code": true,
                          "text": "product"
                        },
                        {
                          "text": " 参数。当用户点击“添加购物车”时，触发 "
                        },
                        {
                          "code": true,
                          "text": "addToCart"
                        },
                        {
                          "text": " 事件，也就是上面所说的视图层发出的事件。这里是通过 "
                        },
                        {
                          "code": true,
                          "text": "this .$store.commit"
                        },
                        {
                          "text": " 将携带当前商品的对象 "
                        },
                        {
                          "code": true,
                          "text": "{product}"
                        },
                        {
                          "text": " 作为载荷提交到类型为"
                        },
                        {
                          "code": true,
                          "text": "ADD_TO_CART"
                        },
                        {
                          "text": "的 "
                        },
                        {
                          "code": true,
                          "text": "mutation"
                        },
                        {
                          "text": " 中，在 "
                        },
                        {
                          "code": true,
                          "text": "mutation"
                        },
                        {
                          "text": " 中进行本地状态修改，我们会在后面抽离出的 "
                        },
                        {
                          "code": true,
                          "text": "mutations"
                        },
                        {
                          "text": " 文件中看到具体的操作。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再看该组件的 "
                    },
                    {
                      "code": true,
                      "text": "template"
                    },
                    {
                      "text": " 部分，使用 "
                    },
                    {
                      "code": true,
                      "text": "v-for"
                    },
                    {
                      "text": " 将从本地获取到的 "
                    },
                    {
                      "code": true,
                      "text": "products"
                    },
                    {
                      "text": " 数组进行遍历，每个 "
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": " 对象的详细信息都会显示在模板中。此外，我们还在每个 "
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": " 对象信息的最后添加了一个“加入购物车”的按钮，允许我们将指定商品添加到购物车。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/Home.vue",
          "display": true,
          "id": "vX-MxqJdYs",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在页面中接入数据"
                    }
                  ],
                  "id": "alLk6PqLht"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Store 和组件都搞定之后，我们就可以在之前的页面中接入数据了。修改主页 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/Home.vue"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Home.vue",
              "commit": "7b7d864",
              "hiddenLines": [[15, 15]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们在导入 "
                    },
                    {
                      "code": true,
                      "text": "ProductList"
                    },
                    {
                      "text": " 组件后，将其注册到 "
                    },
                    {
                      "code": true,
                      "text": "components"
                    },
                    {
                      "text": " 中，然后在模板中使用这个组件。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/Cart.vue",
          "display": true,
          "id": "5WshL13-2p",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着修改购物车页面 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/Cart.vue"
                    },
                    {
                      "text": " 文件，将购物车中的商品信息展示出来，添加代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Cart.vue",
              "commit": "7b7d864",
              "hiddenLines": [
                [0, 1],
                [32, 32]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在该组件中主要增加了两部分代码："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先是 "
                        },
                        {
                          "code": true,
                          "text": "script"
                        },
                        {
                          "text": " 部分，我们增加了一个计算属性和一个点击事件。同样是通过 "
                        },
                        {
                          "code": true,
                          "text": "this.$store.state.cart"
                        },
                        {
                          "text": " 的方式从本地状态中获取购物车数组，并作为计算属性 "
                        },
                        {
                          "code": true,
                          "text": "cart"
                        },
                        {
                          "text": " 的返回值；当用户点击购物车中的某个商品将其移除购物车时就会触发 "
                        },
                        {
                          "code": true,
                          "text": "removeFromCart"
                        },
                        {
                          "text": " 事件，并且将要移除的商品 id 作为参数传入，然后也是通过 "
                        },
                        {
                          "code": true,
                          "text": "this.$store.commit"
                        },
                        {
                          "text": " 的方式将包含 "
                        },
                        {
                          "code": true,
                          "text": "productId"
                        },
                        {
                          "text": " 的对象作为载荷提交到类型为 "
                        },
                        {
                          "code": true,
                          "text": "REMOVE_FROM_CART"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "mutation"
                        },
                        {
                          "text": " 中，在 "
                        },
                        {
                          "code": true,
                          "text": "mutation"
                        },
                        {
                          "text": " 中进行本地状态修改，具体修改操作我们可以在后面抽离出的 "
                        },
                        {
                          "code": true,
                          "text": "mutations"
                        },
                        {
                          "text": " 文件中看到。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后是 "
                        },
                        {
                          "code": true,
                          "text": "template"
                        },
                        {
                          "text": " 部分，我们通过 "
                        },
                        {
                          "code": true,
                          "text": "v-for"
                        },
                        {
                          "text": " 遍历了购物车数组，将购物车中的所有商品信息展示在模板中。并在每个商品信息的最后添加了一个移除购物车的按钮，当用户希望移除购物车中指定商品时，会触发 "
                        },
                        {
                          "code": true,
                          "text": "removeFromCart"
                        },
                        {
                          "text": " 事件。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/admin/New.vue",
          "display": false,
          "id": "lUk4sXSGA_",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/New.vue",
              "commit": "7b7d864",
              "hiddenLines": [[0, 29]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "查看效果"
                }
              ],
              "id": "cJIdRQ8Bk8"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在项目根目录下运行 "
                },
                {
                  "code": true,
                  "text": "npm start"
                },
                {
                  "text": "，进入开发服务器查看效果："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/16f9341421d9c19f.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，一开始我们的购物车是空的，然后随便选了两款手机，点击“加入购物车”，然后就可以在购物车页面看到了！我们还可以将购物车中的商品移除。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "OtuN-K3wyx"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一部分中我们学习了如何发起修改本地状态的“通知”："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先我们需要在 "
                    },
                    {
                      "code": true,
                      "text": "Vuex.Store"
                    },
                    {
                      "text": " 实例化的参数中添加一个 "
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": " 属性，在该属性中添加对应的方法，比如 "
                    },
                    {
                      "code": true,
                      "text": "ADD_TO_CART"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "REMOVE_FROM_CART"
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "然后我们需要通过用户不同的操作（比如点击添加购物车或者移除购物车）来发起“通知”，进而通过 "
                    },
                    {
                      "code": true,
                      "text": "this.$store.commit"
                    },
                    {
                      "text": " 的方式将需要操作的对象作为载荷提交到对应类型（也就是 "
                    },
                    {
                      "code": true,
                      "text": "ADD_TO_CART"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "REMOVE_FROM_CART"
                    },
                    {
                      "text": "）的 "
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": " 中，在 "
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": " 中进行本地状态修改。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "5ff8afe",
      "id": "_34hrbReIo",
      "articleId": "ae8a389b0b6f1fb121a6881d2ec2544f",
      "children": [
        {
          "type": "heading-two",
          "commit": "5ff8afe",
          "id": "zNZOrJkIe_",
          "fixed": true,
          "children": [
            {
              "text": "使用 Action 获取远程数据"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在上一节中学习了如何在视图层发起本地状态修改的“通知”，这一节我们来学习如何从后端获取远程数据。请求库我们采用的是 "
                },
                {
                  "link": true,
                  "url": "https://www.npmjs.com/package/axios",
                  "text": "axios"
                },
                {
                  "text": "，通过以下命令安装依赖："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm install axios"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "理解 Action：异步操作"
                }
              ],
              "id": "D_jEDbgj16"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Vuex 为我们提供了 "
                },
                {
                  "code": true,
                  "text": "Action"
                },
                {
                  "text": "，它是用来进行异步操作，我们可以在这里向后端发起网络数据请求，并将请求到的数据提交到对应的 "
                },
                {
                  "code": true,
                  "text": "mutation"
                },
                {
                  "text": " 中。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Action 是定义在 Vuex Store 的 "
                },
                {
                  "code": true,
                  "text": "action"
                },
                {
                  "text": " 属性中的一系列方法，用于响应从 Vue 视图层分发出来的事件或动作，一个 Action 是形如 "
                },
                {
                  "code": true,
                  "text": "(context, payload) => response.data"
                },
                {
                  "text": " 的函数："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "productById(context, payload) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 进行异步操作，从后端获取远程数据并返回"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return response.data;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "函数名 "
                    },
                    {
                      "code": true,
                      "text": "productById"
                    },
                    {
                      "text": " 用于对应从视图层里面分发出的事件或动作的名称"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "函数接收两个参数 "
                    },
                    {
                      "code": true,
                      "text": "context"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "payload"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "context"
                    },
                    {
                      "text": " 指的是 "
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": " 的上下文，与 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 实例具有相同的方法和属性，因此我们可以调用 "
                    },
                    {
                      "code": true,
                      "text": "context.commit"
                    },
                    {
                      "text": " 提交一个 "
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "，或者通过"
                    },
                    {
                      "code": true,
                      "text": "context.state"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "context.getters"
                    },
                    {
                      "text": " 来获取 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "，但是 "
                    },
                    {
                      "code": true,
                      "text": "context"
                    },
                    {
                      "text": " 对象又不是 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 实例本身"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "payload"
                    },
                    {
                      "text": " 是分发时携带的参数，然后我们通过 "
                    },
                    {
                      "code": true,
                      "text": "payload"
                    },
                    {
                      "text": " 中的参数来进行异步操作，从而获取后端响应数据并返回。这样我们就可以根据用户的操作同步更新后端数据，并将后端响应的数据提交给 "
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "，然后利用"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": " 进行本地数据更新。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package-lock.json",
          "id": "e3kCRQINsC",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package-lock.json",
              "commit": "5ff8afe",
              "hiddenLines": [
                [0, 470],
                [509, 6961],
                [6971, 12805]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": false,
          "id": "mT8fXrjWVW",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "5ff8afe",
              "hiddenLines": [
                [0, 9],
                [17, 73]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/store/index.js",
          "display": true,
          "id": "YvTJjvCGnS",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现第一个 Action"
                    }
                  ],
                  "id": "Ik9nwKQeUm"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们趁热打铁，实现第一个 Action。再次来到 "
                    },
                    {
                      "code": true,
                      "text": "src/store/index.js"
                    },
                    {
                      "text": " 文件，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/index.js",
              "commit": "5ff8afe",
              "hiddenLines": [
                [8, 14],
                [64, 68]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们做了以下几件事："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "导入了 "
                        },
                        {
                          "code": true,
                          "text": "axios"
                        },
                        {
                          "text": "，并定义了 "
                        },
                        {
                          "code": true,
                          "text": "API_BASE"
                        },
                        {
                          "text": " 后端接口根路由；"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们在 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 中去掉了之前硬编码的假数据，使 "
                        },
                        {
                          "code": true,
                          "text": "products"
                        },
                        {
                          "text": " 默认值为空数组；"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 2
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后在 "
                        },
                        {
                          "code": true,
                          "text": "mutations"
                        },
                        {
                          "text": " 属性中添加了 "
                        },
                        {
                          "code": true,
                          "text": "ALL_PRODUCTS"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "ALL_PRODUCTS_SUCCESS"
                        },
                        {
                          "text": " 方法，用来响应 "
                        },
                        {
                          "code": true,
                          "text": "action"
                        },
                        {
                          "text": " 中提交的对应类型事件；"
                        },
                        {
                          "code": true,
                          "text": "ALL_PRODUCTS"
                        },
                        {
                          "text": " 将 "
                        },
                        {
                          "code": true,
                          "text": "state.showLoader"
                        },
                        {
                          "text": " 设为 "
                        },
                        {
                          "code": true,
                          "text": "true"
                        },
                        {
                          "text": "，显示加载状态；"
                        },
                        {
                          "code": true,
                          "text": "ALL_PRODUCTS_SUCCESS"
                        },
                        {
                          "text": " 将 "
                        },
                        {
                          "code": true,
                          "text": "action"
                        },
                        {
                          "text": " 中提交的数据保存到 "
                        },
                        {
                          "code": true,
                          "text": "state"
                        },
                        {
                          "text": " 中，并取消加载状态；"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 3
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后添加了 "
                        },
                        {
                          "code": true,
                          "text": "actions"
                        },
                        {
                          "text": " 属性，在 "
                        },
                        {
                          "code": true,
                          "text": "actions"
                        },
                        {
                          "text": " 属性中定义了 "
                        },
                        {
                          "code": true,
                          "text": "allProducts"
                        },
                        {
                          "text": " 函数用于响应视图层分发的对应类型的事件；我们首先提交了类型为 "
                        },
                        {
                          "code": true,
                          "text": "ALL_PRODUCTS"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "mutation"
                        },
                        {
                          "text": " ，接着在 "
                        },
                        {
                          "code": true,
                          "text": "axios"
                        },
                        {
                          "text": " 请求成功后提交 "
                        },
                        {
                          "code": true,
                          "text": "ALL_PRODUCTS_SUCCESS"
                        },
                        {
                          "text": "，并附带 "
                        },
                        {
                          "code": true,
                          "text": "products"
                        },
                        {
                          "text": " 数据体（"
                        },
                        {
                          "code": true,
                          "text": "payload"
                        },
                        {
                          "text": "）"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 4
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "我们可以看到 "
                        },
                        {
                          "code": true,
                          "text": "allProducts"
                        },
                        {
                          "text": " 方法中传入了 "
                        },
                        {
                          "code": true,
                          "text": "{ commit }"
                        },
                        {
                          "text": " 参数，这是采用了解构赋值的方式 "
                        },
                        {
                          "code": true,
                          "text": "const {   commit } = context"
                        },
                        {
                          "text": "，避免后面使用 "
                        },
                        {
                          "code": true,
                          "text": "context.commit"
                        },
                        {
                          "text": " 过于繁琐。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/products/ProductList.vue",
          "display": true,
          "id": "VMbP6kHgOf",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "更新 ProductList 组件"
                    }
                  ],
                  "id": "QvvgtstAR1"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再来看 "
                    },
                    {
                      "code": true,
                      "text": "src/components/products/ProductList.vue"
                    },
                    {
                      "text": " 文件，我们对其做了修改，主要添加了生命周期函数 "
                    },
                    {
                      "code": true,
                      "text": "created"
                    },
                    {
                      "text": "，在该组件刚被创建时首先判断本地 "
                    },
                    {
                      "code": true,
                      "text": "products"
                    },
                    {
                      "text": " 中是否有商品，如果没有就向后端发起网络请求获取数据。代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductList.vue",
              "commit": "5ff8afe",
              "hiddenLines": [
                [0, 7],
                [16, 31],
                [43, 54]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到我们修改了两个地方："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "调整模板中“生产厂商”字段，把 "
                        },
                        {
                          "code": true,
                          "text": "{{product.manufacturer}}"
                        },
                        {
                          "text": " 修改为 "
                        },
                        {
                          "code": true,
                          "text": "{{product.manufacturer.name}}"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "添加 "
                        },
                        {
                          "code": true,
                          "text": "created"
                        },
                        {
                          "text": " 生命周期方法，在该组件刚被创建时判断 "
                        },
                        {
                          "code": true,
                          "text": "this.products.length === 0"
                        },
                        {
                          "text": " 是 "
                        },
                        {
                          "code": true,
                          "text": "true"
                        },
                        {
                          "text": " 还是 "
                        },
                        {
                          "code": true,
                          "text": "false"
                        },
                        {
                          "text": "，如果是 "
                        },
                        {
                          "code": true,
                          "text": "true"
                        },
                        {
                          "text": " 则证明本地中还没有任何商品，需要向后端获取商品数据，于是通过 "
                        },
                        {
                          "code": true,
                          "text": "this.$store.dispatch"
                        },
                        {
                          "text": " 的方式触发类型为 "
                        },
                        {
                          "code": true,
                          "text": "allProducts"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "action"
                        },
                        {
                          "text": " 中，在 "
                        },
                        {
                          "code": true,
                          "text": "action"
                        },
                        {
                          "text": " 中进行异步操作，发起网络请求向后端请求商品数据并返回；如果是 "
                        },
                        {
                          "code": true,
                          "text": "false"
                        },
                        {
                          "text": " 则证明本地中存在商品，所以可以直接从本地获取然后进行渲染。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/Cart.vue",
          "display": true,
          "id": "M8Q69_4YRh",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们也同样需要调整一下 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/Cart.vue"
                    },
                    {
                      "text": " 中的“生产厂商”字段，修改其模板代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Cart.vue",
              "commit": "5ff8afe",
              "hiddenLines": [
                [0, 6],
                [15, 51]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同样把 "
                    },
                    {
                      "code": true,
                      "text": "{{product.manufacturer}}"
                    },
                    {
                      "text": " 修改为 "
                    },
                    {
                      "code": true,
                      "text": "{{product.manufacturer.name}}"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "查看效果"
                }
              ],
              "id": "Veh4KadrWO"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在测试这一步效果之前，首先确保 MongoDB 和后端 API 服务器已经开启。同时，如果你之前没有在"
                },
                {
                  "link": true,
                  "url": "https.tuture.co/2019/10/21/cb08dc8/",
                  "text": "第二篇教程"
                },
                {
                  "text": "中测试过，很有可能你的数据库是空的，那么可以下载我们提供的 MongoDB JSON 数据文件 "
                },
                {
                  "link": true,
                  "url": "https://raw.githubusercontent.com/tuture-dev/vue-online-shop-backend/master/data/manufacturers.json",
                  "text": "manufacturers.json"
                },
                {
                  "text": " 和 "
                },
                {
                  "link": true,
                  "url": "https://raw.githubusercontent.com/tuture-dev/vue-online-shop-backend/master/data/products.json",
                  "text": "products.json"
                },
                {
                  "text": "，然后运行以下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "mongoimport -d test -c manufacturers manufacturers.json"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "mongoimport -d test -c products products.json"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后再进入前端测试，你应该就可以看到从后台获取到的数据，然后同样可以添加到购物车哦！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "OC1cSEwn5A"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一部分中我们学习了如何使用 "
                },
                {
                  "code": true,
                  "text": "Action"
                },
                {
                  "text": " 获取远程数据，并将获取的数据提交到对应的 "
                },
                {
                  "code": true,
                  "text": "Mutation"
                },
                {
                  "text": " 中："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先我们需要导入相关依赖："
                    },
                    {
                      "code": true,
                      "text": "axios"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "API_BASE"
                    },
                    {
                      "text": "，由于发起网络请求。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "其次我们需要在 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 实例中添加 "
                    },
                    {
                      "code": true,
                      "text": "actions"
                    },
                    {
                      "text": " 属性，并在 "
                    },
                    {
                      "code": true,
                      "text": "actions"
                    },
                    {
                      "text": " 属性定义对应的方法，用于响应视图层分发的对应类型的事件。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在不同的方法中发起不同的网络请求，你是需要从后端获取数据，还是修改后端数据等等。然后将后端响应的数据结果提交到对应类型的 "
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": " 中。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "9ed8f6a",
      "id": "XYl1Z_4ZuZ",
      "articleId": "6f96d15",
      "children": [
        {
          "type": "heading-two",
          "commit": "9ed8f6a",
          "id": "zUhk0XRvEM",
          "fixed": true,
          "children": [
            {
              "text": "使用 Vue 组件简化页面逻辑"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在前面的教程中，我们已经学习了如何使用 Vuex 进行状态管理，如何使用 Action 获取远程数据以及如何使用 Mutation 修改本地状态，实现了用户修改客户端数据的同时，同步更新后端数据，然后更新本地数据，最后进行重新渲染。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们将进一步通过 Vue 组件化的思想简化复杂的页面逻辑。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/products/ProductButton.vue",
          "display": true,
          "id": "vr2kcTvlmP",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现 ProductButton 组件"
                    }
                  ],
                  "id": "J7HIaRyJtm"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/products/ProductButton.vue"
                    },
                    {
                      "text": " 文件，它是用于操作商品在购物车中状态的按钮组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductButton.vue",
              "commit": "9ed8f6a",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "该组件通过 "
                    },
                    {
                      "code": true,
                      "text": "v-if"
                    },
                    {
                      "text": " 判断 "
                    },
                    {
                      "code": true,
                      "text": "isAdding"
                    },
                    {
                      "text": " 是否为 "
                    },
                    {
                      "code": true,
                      "text": "true"
                    },
                    {
                      "text": " 来决定创建加入购物车按钮还是从购物车移除按钮。"
                    },
                    {
                      "code": true,
                      "text": "cart"
                    },
                    {
                      "text": " 数组是通过 "
                    },
                    {
                      "code": true,
                      "text": "this.$store.state.cart"
                    },
                    {
                      "text": " 从本地获取的。在 "
                    },
                    {
                      "code": true,
                      "text": "isAdding"
                    },
                    {
                      "text": " 中我们先令其为 "
                    },
                    {
                      "code": true,
                      "text": "true"
                    },
                    {
                      "text": "，然后通过 "
                    },
                    {
                      "code": true,
                      "text": "cart"
                    },
                    {
                      "text": " 数组的 "
                    },
                    {
                      "code": true,
                      "text": "map"
                    },
                    {
                      "text": " 方法遍历数组，判断当前商品是否在购物车中，如果不在则 "
                    },
                    {
                      "code": true,
                      "text": "isAdding"
                    },
                    {
                      "text": " 为 "
                    },
                    {
                      "code": true,
                      "text": "true"
                    },
                    {
                      "text": "，创建加入购物车按钮；如果在则 "
                    },
                    {
                      "code": true,
                      "text": "isAdding"
                    },
                    {
                      "text": " 为 "
                    },
                    {
                      "code": true,
                      "text": "false"
                    },
                    {
                      "text": "，创建从购物车移除按钮。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "对应的两个按钮添加了两个点击事件："
                    },
                    {
                      "code": true,
                      "text": "addToCart"
                    },
                    {
                      "text": " 和"
                    },
                    {
                      "code": true,
                      "text": "removeFromCart"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "当点击加入购物车按钮时触发 "
                        },
                        {
                          "code": true,
                          "text": "addToCart"
                        },
                        {
                          "text": "，我们通过 "
                        },
                        {
                          "code": true,
                          "text": "this.$store.commit"
                        },
                        {
                          "text": " 的方式将包含当前商品的对象作为载荷直接提交到类型为 "
                        },
                        {
                          "code": true,
                          "text": "ADD_TO_CART"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "mutation"
                        },
                        {
                          "text": " 中，将该商品添加到本地购物车中。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "当点击从购物车移除按钮时触发"
                        },
                        {
                          "code": true,
                          "text": "removeFromCart"
                        },
                        {
                          "text": "，我们也是通过"
                        },
                        {
                          "code": true,
                          "text": "this.$store.commit"
                        },
                        {
                          "text": "的方式将包含当前商品id的对象作为载荷直接提交到类型为"
                        },
                        {
                          "code": true,
                          "text": "REMOVE_FROM_CART"
                        },
                        {
                          "text": "的"
                        },
                        {
                          "code": true,
                          "text": "mutation"
                        },
                        {
                          "text": "中，将该商品从本地购物车中移除。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/products/ProductItem.vue",
          "display": true,
          "id": "CqYxJriCQh",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现 ProductItem 组件"
                    }
                  ],
                  "id": "rdWoTbIP3j"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "src/components/products/ProductItem.vue"
                    },
                    {
                      "text": "文件为商品信息组件，用来展示商品详细信息，并且注册了上面讲的按钮组件，改变商品在购物车中的状态，除此之外我们还使用了之前创建好的"
                    },
                    {
                      "code": true,
                      "text": "ProductButton"
                    },
                    {
                      "text": "组件，实现对商品在购物车中的状态进行修改。"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先通过"
                        },
                        {
                          "code": true,
                          "text": "import ProductButton from './ProductButton'"
                        },
                        {
                          "text": "导入创建好的"
                        },
                        {
                          "code": true,
                          "text": "ProductButton"
                        },
                        {
                          "text": "组件。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后在"
                        },
                        {
                          "code": true,
                          "text": "components"
                        },
                        {
                          "text": "中注册组件。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后在模板中使用该组件。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductItem.vue",
              "commit": "9ed8f6a",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们将父组件传入的"
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": "对象展示到模板中，并将该"
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": "对象传到子组件"
                    },
                    {
                      "code": true,
                      "text": "ProductButton"
                    },
                    {
                      "text": "中。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/products/ProductList.vue",
          "display": true,
          "id": "2AyISPdFV4",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 ProductList 组件"
                    }
                  ],
                  "id": "T2V7lyapxj"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "有了 ProductButton 和 ProductItem，我们便可以来重构之前略显臃肿的 ProductList 组件了，修改 "
                    },
                    {
                      "code": true,
                      "text": "src/components/products/ProductList.vue"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductList.vue",
              "commit": "9ed8f6a",
              "hiddenLines": [
                [0, 3],
                [19, 29],
                [37, 43]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这部分代码是将之前展示商品信息的逻辑代码封装到了子组件"
                    },
                    {
                      "code": true,
                      "text": "ProductItem"
                    },
                    {
                      "text": "中，然后导入并注册子组件"
                    },
                    {
                      "code": true,
                      "text": "ProductItem"
                    },
                    {
                      "text": "，再将子组件挂载到模板中。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们通过"
                    },
                    {
                      "code": true,
                      "text": "this.$store.state.products"
                    },
                    {
                      "text": "从本地获取"
                    },
                    {
                      "code": true,
                      "text": "products"
                    },
                    {
                      "text": "数组，并返回给计算属性"
                    },
                    {
                      "code": true,
                      "text": "products"
                    },
                    {
                      "text": "。然后在模板中利用"
                    },
                    {
                      "code": true,
                      "text": "v-for"
                    },
                    {
                      "text": "遍历"
                    },
                    {
                      "code": true,
                      "text": "products"
                    },
                    {
                      "text": "数组，并将每个"
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": "对象传给每个子组件"
                    },
                    {
                      "code": true,
                      "text": "ProductItem"
                    },
                    {
                      "text": "，在每个子组件中展示对应的商品信息。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/Cart.vue",
          "display": true,
          "id": "asXN_wVGlO",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 Cart 组件"
                    }
                  ],
                  "id": "IALE6cHXNK"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后，我们重构一波购物车组件 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/Cart.vue"
                    },
                    {
                      "text": "，也使用了子组件"
                    },
                    {
                      "code": true,
                      "text": "ProductItem"
                    },
                    {
                      "text": "简化了页面逻辑，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Cart.vue",
              "commit": "9ed8f6a",
              "hiddenLines": [
                [0, 2],
                [18, 27],
                [35, 40]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里也是首先导入并注册子组件"
                    },
                    {
                      "code": true,
                      "text": "ProductItem"
                    },
                    {
                      "text": "，然后在模板中挂载子组件。通过"
                    },
                    {
                      "code": true,
                      "text": "this.$store.state.cart"
                    },
                    {
                      "text": "的方式从本地获取购物车数组，并返回给计算属性"
                    },
                    {
                      "code": true,
                      "text": "cart"
                    },
                    {
                      "text": "。在模板中通过"
                    },
                    {
                      "code": true,
                      "text": "v-for"
                    },
                    {
                      "text": "遍历购物车数组，并将购物车中每个商品对象传给对应的子组件"
                    },
                    {
                      "code": true,
                      "text": "ProductItem"
                    },
                    {
                      "text": "，通过子组件来展示对应的商品信息。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "把项目开起来，查看商品列表，可以看到每个商品下面都增加了“添加到购物车”按钮："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170fc2865b17a8fa.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "购物车中，也有了“移出购物车”按钮："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170fc2865bf857e9.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "尽情地买买买吧！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "7Q3hFdoCXp"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们学习了如何使用 Vue 组件来简化页面逻辑："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先我们需要通过"
                    },
                    {
                      "code": true,
                      "text": "import"
                    },
                    {
                      "text": "的方式导入子组件。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "然后在"
                    },
                    {
                      "code": true,
                      "text": "components"
                    },
                    {
                      "text": "中注册子组件。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最后将子组件挂载到模板中，并将需要子组件展示的数据传给子组件。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "ff121fa",
      "id": "fC9BXVLFOw",
      "articleId": "6f96d15",
      "children": [
        {
          "type": "heading-two",
          "commit": "ff121fa",
          "id": "xIFmIOn6g4",
          "fixed": true,
          "children": [
            {
              "text": "使用 Vuex Getters 复用本地数据获取逻辑"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一节中，我们将实现这个电商应用的商品详情页面。商品详情和之前商品列表在数据获取上的逻辑是非常一致的，能不能不写重复的代码呢？答案是肯定的。之前我们使用 Vuex 进行状态管理是通过 "
                },
                {
                  "code": true,
                  "text": "this.$store.state"
                },
                {
                  "text": " 的方式获取本地数据，而在这一节我们使用 "
                },
                {
                  "code": true,
                  "text": "Vuex Getters"
                },
                {
                  "text": "来复用本地数据的获取逻辑。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "Vuex"
                },
                {
                  "text": "允许我们在 "
                },
                {
                  "code": true,
                  "text": "store"
                },
                {
                  "text": " 中定义“getter”（可以认为是 "
                },
                {
                  "code": true,
                  "text": "store"
                },
                {
                  "text": "的计算属性）。就像计算属性一样，"
                },
                {
                  "code": true,
                  "text": "getter"
                },
                {
                  "text": " 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "Getter"
                },
                {
                  "text": "也是定义在 Vuex Store 的 "
                },
                {
                  "code": true,
                  "text": "getter"
                },
                {
                  "text": " 属性中的一系列方法，用于获取本地状态中的数据。我们可以通过两种方式访问 "
                },
                {
                  "code": true,
                  "text": "getter"
                },
                {
                  "text": "，一个是通过属性访问，另一个是通过方法访问："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "属性访问"
                    },
                    {
                      "text": "的方式为"
                    },
                    {
                      "code": true,
                      "text": "this.$store.getter.allProducts"
                    },
                    {
                      "text": "，对应的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "如下："
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "allProducts(state) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    // 返回本地中的数据"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return state.products;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "方法访问"
                    },
                    {
                      "text": "的方式为"
                    },
                    {
                      "code": true,
                      "text": "this.$store.getter.productById(id)"
                    },
                    {
                      "text": "，对应的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "如下："
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "productById: (state, getters) => id => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      //通过传入的id参数进行一系列操作并返回本地数据"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return state.product;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以看到"
                },
                {
                  "code": true,
                  "text": "Getter"
                },
                {
                  "text": "可以接受两个参数："
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": "和"
                },
                {
                  "code": true,
                  "text": "getters"
                },
                {
                  "text": "，"
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": "就表示本地数据源；我们可以通过第二个参数"
                },
                {
                  "code": true,
                  "text": "getters"
                },
                {
                  "text": "获取到不同的"
                },
                {
                  "code": true,
                  "text": "getter"
                },
                {
                  "text": "属性。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/store/index.js",
          "display": true,
          "id": "AFYeLHWWXO",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "定义 Vuex Getters"
                    }
                  ],
                  "id": "VR_J0_aDUt"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "光说不练假把式，我们来手撸几个 getters。打开 "
                    },
                    {
                      "code": true,
                      "text": "src/store/index.js"
                    },
                    {
                      "text": " 文件，我们添加了一些需要用到的 "
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": " 属性、"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": " 属性以及这一节的主角—— "
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "。代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/index.js",
              "commit": "ff121fa",
              "hiddenLines": [
                [0, 35],
                [63, 63]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里主要添加了三部分内容："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在"
                        },
                        {
                          "code": true,
                          "text": "actions"
                        },
                        {
                          "text": "中添加了"
                        },
                        {
                          "code": true,
                          "text": "productById"
                        },
                        {
                          "text": "属性，当视图层通过指定id分发到类型为"
                        },
                        {
                          "code": true,
                          "text": "PRODUCT_BY_ID"
                        },
                        {
                          "text": "的"
                        },
                        {
                          "code": true,
                          "text": "action"
                        },
                        {
                          "text": "中，这里会进行异步操作从后端获取指定商品，并将该商品提交到对应类型的"
                        },
                        {
                          "code": true,
                          "text": "mutation"
                        },
                        {
                          "text": "中，就来到了下一步。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在"
                        },
                        {
                          "code": true,
                          "text": "mutations"
                        },
                        {
                          "text": "中添加了"
                        },
                        {
                          "code": true,
                          "text": "PRODUCT_BY_ID"
                        },
                        {
                          "text": "和"
                        },
                        {
                          "code": true,
                          "text": "PRODUCT_BY_ID_SUCCESS"
                        },
                        {
                          "text": "属性，响应指定类型提交的事件，将提交过来的商品保存到本地。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "添加了"
                        },
                        {
                          "code": true,
                          "text": "getters"
                        },
                        {
                          "text": "并在"
                        },
                        {
                          "code": true,
                          "text": "getters"
                        },
                        {
                          "text": "中添加了"
                        },
                        {
                          "code": true,
                          "text": "allProducts"
                        },
                        {
                          "text": "属性和"
                        },
                        {
                          "code": true,
                          "text": "productById"
                        },
                        {
                          "text": "方法，用于获取本地数据。在"
                        },
                        {
                          "code": true,
                          "text": "allProducts"
                        },
                        {
                          "text": "中获取本地中所有的商品；在"
                        },
                        {
                          "code": true,
                          "text": "productById"
                        },
                        {
                          "text": "通过传入的id查找本地商品中是否存在该商品，如果存在则返回该商品，如果不存在则返回空对象。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/admin/Products.vue",
          "display": true,
          "id": "MgPZrpl4_A",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在后台 Products 组件中使用 Getters"
                    }
                  ],
                  "id": "uWXeQj6yuN"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们先通过一个简单的例子演示如果使用 Vuex Getters。打开后台商品组件，"
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/Products.vue"
                    },
                    {
                      "text": "，我们通过属性访问的方式调用对应的 "
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": " 属性，从而获取本地商品，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Products.vue",
              "commit": "ff121fa",
              "hiddenLines": [
                [0, 11],
                [20, 20]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们通过"
                    },
                    {
                      "code": true,
                      "text": "this.$store.getters.allProducts"
                    },
                    {
                      "text": "属性访问的方式调用对应"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "中的"
                    },
                    {
                      "code": true,
                      "text": "allProducts"
                    },
                    {
                      "text": "属性，并返回本地商品数组中的第一个商品。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/products/ProductDetail.vue",
          "display": true,
          "id": "JJXh8Igd0V",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 ProductDetail 组件"
                    }
                  ],
                  "id": "zFiBfTFpBT"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着开始实现商品详情组件 "
                    },
                    {
                      "code": true,
                      "text": "src/components/products/ProductDetail.vue"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductDetail.vue",
              "commit": "ff121fa",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "该组件将父组件传入的"
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": "对象展示在了模板中，并复用了"
                    },
                    {
                      "code": true,
                      "text": "ProductButton"
                    },
                    {
                      "text": "组件。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/products/ProductItem.vue",
          "display": true,
          "id": "Y8IQfB2Myq",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在 ProductItem 组件中添加链接"
                    }
                  ],
                  "id": "Smi2zCWBBv"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "有了商品详情，我们还需要进入详情的链接。再次进入 "
                    },
                    {
                      "code": true,
                      "text": "src/components/products/ProductItem.vue"
                    },
                    {
                      "text": " 文件中，我们对其进行了修改，将模板中的商品信息用 Vue 原生组件 "
                    },
                    {
                      "code": true,
                      "text": "router-link"
                    },
                    {
                      "text": " 包裹起来，实现商品信息可点击查看详情。代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductItem.vue",
              "commit": "ff121fa",
              "hiddenLines": [[34, 40]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "该组件经过修改之后实现了点击商品的任何一条信息，都会触发路由跳转到商品详情页，并将该商品id通过动态路由的方式传递到详情页。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/products/ProductList.vue",
          "display": true,
          "id": "ar9scmhWbz",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在 ProductList 中使用 Getters"
                    }
                  ],
                  "id": "U7vR9L9_9m"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "修改商品列表组件 "
                    },
                    {
                      "code": true,
                      "text": "src/components/products/ProductList.vue"
                    },
                    {
                      "text": " 文件，使用了 Vuex Getters 复用了本地数据获取逻辑，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductList.vue",
              "commit": "ff121fa",
              "hiddenLines": [
                [0, 9],
                [27, 32],
                [41, 44]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在计算属性"
                    },
                    {
                      "code": true,
                      "text": "products"
                    },
                    {
                      "text": "中使用"
                    },
                    {
                      "code": true,
                      "text": "this.$store.getters.allProducts"
                    },
                    {
                      "text": "属性访问的方式调用"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "中的"
                    },
                    {
                      "code": true,
                      "text": "allProducts"
                    },
                    {
                      "text": "属性，我们也知道在对应的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "中获取到了本地中的"
                    },
                    {
                      "code": true,
                      "text": "products"
                    },
                    {
                      "text": "数组。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/Cart.vue",
          "display": false,
          "id": "I_SrzSPvSU",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Cart.vue",
              "commit": "ff121fa",
              "hiddenLines": [
                [0, 7],
                [25, 40]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/Detail.vue",
          "display": true,
          "id": "PHmyDwsNw1",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 Detail 页面组件"
                    }
                  ],
                  "id": "9hXY7ifoaH"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "实现了 ProductDetail 子组件之后，我们便可以搭建商品详情我页面组件 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/Detail.vue"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Detail.vue",
              "commit": "ff121fa",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "该组件中定义了一个计算属性"
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": "，用于返回本地状态中指定的商品。这里我们使用了"
                    },
                    {
                      "code": true,
                      "text": "this.$store.getters.productById(id)"
                    },
                    {
                      "text": "方法访问的方式获取本地中指定的商品，这里的id参数通过"
                    },
                    {
                      "code": true,
                      "text": "this.$route.params['id']"
                    },
                    {
                      "text": "从当前处于激活状态的路由对象中获取，并传入对应的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "中，进而从本地中获取指定商品。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在该组件刚被创建时判断当前本地中是否有该商品，如果没有则通过"
                    },
                    {
                      "code": true,
                      "text": "this.$store.dispatch"
                    },
                    {
                      "text": "的方式将包含当前商品id的对象作为载荷分发到类型为"
                    },
                    {
                      "code": true,
                      "text": "productById"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中，在"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中进行异步操作从后端获取指定商品，然后提交到对应的"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中进行本地状态修改，这已经使我们习惯的思路了。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/router/index.js",
          "display": true,
          "id": "q47PSKTV_u",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "配置 Detail 页面的路由"
                    }
                  ],
                  "id": "DlMMsi30TG"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们打开路由配置 "
                    },
                    {
                      "code": true,
                      "text": "src/router/index.js"
                    },
                    {
                      "text": " 文件，导入了 "
                    },
                    {
                      "code": true,
                      "text": "Detail"
                    },
                    {
                      "text": " 组件，并添加了对应的路由参数，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/router/index.js",
              "commit": "ff121fa",
              "hiddenLines": [
                [0, 1],
                [9, 45]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "又到了验收的环节，运行项目，点击单个商品，可以进入到商品详情页面，并且数据是完全一致的："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170fc2865dc88d16.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "noqxSBbF87"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节中我们学会了如何使用"
                },
                {
                  "code": true,
                  "text": "Vuex Getters"
                },
                {
                  "text": "来复用本地数据的获取逻辑："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我们需要先在"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例中添加"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "属性，并在"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "属性中定义不同的属性或者方法。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在这些不同类型的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "中，我们可以获取本地数据。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我们可以通过属性访问和方法访问的方式来调用我们的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "f0b5684",
      "id": "rjVtYoqdOf",
      "articleId": "-OixkkqI",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f0b5684",
          "id": "14i9W4NaYq",
          "fixed": true,
          "children": [
            {
              "text": "抽出 Getters 和 Mutations 逻辑"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们来学习如何抽出在"
                },
                {
                  "code": true,
                  "text": "store"
                },
                {
                  "text": "实例中定义的复杂"
                },
                {
                  "code": true,
                  "text": "getters"
                },
                {
                  "text": "和"
                },
                {
                  "code": true,
                  "text": "mutation"
                },
                {
                  "text": "逻辑。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们发现之前我们直接把所有的"
                },
                {
                  "code": true,
                  "text": "getter"
                },
                {
                  "text": "属性和方法都定义在了"
                },
                {
                  "code": true,
                  "text": "store"
                },
                {
                  "text": "实例中的"
                },
                {
                  "code": true,
                  "text": "getters"
                },
                {
                  "text": "属性中，所有的"
                },
                {
                  "code": true,
                  "text": "mutation"
                },
                {
                  "text": "属性也都定义在了"
                },
                {
                  "code": true,
                  "text": "store"
                },
                {
                  "text": "实例中的"
                },
                {
                  "code": true,
                  "text": "mutations"
                },
                {
                  "text": "属性中，这样显得"
                },
                {
                  "code": true,
                  "text": "store"
                },
                {
                  "text": "实例特别的累赘，因此我们可以通过对象展开运算符将这些复杂的逻辑抽取到对应的 "
                },
                {
                  "code": true,
                  "text": "Getters"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "Mutations"
                },
                {
                  "text": "文件中。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Index.vue",
          "display": true,
          "commit": "f0b5684",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 Admin 入口文件"
                    }
                  ],
                  "id": "OULMoua6"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们做一点本土化，把之前的 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/Index.vue"
                    },
                    {
                      "text": " 中的英文导航改成中文版，方便查看；并且我们增加了查看生产商导航。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Index.vue",
              "commit": "f0b5684",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们将有关商品的导航栏修改为中文版，让用户能够秒懂；除此之外我们又添加了有关制造商的导航，这里增加的是"
                    },
                    {
                      "text": "查看生产商",
                      "bold": true
                    },
                    {
                      "text": "导航，并添加了对应的导航跳转路径，该路径需要与对应路由参数一致。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Manufacturers.vue",
          "display": true,
          "commit": "f0b5684",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 Manufacturers 组件"
                    }
                  ],
                  "id": "1eWBbsE_"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们创建的"
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/Manufacturers.vue"
                    },
                    {
                      "text": "文件是本地制造商组件，用于展示制造商的信息。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Manufacturers.vue",
              "commit": "f0b5684",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里首先定义了一个计算属性"
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": "，通过"
                    },
                    {
                      "code": true,
                      "text": "this.$store.getters.allManufacturers"
                    },
                    {
                      "text": "属性访问的形式调用对应的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "属性"
                    },
                    {
                      "code": true,
                      "text": "allManufacturers"
                    },
                    {
                      "text": "从本地获取"
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": "，并返回给计算属性"
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后在该组件刚被创建时判断本地中是否存在"
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": "，如果没有则通过"
                    },
                    {
                      "code": true,
                      "text": "this.$store.dispatch"
                    },
                    {
                      "text": "分发到类型为"
                    },
                    {
                      "code": true,
                      "text": "allManufacturers"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中进行异步操作获取所有制造商，并将获取的制造商提交到对应的"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中，在"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中修改本地状态，将获取的所有制造商保存到本地。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后利用"
                    },
                    {
                      "code": true,
                      "text": "v-for"
                    },
                    {
                      "text": "在表格中遍历"
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": "，每个制造商的信息在一行展示，除了信息之外还有两个功能（修改和删除制造商），点击修改则会根据"
                    },
                    {
                      "code": true,
                      "text": "'/admin/manufacturers/edit/' + manufacturer._id"
                    },
                    {
                      "text": "路由到指定页面；点击删除则会触发"
                    },
                    {
                      "code": true,
                      "text": "removeManufacturer"
                    },
                    {
                      "text": "事件，首先询问用户是否同意删除，若用户同意则将选中制造商的id作为载荷分发到类型为"
                    },
                    {
                      "code": true,
                      "text": "removeManufacturer"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中，在"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中进行异步操作删除后端对应商品，并将对应商品id提交到对应的"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中，在"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中进行本地状态修改，删除本地对应的商品。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Products.vue",
          "display": true,
          "commit": "f0b5684",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 Products 组件"
                    }
                  ],
                  "id": "WVwFFai0"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "根据"
                    },
                    {
                      "code": true,
                      "text": "Manufacturers"
                    },
                    {
                      "text": "组件的设计原则，我们需要再次进入"
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/Products.vue"
                    },
                    {
                      "text": "文件。按照"
                    },
                    {
                      "code": true,
                      "text": "Manufacturers"
                    },
                    {
                      "text": "组件的UI展示以及数据处理，将"
                    },
                    {
                      "code": true,
                      "text": "Products"
                    },
                    {
                      "text": "组件进行一下重构。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Products.vue",
              "commit": "f0b5684",
              "hiddenLines": [[73, 73]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这部分代码逻辑与"
                    },
                    {
                      "text": "src/pages/admin/Manufacturers.vue",
                      "code": true
                    },
                    {
                      "text": "文件中的代码逻辑相似，如果您理解了上面的代码逻辑，那么我们相信您对这里的代码也能融会贯通，所以这里就不再赘述了。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/router/index.js",
          "display": true,
          "commit": "f0b5684",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "添加路由信息"
                    }
                  ],
                  "id": "1-DrSpVT"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们已经创建了有关制造商的导航以及查看制造商组件，还需对其配置相应的路由参数才能实现跳转。因此再次进入"
                    },
                    {
                      "code": true,
                      "text": "src/router/index.js"
                    },
                    {
                      "text": "文件，这里我们导入了制造商组件并增加了制造商相关路由参数。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/router/index.js",
              "commit": "f0b5684",
              "hiddenLines": [
                [0, 8],
                [16, 39],
                [51, 61]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "把项目跑起来，点击"
                    },
                    {
                      "text": "Admin",
                      "code": true
                    },
                    {
                      "text": "然后再点击"
                    },
                    {
                      "text": "查看生产商",
                      "bold": true
                    },
                    {
                      "text": "，我们可以看到从后端获取的所有生产商：  下面展示的就是从后端获取的制造商，并且我们可以对其进行修改和删除操作。"
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://imgkr2.cn-bj.ufileos.com/11f291f4-daa2-4d7b-80a3-305fd8840cef.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=bUlzaK1%252BPpuYQhfzNYPVKpxfx9k%253D&Expires=1597417587",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/getters.js",
          "display": true,
          "commit": "f0b5684",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "抽取 Getters 逻辑"
                    }
                  ],
                  "id": "fwRO6Hqe"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们首先创建了"
                    },
                    {
                      "code": true,
                      "text": "src/store/getters.js"
                    },
                    {
                      "text": "文件，用于存放各种不同类型的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "属性和方法。这里我们导出了两个对象分别为"
                    },
                    {
                      "code": true,
                      "text": "productGetters"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "manufacturerGetters"
                    },
                    {
                      "text": "，前者包含了有关商品的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "属性与方法，后者包含了有关制造商的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "属性与方法。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/getters.js",
              "commit": "f0b5684",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "code": true,
                      "text": "productGetters"
                    },
                    {
                      "text": "对象中定义的就是有关商品的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "属性和方法，如"
                    },
                    {
                      "code": true,
                      "text": "allProducts"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "productById"
                    },
                    {
                      "text": "等等；在"
                    },
                    {
                      "code": true,
                      "text": "manufacturerGetters"
                    },
                    {
                      "text": "对象中定义的就是有关制造商的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "属性和方法，如"
                    },
                    {
                      "code": true,
                      "text": "allManufacturers"
                    },
                    {
                      "text": "等等。"
                    }
                  ]
                },
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "我们可以采用属性调用和方法调用的方式调用这里的getter(根据我们在getter对象中定义的是属性还是方法)"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/mutations.js",
          "display": true,
          "commit": "f0b5684",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "抽取 Mutations 逻辑"
                    }
                  ],
                  "id": "_1hghHmw"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同样的我们创建了"
                    },
                    {
                      "code": true,
                      "text": "src/store/mutations.js"
                    },
                    {
                      "text": "文件，用于存放从"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例的"
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": "属性中抽取出来的各种"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "属性，这里我们定义了三个对象分别为"
                    },
                    {
                      "code": true,
                      "text": "productMutations"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "cartMutations"
                    },
                    {
                      "text": "以及"
                    },
                    {
                      "code": true,
                      "text": "manufacturerMutations "
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/mutations.js",
              "commit": "f0b5684",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "code": true,
                      "text": "productMutations"
                    },
                    {
                      "text": "对象中定义了有关商品响应Vue视图层以及"
                    },
                    {
                      "code": true,
                      "text": "avtion"
                    },
                    {
                      "text": "中提交的事件，比如"
                    },
                    {
                      "code": true,
                      "text": "ALL_PRODUCTS"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "ALL_PRODUCTS_SUCCESS"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "PRODUCT_BY_ID"
                    },
                    {
                      "text": "以及"
                    },
                    {
                      "code": true,
                      "text": "PRODUCT_BY_ID_SUCCESS"
                    },
                    {
                      "text": "等等。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "code": true,
                      "text": "cartMutations"
                    },
                    {
                      "text": "对象中定义了有关购物车响应Vue视图层提交的事件，比如"
                    },
                    {
                      "code": true,
                      "text": "ADD_TO_CART"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "REMOVE_FROM_CART"
                    },
                    {
                      "text": "等等。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "code": true,
                      "text": "manufacturerMutations "
                    },
                    {
                      "text": "对象中定义了有关制造商响应Vue视图层以及"
                    },
                    {
                      "code": true,
                      "text": "avtion"
                    },
                    {
                      "text": "中提交的事件，比如"
                    },
                    {
                      "code": true,
                      "text": "ALL_MANUFACTURERS"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "ALL_MANUFACTURERS_SUCCESS"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "REMOVE_MANUFACTURER"
                    },
                    {
                      "text": "以及"
                    },
                    {
                      "code": true,
                      "text": "REMOVE_MANUFACTURER_SUCCESS"
                    },
                    {
                      "text": "等等。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/index.js",
          "display": true,
          "commit": "f0b5684",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 Store 实例"
                    }
                  ],
                  "id": "I8ATfzBu"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们将"
                    },
                    {
                      "text": "store",
                      "code": true
                    },
                    {
                      "text": "实例中的"
                    },
                    {
                      "text": "Getter",
                      "code": true
                    },
                    {
                      "text": "属性和"
                    },
                    {
                      "text": "Mutation",
                      "code": true
                    },
                    {
                      "text": "属性抽出之后要再进行导入。再回到"
                    },
                    {
                      "code": true,
                      "text": "src/store/index.js"
                    },
                    {
                      "text": "文件，这里就是抽离"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": "逻辑之后的"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例，看起来是不是轻盈了很多，也增强了代码的可读性。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/index.js",
              "commit": "f0b5684",
              "hiddenLines": [
                [0, 0],
                [10, 22],
                [72, 85]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里首先导入了"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": "文件中导出的所有对象，然后在"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例的"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": "属性中通过对象展开运算符的方式将对应的属性和方法导入到"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例中。"
                    }
                  ]
                },
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "对象展开运算符",
                          "bold": true
                        },
                        {
                          "text": "是ES7草案中的新特性，将一个对象当中的对象的一部分取出来成为一个新对象赋值给展开运算符的参数，然后插入到另外一个对象当中。例如："
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let shortcuts = {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    attr1: 3,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    attr2: 4"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let shortcuts2 = {}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "shortcuts2 = {...shortcuts}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "//上面的这种用法实际上相当于是："
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "shortcuts2 = {attr1: 3, attr2: 4}"
                        }
                      ]
                    }
                  ],
                  "lang": "javascript"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除此之外我们又在"
                    },
                    {
                      "code": true,
                      "text": "actions"
                    },
                    {
                      "text": "中添加了一些其他的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "属性，因为此时"
                    },
                    {
                      "code": true,
                      "text": "actions"
                    },
                    {
                      "text": "还未被抽离，所以可能依然显得有些臃肿，不过在后面我们马上也会将它抽离出来。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "FbgfyNuCNb"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们学习了如何抽出"
                },
                {
                  "code": true,
                  "text": "Getters"
                },
                {
                  "text": "和"
                },
                {
                  "code": true,
                  "text": "Mutations"
                },
                {
                  "text": "逻辑，减轻"
                },
                {
                  "code": true,
                  "text": "store"
                },
                {
                  "text": "实例中的负载："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先我们需要分别创建"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": "JS文件，在两个JS文件中分别定义不同类型的"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": "对象并导出，然后在"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": "对象中定义相应的一些属性和方法。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "index"
                    },
                    {
                      "text": "文件中导入这些"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": "对象，并在"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例的"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "mutations"
                    },
                    {
                      "text": "属性中通过对象展开运算符混入这些对象。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我们可以使用"
                    },
                    {
                      "code": true,
                      "text": "this.$store.getters.属性"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "this.$store.mutations.属性"
                    },
                    {
                      "text": "的方式调用."
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "4909803",
      "id": "6VFChaln0k",
      "articleId": "-OixkkqI",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "4909803",
          "id": "PeP1PIZcLK",
          "fixed": true,
          "children": [
            {
              "text": "抽出 Actions 逻辑"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上一节我们学习了如何抽出"
                },
                {
                  "code": true,
                  "text": "Getters"
                },
                {
                  "text": "和"
                },
                {
                  "code": true,
                  "text": "Mutations"
                },
                {
                  "text": "逻辑，这一节我们以同样的方式抽出"
                },
                {
                  "code": true,
                  "text": "Actions"
                },
                {
                  "text": "逻辑。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductForm.vue",
          "display": false,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductForm.vue",
              "commit": "4909803",
              "hiddenLines": [
                [0, 25],
                [34, 78]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Edit.vue",
          "display": true,
          "commit": "4909803",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 Edit 组件"
                    }
                  ],
                  "id": "Sxtlj-ie"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "src/pages/admin/Edit.vue"
                    },
                    {
                      "text": "是商品编辑组件，当触发"
                    },
                    {
                      "code": true,
                      "text": "'/admin/edit/' + product._id"
                    },
                    {
                      "text": "就会路由到指定商品信息编辑页面，然后对商品信息进行修改。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "之前我们直接将展示商品信息的代码放在该组件中，但是我们发现展示商品信息这部分功能在新建商品和编辑商品组件中都需要使用，因此我们打算把这部分代码封装为一个展示商品信息的表单组件"
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": "，这样的话我们在新建商品和编辑商品组件中都能复用该组件。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除此之外我们还在该组件中添加了数据处理功能。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Edit.vue",
              "commit": "4909803",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们先来看该组件的"
                    },
                    {
                      "code": true,
                      "text": "script"
                    },
                    {
                      "text": "部分，首先定义了两个计算属性"
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": "返回本地商品和制造商。通过方法访问的方式调用指定的"
                    },
                    {
                      "code": true,
                      "text": "getter"
                    },
                    {
                      "text": "属性"
                    },
                    {
                      "code": true,
                      "text": "productById"
                    },
                    {
                      "text": "，参数为当前处于激活状态的路由对象的id，这里返回"
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": "的拷贝，是为了在修改 "
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": "的拷贝之后，在保存之前不修改本地 Vuex store 的"
                    },
                    {
                      "code": true,
                      "text": "product"
                    },
                    {
                      "text": "属性。计算属性"
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": "通过相同的方式获取本地数据。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当该组件刚被创建时判断计算属性"
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": "中是否有值，如果没有则表示本地中没有该商品，将包含该商品id的对象作为载荷分发到类型为"
                    },
                    {
                      "code": true,
                      "text": "productById"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中，在"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中进行异步操作从后端获取对应商品，并提交到对应类型的"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中，在"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中将获取到的商品保存到本地。除此之外判断计算属性"
                    },
                    {
                      "code": true,
                      "text": "manufacturers"
                    },
                    {
                      "text": "中是否有值，如果没有则通过相同的方式从后端获取并保存到本地。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "code": true,
                      "text": "template"
                    },
                    {
                      "text": "中使用了子组件"
                    },
                    {
                      "code": true,
                      "text": "ProductForm"
                    },
                    {
                      "text": "用表单的形式来展示商品信息，当用户提交表单则会向父组件发射"
                    },
                    {
                      "code": true,
                      "text": "save-product"
                    },
                    {
                      "text": "事件，父组件监听到之后触发"
                    },
                    {
                      "code": true,
                      "text": "updateProduct"
                    },
                    {
                      "text": "事件，并将传入的商品参数作为载荷分发到类型为"
                    },
                    {
                      "code": true,
                      "text": "updateProduct"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中，通知后端进行同步更新数据并提交到对应的"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中进行本地数据更新。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/New.vue",
          "display": true,
          "commit": "4909803",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 New 组件"
                    }
                  ],
                  "id": "C4kJ9cLF"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "src/pages/admin/New.vue"
                    },
                    {
                      "text": "是添加商品组件，与"
                    },
                    {
                      "code": true,
                      "text": "Edit"
                    },
                    {
                      "text": "组件的代码逻辑相似，只是一个是修改商品信息，一个是添加商品信息。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们将该组件中原先写死的数据改成了从后端动态获取， 并将获取的数据传递给子组件"
                    },
                    {
                      "code": true,
                      "text": "ProductForm。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/New.vue",
              "commit": "4909803",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "该组件代码逻辑和"
                    },
                    {
                      "code": true,
                      "text": "Edit.vue"
                    },
                    {
                      "text": "组件相似，只是在这里我们定义的计算属性"
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": "返回一个空对象作为默认值，因为我们是添加商品，本地中还不存在该商品。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/actions.js",
          "display": true,
          "commit": "4909803",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "抽取 Actions 逻辑"
                    }
                  ],
                  "id": "0M-s4Jgc"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "像之前一样我们创建了"
                    },
                    {
                      "code": true,
                      "text": "src/store/actions.js"
                    },
                    {
                      "text": "文件，用于存储从"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例的"
                    },
                    {
                      "code": true,
                      "text": "actions"
                    },
                    {
                      "text": "属性中抽取出来的不同类型的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "属性。这里我们定义了两个"
                    },
                    {
                      "code": true,
                      "text": "Actions"
                    },
                    {
                      "text": "对象："
                    },
                    {
                      "code": true,
                      "text": "productActions"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "manufacturerActions"
                    },
                    {
                      "text": "，分别表示有关商品和制造商对视图层分发的事件作出的响应，并导出了这两个对象。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/actions.js",
              "commit": "4909803",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在该文件中我们首先导入"
                    },
                    {
                      "code": true,
                      "text": "axios"
                    },
                    {
                      "text": "依赖，以及定义了 "
                    },
                    {
                      "text": "API_BASE",
                      "code": true
                    },
                    {
                      "text": " 后端接口根路由；"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后我们定义并导出了两个对象："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在"
                        },
                        {
                          "code": true,
                          "text": "productActions"
                        },
                        {
                          "text": "对象中定义了一些有关商品在视图层分发对应的事件时，"
                        },
                        {
                          "code": true,
                          "text": "action"
                        },
                        {
                          "text": "作出的响应，比如"
                        },
                        {
                          "code": true,
                          "text": "allProducts"
                        },
                        {
                          "text": "，"
                        },
                        {
                          "code": true,
                          "text": "productById"
                        },
                        {
                          "text": "，"
                        },
                        {
                          "code": true,
                          "text": "removeProduct"
                        },
                        {
                          "text": "以及"
                        },
                        {
                          "code": true,
                          "text": "updateProduct"
                        },
                        {
                          "text": "等等。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在"
                        },
                        {
                          "code": true,
                          "text": "manufacturerActions"
                        },
                        {
                          "text": "对象中定义了一些有关制造商在视图层分发对应的事件时，"
                        },
                        {
                          "code": true,
                          "text": "action"
                        },
                        {
                          "text": "作出的响应，比如"
                        },
                        {
                          "code": true,
                          "text": "allManufacturers"
                        },
                        {
                          "text": "，"
                        },
                        {
                          "code": true,
                          "text": "removeManufacturer"
                        },
                        {
                          "text": "等等。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/index.js",
          "display": true,
          "commit": "4909803",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 Store 实例"
                    }
                  ],
                  "id": "H7jotO77"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们再次来到"
                    },
                    {
                      "code": true,
                      "text": "src/store/index.js"
                    },
                    {
                      "text": "文件中，添加有关抽取"
                    },
                    {
                      "code": true,
                      "text": "Actions"
                    },
                    {
                      "text": "逻辑之后的信息。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/index.js",
              "commit": "4909803",
              "hiddenLines": [[12, 34]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们首先导入了"
                    },
                    {
                      "code": true,
                      "text": "actions.js"
                    },
                    {
                      "text": "文件中导出的一些Action对象，并通过对象展开运算符在"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例的"
                    },
                    {
                      "code": true,
                      "text": "actions"
                    },
                    {
                      "text": "属性中混入了不同类型的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "属性，实现了Actions逻辑的抽取。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/mutations.js",
          "display": true,
          "commit": "4909803",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "添加 mutations 属性"
                    }
                  ],
                  "id": "SQFyGlz8"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在"
                    },
                    {
                      "code": true,
                      "text": "src/store/mutations.js"
                    },
                    {
                      "text": "文件中又添加了一些"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "属性，用于用户进行不同的操作进行本地数据的同步。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/mutations.js",
              "commit": "4909803",
              "hiddenLines": [
                [0, 23],
                [55, 85]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上述添加的都是有关商品的"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "属性："
                    },
                    {
                      "code": true,
                      "text": "UPDATE_PRODUCT"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "UPDATE_PRODUCT_SUCCESS"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "ADD_PRODUCT"
                    },
                    {
                      "text": "以及"
                    },
                    {
                      "code": true,
                      "text": "ADD_PRODUCT_SUCCESS"
                    },
                    {
                      "text": "分别表示更新商品信息，更新商品信息成功，添加商品以及添加商品成功。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "2MDLC4Ydx_"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们学习了如何抽出"
                },
                {
                  "code": true,
                  "text": "Actions"
                },
                {
                  "text": "逻辑，减轻"
                },
                {
                  "code": true,
                  "text": "store"
                },
                {
                  "text": "实例中的负载："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先我们需要创建"
                    },
                    {
                      "code": true,
                      "text": "actions"
                    },
                    {
                      "text": "JS文件，在文件中定义不同类型的"
                    },
                    {
                      "code": true,
                      "text": "Actions"
                    },
                    {
                      "text": "对象并导出，然后在"
                    },
                    {
                      "code": true,
                      "text": "Actions"
                    },
                    {
                      "text": "对象中定义相应的一些属性。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "index"
                    },
                    {
                      "text": "文件中导入这些"
                    },
                    {
                      "code": true,
                      "text": "Actions"
                    },
                    {
                      "text": "对象，并在"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例的"
                    },
                    {
                      "code": true,
                      "text": "actions"
                    },
                    {
                      "text": "属性中通过对象展开运算符混入这些对象。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我们可以使用"
                    },
                    {
                      "code": true,
                      "text": "this.$store.actions.属性"
                    },
                    {
                      "text": "的方式调用。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "49571dc",
      "id": "OWXMSkbDDp",
      "articleId": "-OixkkqI",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "49571dc",
          "id": "QTiZz-XEwe",
          "fixed": true,
          "children": [
            {
              "text": "干掉 mutation-types 硬编码"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们主要是进一步完善我们的项目功能以及去掉一些硬编码。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/ManufacturerForm.vue",
          "display": true,
          "commit": "49571dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 ManufacturerForm 组件"
                    }
                  ],
                  "id": "RVeQAV13"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "和商品信息展示功能一样，我们也需要将制造商信息展示部分封装到一个单独的组件"
                    },
                    {
                      "code": true,
                      "text": "ManufacturerForm"
                    },
                    {
                      "text": "中，以便我们在新建制造商和编辑制造商组件中都能复用该组件。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因此我们创建了"
                    },
                    {
                      "code": true,
                      "text": "src/components/ManufacturerForm.vue"
                    },
                    {
                      "text": "文件，用于展示制造商信息的表单组件。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/ManufacturerForm.vue",
              "commit": "49571dc",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "该组件通过父子组件传值从父组件获取到了"
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": "和"
                    },
                    {
                      "code": true,
                      "text": "isEditing"
                    },
                    {
                      "text": "的值，并将"
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": "对象的信息展示在表单中。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "表单信息中还通过"
                    },
                    {
                      "code": true,
                      "text": "v-if"
                    },
                    {
                      "text": "来判断"
                    },
                    {
                      "code": true,
                      "text": "isEditing"
                    },
                    {
                      "text": "的值是"
                    },
                    {
                      "code": true,
                      "text": "true"
                    },
                    {
                      "text": "还是"
                    },
                    {
                      "code": true,
                      "text": "false"
                    },
                    {
                      "text": "，如果是"
                    },
                    {
                      "code": true,
                      "text": "true"
                    },
                    {
                      "text": "则创建"
                    },
                    {
                      "code": true,
                      "text": "Update Manufacturer"
                    },
                    {
                      "text": "，反之创建"
                    },
                    {
                      "code": true,
                      "text": "Add Manufacturer"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当用户提交表单时触发"
                    },
                    {
                      "code": true,
                      "text": "saveManufacturer"
                    },
                    {
                      "text": "事件，此时会向父组件发送类型为"
                    },
                    {
                      "code": true,
                      "text": "save-manufacturer"
                    },
                    {
                      "text": "的事件通知其保存此次的修改操作。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/getters.js",
          "display": true,
          "commit": "49571dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 getters 文件"
                    }
                  ],
                  "id": "uT19h7lj"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在创建编辑制造商组件之前，我们需要在getters文件中添加对应的getter属性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在"
                    },
                    {
                      "code": true,
                      "text": "src/store/getters.js"
                    },
                    {
                      "text": "文件的"
                    },
                    {
                      "code": true,
                      "text": "manufacturerGetters "
                    },
                    {
                      "text": "对象中又添加了一个"
                    },
                    {
                      "code": true,
                      "text": "manufacturerById"
                    },
                    {
                      "text": "方法，用于获取本地中指定的制造商。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/getters.js",
              "commit": "49571dc",
              "hiddenLines": [[0, 12]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "manufacturerById"
                    },
                    {
                      "text": "方法中的id参数是Vue视图层通过方法调用时传入的id，通过这个id判断本地中是否存在该制造商，如果存在则返回该制造商，如果不存在则返回一个空对象。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/EditManufacturers.vue",
          "display": true,
          "commit": "49571dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 EditManufacturers 组件"
                    }
                  ],
                  "id": "10zoVB9d"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在创建了展示制造商信息的表单组件"
                    },
                    {
                      "code": true,
                      "text": "ManufacturerForm"
                    },
                    {
                      "text": "以及添加了用于获取本地指定制造商数据的getter属性之后，紧接着我们又创建了"
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/EditManufacturers.vue"
                    },
                    {
                      "text": "文件，用于修改制造商信息。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/EditManufacturers.vue",
              "commit": "49571dc",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "该组件刚被创建时将当前处于激活状态的路由对象的id参数作为载荷分发到类型为"
                    },
                    {
                      "code": true,
                      "text": "manufacturerById"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中，在"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中进行异步操作从服务器获取对应制造商，然后将该制造商提交到对应"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中进行本地状态修改，将获取到的制造商保存到本地。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们定义了计算属性"
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": "返回"
                    },
                    {
                      "code": true,
                      "text": "manufacturer"
                    },
                    {
                      "text": "的拷贝，是为了在修改"
                    },
                    {
                      "code": true,
                      "text": "manufacturer"
                    },
                    {
                      "text": "的拷贝之后，在保存之前不修改本地 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "中的"
                    },
                    {
                      "code": true,
                      "text": "manufacturer"
                    },
                    {
                      "text": "属性。这里以方法访问的形式从"
                    },
                    {
                      "code": true,
                      "text": "getters"
                    },
                    {
                      "text": "中通过当前激活的路由对象中的id参数获取本地状态中的对应制造商作为"
                    },
                    {
                      "code": true,
                      "text": "manufacturer"
                    },
                    {
                      "text": "的拷贝，并返回给计算属性"
                    },
                    {
                      "code": true,
                      "text": "model"
                    },
                    {
                      "text": "，然后传给子组件"
                    },
                    {
                      "code": true,
                      "text": "ManufacturerForm"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "该组件在"
                    },
                    {
                      "code": true,
                      "text": "addManufacturer"
                    },
                    {
                      "text": "事件中将子组件传入的新制造商对象作为载荷分发到类型为"
                    },
                    {
                      "code": true,
                      "text": "updateManufacturer"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中，在"
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": "中进行异步操作修改后端对应的商品信息，然后将新对象提交到对应的"
                    },
                    {
                      "code": true,
                      "text": "mutation"
                    },
                    {
                      "text": "中进行本地状态修改，修改本地状态中的"
                    },
                    {
                      "code": true,
                      "text": "manufacturer"
                    },
                    {
                      "text": "对象。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/NewManufacturers.vue",
          "display": true,
          "commit": "49571dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 NewManufacturers 组件"
                    }
                  ],
                  "id": "sdQ3xWC4"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同样的我们继续创建了"
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/NewManufacturers.vue"
                    },
                    {
                      "text": "文件，用于添加制造商信息。该组件和添加商品信息组件代码逻辑类似。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/NewManufacturers.vue",
              "commit": "49571dc",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "该组件逻辑代码与"
                    },
                    {
                      "code": true,
                      "text": "New.vue"
                    },
                    {
                      "text": "组件类似，一个是添加商品组件，一个是添加制造商组件，您可以对比着来看。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Index.vue",
          "display": true,
          "commit": "49571dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 Admin 入口文件"
                    }
                  ],
                  "id": "7-RnKUeU"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "之前我们在该入口文件中增加了"
                    },
                    {
                      "text": "查看生产商",
                      "bold": true
                    },
                    {
                      "text": "导航，这里我们又增加了"
                    },
                    {
                      "text": "添加生产商",
                      "bold": true
                    },
                    {
                      "text": "导航。"
                    }
                  ],
                  "id": "6YWv1juk"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Index.vue",
              "commit": "49571dc",
              "hiddenLines": [
                [0, 11],
                [21, 24]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Manufacturers.vue",
          "display": false,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "src/pages/admin/Manufacturers.vue"
                    },
                    {
                      "text": "是展示本地所有制造商的组件。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Manufacturers.vue",
              "commit": "49571dc",
              "hiddenLines": [
                [0, 34],
                [45, 62]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里直接在该组件被创建时分发到类型为"
                    },
                    {
                      "code": true,
                      "text": "allManufacturers"
                    },
                    {
                      "text": "的"
                    },
                    {
                      "code": true,
                      "text": "actions"
                    },
                    {
                      "text": "中，然后从后端获取所有制造商，最后保存到本地。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Products.vue",
          "display": false,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们再次来到"
                    },
                    {
                      "code": true,
                      "text": "src/pages/admin/Products.vue"
                    },
                    {
                      "text": "文件，对其做了一下修改。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Products.vue",
              "commit": "49571dc",
              "hiddenLines": [
                [0, 38],
                [49, 66]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在该组件刚被创建时我们不再进行判，直接向后端发起请求获取商品数据，并保存到本地。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/router/index.js",
          "display": true,
          "commit": "49571dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "添加路由信息"
                    }
                  ],
                  "id": "WPUN08vO"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们已经创建了添加和修改制造商组件以及添加了对应的入口导航，接着我们需要在该文件中对其进行路由参数配置。"
                    }
                  ],
                  "id": "0tApiZmV"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再次进入"
                    },
                    {
                      "code": true,
                      "text": "src/router/index.js"
                    },
                    {
                      "text": "文件，我们导入了添加制造商和修改制造商的组件并配置了相关路由参数。"
                    }
                  ],
                  "id": "0tApiZmV"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/router/index.js",
              "commit": "49571dc",
              "hiddenLines": [
                [0, 9],
                [18, 46],
                [63, 73]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里添加制造商的路由配置就是静态路由的配置方式；修改制造商的路由配置采用了动态传参的方式，这里使用的是"
                    },
                    {
                      "text": "$route.params",
                      "code": true
                    },
                    {
                      "text": "对象的"
                    },
                    {
                      "text": "Post",
                      "code": true
                    },
                    {
                      "text": "方式传参。\t"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "配置好添加制造商和修改制造商的路由参数之后，我们又可以进行验收啦，运行项目，点击Admin然后再点击添加制造商，我们可以看到添加制造商的表单：  "
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://imgkr2.cn-bj.ufileos.com/75d2e9a0-99e1-48b7-bd69-7e3b02c2e1d5.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=X%252FJFSTrFlTYnf7d5tuQdt%252F%252FVlhA%253D&Expires=1597417641",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "\n 然后再点击查看制造商，我们又可以看到一系列的制造商，并且每个制造商都对应的有修改和删除操作，这里我们随便选择一个制造商进行修改，就会看到该制造商的表单信息：  "
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://imgkr2.cn-bj.ufileos.com/1ba7ff1c-472b-4aa2-987b-b9272906e773.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=xC1ZxIRtgoxTIFhTsb4EwxLf1P8%253D&Expires=1597417672",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/mutation-types.js",
          "display": true,
          "commit": "49571dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 mutation-types 文件"
                    }
                  ],
                  "id": "7Xt6ETPL"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这一节我们将对我们的项目代码进行优化，干掉一些硬编码。"
                    }
                  ],
                  "id": "RXgGBJIr"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们都知道在"
                    },
                    {
                      "text": "actions",
                      "code": true
                    },
                    {
                      "text": "文件和"
                    },
                    {
                      "text": "mutations",
                      "code": true
                    },
                    {
                      "text": "文件中有一部分的事件类型是需要保持一致的，比如在我们在视图层分发一个添加商品事件"
                    },
                    {
                      "text": "ADD_PRODUCT",
                      "code": true
                    },
                    {
                      "text": "，在"
                    },
                    {
                      "text": "actions",
                      "code": true
                    },
                    {
                      "text": "文件中就需要有对应事件类型的"
                    },
                    {
                      "text": "action",
                      "code": true
                    },
                    {
                      "text": "接收，然后向后端发起请求并将请求结果提交到对应类型的"
                    },
                    {
                      "text": "mutation",
                      "code": true
                    },
                    {
                      "text": "中，这就要求了这几个文件中的对应事件类型都要保持一致。可是我们在开发过程中难免会出错，比如漏掉一个字母就会导致两个文件中的对应事件无法接收，尴尬的是控制台也没有报错，这就造成了我们很难查错。"
                    }
                  ],
                  "id": "RXgGBJIr"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因此，我们采用了字符串常量的形式定义"
                    },
                    {
                      "text": "actions",
                      "code": true
                    },
                    {
                      "text": "文件和"
                    },
                    {
                      "text": "mutations",
                      "code": true
                    },
                    {
                      "text": "文件中的事件类型，只要我们写错一个单词都会导致字符串常量不一致，关键的是这个时候会报错，利于我们查错。"
                    }
                  ],
                  "id": "RXgGBJIr"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "进而我们创建了"
                    },
                    {
                      "code": true,
                      "text": "src/store/mutation-types.js"
                    },
                    {
                      "text": "文件，用于定义一些字符串常量来表示各种事件类型，并导出这些字符串常量。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/mutation-types.js",
              "commit": "49571dc",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/actions.js",
          "display": true,
          "commit": "49571dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 actions 文件"
                    }
                  ],
                  "id": "ZPYv7Tlh"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们再次来到"
                    },
                    {
                      "code": true,
                      "text": "src/store/actions.js"
                    },
                    {
                      "text": "文件中，将所有的事件类型用字符串常量表示。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/actions.js",
              "commit": "49571dc",
              "hiddenLines": [[87, 88]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们首先导入了"
                    },
                    {
                      "code": true,
                      "text": "mutation-types"
                    },
                    {
                      "text": "文件中定义的一些字符串常量，替换掉了对应的事件类型。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/index.js",
          "display": false,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在"
                    },
                    {
                      "code": true,
                      "text": "src/store/index.js"
                    },
                    {
                      "text": "文件中又进行了完善。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/index.js",
              "commit": "49571dc",
              "hiddenLines": [
                [0, 18],
                [25, 38]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在"
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": "实例的"
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": "中又添加了一个"
                    },
                    {
                      "code": true,
                      "text": "manufacturer"
                    },
                    {
                      "text": "属性，并给了它一个默认值为空对象。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/mutations.js",
          "display": true,
          "commit": "49571dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 mutations 文件"
                    }
                  ],
                  "id": "Lpvi43o5"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同actions文件一样，我们再次进入"
                    },
                    {
                      "code": true,
                      "text": "src/store/mutations.js"
                    },
                    {
                      "text": "文件，将文件中的各种事件类型用字符串常量替代。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/mutations.js",
              "commit": "49571dc",
              "hiddenLines": [
                [69, 74],
                [87, 88]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们首先导入了"
                    },
                    {
                      "code": true,
                      "text": "mutation-types"
                    },
                    {
                      "text": "文件中定义的一些字符串常量，替换掉了对应的事件类型。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "kUFKQsfgbK"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们主要做了以下工作："
                }
              ],
              "id": "Gu9AEdki"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "创建了制造商相关组件并配置了相应路由参数，实现了新建和修改制造商信息；"
                    }
                  ],
                  "id": "Gu9AEdki",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "利用字符串常量代替actions文件和mutations文件中的事件类型；"
                    }
                  ],
                  "id": "Gu9AEdki",
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "19b49e9",
      "id": "S84tYDWaLt",
      "articleId": "-OixkkqI",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "19b49e9",
          "id": "bc8V1Ac9Vp",
          "fixed": true,
          "children": [
            {
              "text": "大量改进最后一步内容"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "build/webpack.base.conf.js",
          "display": false,
          "id": "_B9V1VS27U",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "build/webpack.base.conf.js",
              "commit": "19b49e9",
              "hiddenLines": [[113, 116]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/Home.vue",
          "display": false,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Home.vue",
              "commit": "19b49e9",
              "hiddenLines": [[0, 6]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "https://imgkr.cn-bj.ufileos.com/32719f10-4d3f-4fbe-b9e6-df123d10e1f7.jpg",
          "display": false,
          "id": "Ys_vrd8Wes",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "https://imgkr.cn-bj.ufileos.com/32719f10-4d3f-4fbe-b9e6-df123d10e1f7.jpg",
              "commit": "19b49e9",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "tuture.yml",
          "id": "Mu23OUdi8m",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "tuture.yml",
              "commit": "19b49e9",
              "hiddenLines": [
                [0, 1],
                [10, 107],
                [117, 174],
                [202, 335],
                [346, 346],
                [356, 595],
                [1288, 1478],
                [1487, 1488]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
      "id": "5CJeMaUMK3",
      "articleId": "tc1c9oDB",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "id": "2akI8uQMIk",
          "fixed": true,
          "children": [
            {
              "text": "代码重构"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一部分我们主要利用"
                },
                {
                  "text": "element-ui",
                  "code": true
                },
                {
                  "text": "组件库重构之前的项目代码，实现极具美感的迷你电商应用。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里我们简单介绍一下"
                },
                {
                  "text": "element-ui",
                  "code": true
                },
                {
                  "text": "组件库(如果您了解，您可以跳过这部分)："
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Element UI 是一套采用 Vue 2.0 作为基础框架实现的组件库，一套为开发者、设计师和产品经理准备的基于 Vue 2.0的组件库，提供了配套设计资源，帮助网站快速成型。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Element UI文档提供了很多实例代码，一般情况下我们直接拷下示例代码稍微看看改改数据之类的就OK了。但是在某些场景下，我们可能又需要使用到一些特殊的功能和属性，而这些功能属性一般在官方提供的组件中都已经内置了，所以我们可以直接先从文档中寻找查看是否有属性或者方法等能够满足我们的需求，从而避免重复造轮子。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "安装element-ui依赖"
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "npm 安装推荐使用 npm 的方式安装，它能更好地和 webpack 打包工具配合使用。"
                    }
                  ],
                  "level": 0,
                  "number": 1
                }
              ]
            },
            {
              "type": "code-block",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm i element-ui -S"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "CDN引入目前可以通过 "
                    },
                    {
                      "text": "unpkg.com/element-ui",
                      "link": true,
                      "url": "https://unpkg.com/browse/element-ui@2.13.0/"
                    },
                    {
                      "text": " 获取到最新版本的资源，在页面上引入 js 和 css 文件即可开始使用。"
                    }
                  ],
                  "level": 0,
                  "number": 1
                }
              ]
            },
            {
              "type": "code-block",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<!-- 引入样式 -->"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<link rel=\"stylesheet\" href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<!-- 引入组件库 -->"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<script src=\"https://unpkg.com/element-ui/lib/index.js\"></script>"
                    }
                  ]
                }
              ],
              "lang": "html"
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们建议使用 CDN 引入 Element 的用户在链接地址上锁定版本，以免将来 Element升级时受到非兼容性更新的影响。锁定版本的方法请查看 "
                    },
                    {
                      "text": "unpkg.com",
                      "link": true,
                      "url": "https://unpkg.com/"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package-lock.json",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package-lock.json",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [0, 58],
                [94, 479],
                [494, 811],
                [821, 854],
                [870, 1350],
                [1358, 2328],
                [2338, 3410],
                [3422, 3708],
                [3728, 7227],
                [7239, 10370],
                [10380, 10524],
                [10536, 11531],
                [11543, 12885]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": false,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [0, 10],
                [18, 22],
                [30, 75]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/main.js",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "导入依赖"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "依赖安装完成之后，我们需要在项目的"
                    },
                    {
                      "text": "main.js",
                      "code": true
                    },
                    {
                      "text": "文件中导入并注册依赖。"
                    }
                  ]
                },
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "你可以引入整个 Element，或是根据需要仅引入部分组件，这里我们引入了完整的 Element。"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/main.js",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [0, 4],
                [15, 22]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "text": "main.js",
                      "code": true
                    },
                    {
                      "text": "文件中我们首先导入了"
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": "组件库，需要注意的是我们要单独引入样式文件；除此之外还要使用"
                    },
                    {
                      "text": "Vue.use()",
                      "code": true
                    },
                    {
                      "text": "注册组件库。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "至此，一个基于 Vue 和 Element 的开发环境已经搭建完毕，现在就可以愉快地使用组件库进行代码重构了。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构导航栏"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们首先来到"
                    },
                    {
                      "text": "App",
                      "code": true
                    },
                    {
                      "text": "组件，这里之前是采用普通的"
                    },
                    {
                      "text": "nav",
                      "code": true
                    },
                    {
                      "text": "标签展示首页导航，显得甚是简陋，现在我们可以使用"
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": "组件库提供的"
                    },
                    {
                      "text": "el-menu",
                      "code": true
                    },
                    {
                      "text": "导航菜单组件重构导航栏，绝对酷炫。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [[39, 39]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里导航栏组件的使用相信大家都能看懂，这里我们只讲一下比较特殊的地方。我们不需要在意 "
                    },
                    {
                      "text": "data",
                      "code": true
                    },
                    {
                      "text": " 属性以及 "
                    },
                    {
                      "text": "handleSelect ",
                      "code": true
                    },
                    {
                      "text": "方法，我们暂时用不到。这里一个特殊的地方就是 "
                    },
                    {
                      "text": "el-menu-item ",
                      "code": true
                    },
                    {
                      "text": "标签中的 "
                    },
                    {
                      "text": "tag",
                      "code": true
                    },
                    {
                      "text": " 属性，我们将其值设置为 \"div\" 表示将该标签渲染为 \"div\" 盒子，如果不设置该属性则该标签默认渲染为 \"a\" 标签，导致标签包裹的内容带有下划线，因此这里 "
                    },
                    {
                      "text": "tag",
                      "code": true
                    },
                    {
                      "text": " 属性的设置是为了去除下划线。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductList.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构商品列表"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "重新修改 "
                    },
                    {
                      "text": "ProductList",
                      "code": true
                    },
                    {
                      "text": " 组件，由于该组件中的子组件 "
                    },
                    {
                      "text": "ProductItem",
                      "code": true
                    },
                    {
                      "text": " 进行了重构，因此这里也需要做一定的修改，看到后面 "
                    },
                    {
                      "text": "ProductItem",
                      "code": true
                    },
                    {
                      "text": " 组件的重构您就会明白我们这里修改的用意。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductList.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [[15, 35]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里之前是将从本地获取的 "
                    },
                    {
                      "text": "products",
                      "code": true
                    },
                    {
                      "text": " 数组利用 "
                    },
                    {
                      "text": "v-for",
                      "code": true
                    },
                    {
                      "text": " 将 "
                    },
                    {
                      "text": "product",
                      "code": true
                    },
                    {
                      "text": " 对象遍历到每个 "
                    },
                    {
                      "text": "ProductItem",
                      "code": true
                    },
                    {
                      "text": " 组件中分别进行展示，但是我们这里取消了 "
                    },
                    {
                      "text": "v-for",
                      "code": true
                    },
                    {
                      "text": " 遍历 "
                    },
                    {
                      "text": "products",
                      "code": true
                    },
                    {
                      "text": " 数组，选择直接将 "
                    },
                    {
                      "text": "products",
                      "code": true
                    },
                    {
                      "text": " 数组传入 "
                    },
                    {
                      "text": "ProductItem",
                      "code": true
                    },
                    {
                      "text": " 组件中。请允许我先在这里卖个关子，继续往下看。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductItem.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "重新进入 "
                    },
                    {
                      "text": "ProductItem",
                      "code": true
                    },
                    {
                      "text": " 组件进行修改，这里我们使用了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "el-table",
                      "code": true
                    },
                    {
                      "text": " 表格组件取代了原始标签来展示商品信息列表。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductItem.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其实这里的修改相信大家都能看懂，我们就简单的做一下介绍。您可能还记得我们在上面卖的一个关子，为什么我们直接向该组件中传入了 "
                    },
                    {
                      "text": "products",
                      "code": true
                    },
                    {
                      "text": " 数组而不是遍历的 "
                    },
                    {
                      "text": "product",
                      "code": true
                    },
                    {
                      "text": " 对象？相信大家看了该组件的重构也能豁然开朗，那就是因为我们使用的 "
                    },
                    {
                      "text": "el-table",
                      "code": true
                    },
                    {
                      "text": " 表格组件需要传入一个数组作为 "
                    },
                    {
                      "text": "data",
                      "code": true
                    },
                    {
                      "text": " 属性，并将每个元素对象作为 "
                    },
                    {
                      "text": "prop",
                      "code": true
                    },
                    {
                      "text": " 传入表格，按照对应的列名展示出来。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除此之外，相信大家也发现了最后一个 "
                    },
                    {
                      "text": "el-table-column",
                      "code": true
                    },
                    {
                      "text": " 标签中并没有定义 "
                    },
                    {
                      "text": "prop",
                      "code": true
                    },
                    {
                      "text": " 属性，这是因为最后一列单元格中放置的是按钮而不是商品信息，该按钮是用于对指定行对象进行指定操作，这里我们使用 "
                    },
                    {
                      "text": "scope.row",
                      "code": true
                    },
                    {
                      "text": " 获取指定行对象并将其id传递给了 "
                    },
                    {
                      "text": "ProductButton",
                      "code": true
                    },
                    {
                      "text": " 按钮组件。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "通过 slot-scope 可以获取到 row, column, $index 和 store（table 内部的状态管理）的数据。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductButton.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再次进入 "
                    },
                    {
                      "text": "ProductButton",
                      "code": true
                    },
                    {
                      "text": " 组件进行修改，这里我们使用了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "el-button",
                      "code": true
                    },
                    {
                      "text": " 按钮组件替代之前普通的 "
                    },
                    {
                      "text": "button",
                      "code": true
                    },
                    {
                      "text": " 标签并修改了对应的数据处理。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductButton.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [30, 42],
                [45, 54]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们首先简单地使用了 "
                    },
                    {
                      "text": "el-button",
                      "code": true
                    },
                    {
                      "text": " 按钮组件，然后将从父组件获取的 "
                    },
                    {
                      "text": "product",
                      "code": true
                    },
                    {
                      "text": " 对象修改为了 "
                    },
                    {
                      "text": "id",
                      "code": true
                    },
                    {
                      "text": "，因为我们在 "
                    },
                    {
                      "text": "ProductItem",
                      "code": true
                    },
                    {
                      "text": " 组件中传入的是指定对象的 "
                    },
                    {
                      "text": "id",
                      "code": true
                    },
                    {
                      "text": "，因此我们在按钮组件中定义了计算属性 "
                    },
                    {
                      "text": "product",
                      "code": true
                    },
                    {
                      "text": "，从本地获取指定 "
                    },
                    {
                      "text": "id",
                      "code": true
                    },
                    {
                      "text": " 的 "
                    },
                    {
                      "text": "product",
                      "code": true
                    },
                    {
                      "text": " 对象。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们已经迫不及待把项目跑起来了，看看我们的首页导航以及商品信息列表发生了怎样不可思议的改变："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170bd7f1d39bb647.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Products.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构商品信息功能"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这部分内容主要是有关商品信息功能的重构，包括商品信息列表的展示、修改指定商品信息以及添加新商品，我们都使用了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的组件进行重构，提高用户操作商品信息时的交互体验。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们进入 "
                    },
                    {
                      "text": "Products",
                      "code": true
                    },
                    {
                      "text": " 组件，同样使用了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "el-table",
                      "code": true
                    },
                    {
                      "text": " 组件替换了之前普通表格来展示商品信息列表。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Products.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [35, 46],
                [81, 106]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "细心的大家肯定已经发现了这里的表格有点似曾相识，没错，这里的表格与 "
                    },
                    {
                      "text": "ProductItem",
                      "code": true
                    },
                    {
                      "text": " 组件中的表格非常相似，都是用来展示本地商品信息，但是两者的区别是对商品对象的操作，"
                    },
                    {
                      "text": "ProductItem",
                      "code": true
                    },
                    {
                      "text": " 组件中的按钮组件是用于将商品添加或移出购物车，而该组件中的按钮组件是用于修改或删除商品对象。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这是我们重构之后的商品信息列表："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170bd7fc2f9b7080.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Edit.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后我们先对修改功能进行重构，再次进入 "
                    },
                    {
                      "text": "Edit",
                      "code": true
                    },
                    {
                      "text": " 组件，我们在这里做了数据处理修改，目的是尝试解决商品信息表单无法编辑问题。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Edit.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [0, 13],
                [27, 35],
                [48, 58]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们把定义的计算属性 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 修改为 "
                    },
                    {
                      "text": "data",
                      "code": true
                    },
                    {
                      "text": " 属性，因为我们发现如果商品对象 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 作为计算属性传给子组件 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 进行信息展示时，无法进行表单编辑，大家可以运行起来尝试一下是否可以进行编辑。我们初始猜想是 "
                    },
                    {
                      "text": "el-form",
                      "code": true
                    },
                    {
                      "text": " 表单组件中的表单数据对象 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 不能来自计算属性，否则无法进行编辑，因此我们首度尝试将该组件中的计算属性 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 放到 "
                    },
                    {
                      "text": "data",
                      "code": true
                    },
                    {
                      "text": " 属性中。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductForm.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再次进入 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 组件进行重构，这里我们使用了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "el-form",
                      "code": true
                    },
                    {
                      "text": " 表单组件替换之前的普通表单展示商品信息。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductForm.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [32, 99],
                [101, 101]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "相信大家也能轻松的看懂 "
                    },
                    {
                      "text": "el-form",
                      "code": true
                    },
                    {
                      "text": " 表单组件的使用，这里的 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 属性表示表单数据对象，我们可以使用 "
                    },
                    {
                      "text": "v-model",
                      "code": true
                    },
                    {
                      "text": " 将表单数据对象中的信息双向绑定到相应的表单内组件上。特别提醒一下商品对象 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 中的 "
                    },
                    {
                      "text": "manufacturer",
                      "code": true
                    },
                    {
                      "text": " 是一个制造商对象，包含制造商 "
                    },
                    {
                      "text": "id",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/New.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "现在我们再进入 "
                    },
                    {
                      "text": "New",
                      "code": true
                    },
                    {
                      "text": " 组件进行重构，当我们发现 "
                    },
                    {
                      "text": "Edit",
                      "code": true
                    },
                    {
                      "text": " 组件中的问题之后，我们同样尝试将该组件中的计算属性 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 定义到 "
                    },
                    {
                      "text": "data",
                      "code": true
                    },
                    {
                      "text": " 属性中。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/New.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [0, 8],
                [17, 21],
                [30, 39]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为该组件是新建商品组件，因此我们定义的是一个空对象 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": "，但是我们需要给其一个默认初始形式 "
                    },
                    {
                      "text": "model: {manufacturer: {name: ' '}}",
                      "code": true
                    },
                    {
                      "text": "，防止在子组件表单中无法访问 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性导致报错。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "现在我们添加或者修改商品信息的表单界面变成了这样："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170bd807ce1da156.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Manufacturers.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构制造商信息功能"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "制造商信息功能包括制造商信息展示，添加制造商以及修改制造商信息，同重构商品信息功能一样，我们也使用了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的组件进行重构，提高用户操作制造商信息时的交互体验。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们进入 "
                    },
                    {
                      "text": "Manufacturers",
                      "code": true
                    },
                    {
                      "text": " 组件进行重构，同 "
                    },
                    {
                      "text": "Products",
                      "code": true
                    },
                    {
                      "text": " 组件类似，我们使用了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "el-table",
                      "code": true
                    },
                    {
                      "text": " 表格组件替换了之前普通的表格展示制造商信息列表。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Manufacturers.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [21, 35],
                [37, 37],
                [58, 64],
                [66, 91]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这是我们重构后的制造商信息列表："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170bd8133a39a38f.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/NewManufacturers.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再次进入 "
                    },
                    {
                      "text": "NewManufacturers",
                      "code": true
                    },
                    {
                      "text": " 组件进行重构，同样的将定义的计算属性 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 放到 "
                    },
                    {
                      "text": "data",
                      "code": true
                    },
                    {
                      "text": " 属性中："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/NewManufacturers.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [0, 7],
                [20, 30]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/ManufacturerForm.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后进入子组件 "
                    },
                    {
                      "text": "ManufacturerForm",
                      "code": true
                    },
                    {
                      "text": " 中进行重构，同 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 组件类似，使用 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "el-form",
                      "code": true
                    },
                    {
                      "text": " 表单组件替换了之前普通的表单展示制造商信息："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/ManufacturerForm.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [[17, 22]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这是我们重构后用户添加或者修改制造商信息时的表单界面："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170bd81d39c3eb45.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/Cart.vue",
          "display": true,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们进入 "
                    },
                    {
                      "text": "Cart",
                      "code": true
                    },
                    {
                      "text": " 组件进行重构，我们会发现该组件与 "
                    },
                    {
                      "text": "ProductList",
                      "code": true
                    },
                    {
                      "text": " 组件极其相似，因为两者都复用了子组件 "
                    },
                    {
                      "text": "ProductItem",
                      "code": true
                    },
                    {
                      "text": "，该组件是为了展示购物车商品信息列表。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/Cart.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [0, 1],
                [12, 30]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这是重构后的购物车界面："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170bd82508c14642.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Index.vue",
          "display": false,
          "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Index.vue",
              "commit": "b6d9a87f1af8f2a068cfb5a2d392fd1dbaec84c3",
              "hiddenLines": [
                [0, 0],
                [23, 24]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们主要就是使用 "
                },
                {
                  "text": "element-ui",
                  "code": true
                },
                {
                  "text": " 组件库进行项目代码的重构，实现了首页导航栏、商品信息功能、制造商信息功能以及购物车的页面升级，提高了用户的交互体验。但是这也造成了部分功能逻辑的瘫痪，我们在下一节会带大家一起去解决问题。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "02f5761fdc540a3cf3e0549b2a4e3f616b4f1a48",
      "id": "dQE9pBlFOk",
      "articleId": "tc1c9oDB",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "02f5761fdc540a3cf3e0549b2a4e3f616b4f1a48",
          "id": "S0o5U92BKF",
          "fixed": true,
          "children": [
            {
              "text": "修复 ElementUI 表单的双向绑定问题"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上一节我们使用了 "
                },
                {
                  "text": "element-ui",
                  "code": true
                },
                {
                  "text": " 组件库完成项目代码重构，可是当我们把项目跑起来之后发现表单信息仍然无法编辑，说明我们之前的尝试失败。不过我们并没有灰心，而是选择继续尝试，这一节我们又尝试新方法来修复"
                },
                {
                  "text": "element-ui",
                  "code": true
                },
                {
                  "text": " 表单双向绑定问题。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "大家遇到的问题应该是这样子："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://static.tuture.co/c/092faf4/170bd829d4626c61.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Edit.vue",
          "display": true,
          "commit": "02f5761fdc540a3cf3e0549b2a4e3f616b4f1a48",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 Edit 组件"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们首先进入 "
                    },
                    {
                      "text": "Edit",
                      "code": true
                    },
                    {
                      "text": " 组件进行修复，这里我们主要恢复了原先的数据定义。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Edit.vue",
              "commit": "02f5761fdc540a3cf3e0549b2a4e3f616b4f1a48",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们又将替换到 "
                    },
                    {
                      "text": "data",
                      "code": true
                    },
                    {
                      "text": " 属性中的 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 对象恢复到了计算属性中，用于缓存 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 对象信息，提高性能。我们打算在下面的 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 组件中进行修复表单无法编辑的问题。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductForm.vue",
          "display": true,
          "commit": "02f5761fdc540a3cf3e0549b2a4e3f616b4f1a48",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 ProductForm 组件"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再次进入 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 组件中，我们尝试另一种方法来修复表单无法编辑的问题。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductForm.vue",
              "commit": "02f5761fdc540a3cf3e0549b2a4e3f616b4f1a48",
              "hiddenLines": [
                [7, 7],
                [27, 30],
                [41, 72],
                [81, 97],
                [108, 110],
                [143, 152]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们没有直接使用从父组件获取的 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 对象作为表单数据对象，而是在该组件中自定义一个 "
                    },
                    {
                      "text": "modelData",
                      "code": true
                    },
                    {
                      "text": " 对象，并使用默认初始形式。然后在组件刚被创建时，先将从父组件获取的 "
                    },
                    {
                      "text": "model",
                      "code": true
                    },
                    {
                      "text": " 对象赋值给一个临时变量 "
                    },
                    {
                      "text": "product",
                      "code": true
                    },
                    {
                      "text": "，然后将 "
                    },
                    {
                      "text": "product",
                      "code": true
                    },
                    {
                      "text": " 浅拷贝到 "
                    },
                    {
                      "text": "modelData",
                      "code": true
                    },
                    {
                      "text": " 对象中，这样就避免了表单数据对象使用计算属性。但是这仅仅完成了一半的工作，因为我们需要实现双向绑定的效果，因此我们需要监测表单组件的变化，通过使用 "
                    },
                    {
                      "text": "watch",
                      "code": true
                    },
                    {
                      "text": " 方法监测用户的输入，然后将新数据储存到 "
                    },
                    {
                      "text": "modelData",
                      "code": true
                    },
                    {
                      "text": " 对象中，这样就成功实现了双向绑定，而且表单也能随意进行编辑。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "但是这里我们仅仅在下拉菜单中使用了 "
                    },
                    {
                      "text": "modelData",
                      "code": true
                    },
                    {
                      "text": " 对象进行尝试，因此后面我们会在整个表单内组件使用该对象。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "yarn.lock",
          "display": false,
          "commit": "02f5761fdc540a3cf3e0549b2a4e3f616b4f1a48",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "02f5761fdc540a3cf3e0549b2a4e3f616b4f1a48",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们主要带大家修复了 "
                },
                {
                  "text": "element-ui",
                  "code": true
                },
                {
                  "text": " 表单双向绑定问题，通过自定义 "
                },
                {
                  "text": "modelData",
                  "code": true
                },
                {
                  "text": " 对象以及 "
                },
                {
                  "text": "watch",
                  "code": true
                },
                {
                  "text": " 方法监测表单数据的改变实现了表单数据的双向绑定，并且解决了表单无法编辑的问题。但是仅仅在下拉菜单中进行尝试，后面我们会重构整个商品信息表单组件。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
      "id": "oAU5PITO4B",
      "articleId": "tc1c9oDB",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
          "id": "8PEfu5F1qz",
          "fixed": true,
          "children": [
            {
              "text": "完善表单双向绑定问题"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductForm.vue",
          "display": true,
          "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 ProductForm 组件"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再次进入 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 组件，我们需要完善上一节遗留的问题，也就是仅仅对商品信息表单中的下拉菜单进行了尝试，并且尝试成功，因此这一节我们需要将 "
                    },
                    {
                      "text": "modelData",
                      "code": true
                    },
                    {
                      "text": " 对象导入所有表单内组件中，解决其他表单内组件无法编辑的问题。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductForm.vue",
              "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
              "hiddenLines": [
                [13, 23],
                [34, 39],
                [42, 106],
                [108, 145]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductItem.vue",
          "display": false,
          "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductItem.vue",
              "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
              "hiddenLines": [
                [0, 0],
                [10, 48],
                [75, 85]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductList.vue",
          "display": false,
          "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductList.vue",
              "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
              "hiddenLines": [
                [0, 3],
                [12, 33]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Index.vue",
          "display": false,
          "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Index.vue",
              "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
              "hiddenLines": [
                [0, 0],
                [10, 10]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Manufacturers.vue",
          "display": false,
          "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Manufacturers.vue",
              "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
              "hiddenLines": [
                [0, 10],
                [21, 35],
                [66, 84]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/New.vue",
          "display": false,
          "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/New.vue",
              "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
              "hiddenLines": [
                [0, 25],
                [33, 39]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Products.vue",
          "display": false,
          "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Products.vue",
              "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
              "hiddenLines": [
                [0, 20],
                [29, 48],
                [87, 100]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/actions.js",
          "display": false,
          "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/actions.js",
              "commit": "5c7666c1f66b288f2c02b04c964c53791ba4ecb5",
              "hiddenLines": [
                [0, 72],
                [80, 132]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们带大家补充了上一节遗留的问题，也就是复制下拉菜单中的尝试到其他表单内组件中，保证整个表单组件都能够顺利地实现编辑功能。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "11118c364dd8c3bbe0380075f980767417ec1f33",
      "id": "y_38hbXZof",
      "articleId": "tc1c9oDB",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "11118c364dd8c3bbe0380075f980767417ec1f33",
          "id": "tK2TfZRajP",
          "fixed": true,
          "children": [
            {
              "text": "解决操作商品信息表单报错问题"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductForm.vue",
          "display": true,
          "commit": "11118c364dd8c3bbe0380075f980767417ec1f33",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "重构 ProductForm 组件"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "相信大家在对商品信息表单进行添加或者修改操作时，控制台会出现 "
                    },
                    {
                      "text": "id",
                      "code": true
                    },
                    {
                      "text": " 属性未定义的错误，我们首先应该进入报错的组件中进行调试，大家应该都看到了报错信息出现在 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 组件中，因此我们需要进入 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 组件进行调试。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductForm.vue",
              "commit": "11118c364dd8c3bbe0380075f980767417ec1f33",
              "hiddenLines": [
                [0, 104],
                [107, 111],
                [119, 121],
                [132, 143]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先大家应该清楚商品对象中还包含了相应的制造商对象，并且制造商对象中包含了 "
                    },
                    {
                      "text": "id",
                      "code": true
                    },
                    {
                      "text": " 属性和 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性。但是我们应该可以发现商品信息表单中的下拉菜单双向绑定的是商品对象中的制造商对象的 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性，因此在 "
                    },
                    {
                      "text": "watch",
                      "code": true
                    },
                    {
                      "text": " 方法中存储到 "
                    },
                    {
                      "text": "modelData",
                      "code": true
                    },
                    {
                      "text": " 对象中的制造商对象也只有 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性，但是后端数据库要求制造商对象必须也要有 "
                    },
                    {
                      "text": "id",
                      "code": true
                    },
                    {
                      "text": " 属性，这就是我们点击更新商品信息出现报错的原因。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们使用了本地制造商数组的 "
                    },
                    {
                      "text": "find",
                      "code": true
                    },
                    {
                      "text": " 方法，检索到了对应 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 的制造商对象并将其覆盖掉 "
                    },
                    {
                      "text": "modelData",
                      "code": true
                    },
                    {
                      "text": " 对象中的制造商对象，这样我们的 "
                    },
                    {
                      "text": "modelData",
                      "code": true
                    },
                    {
                      "text": " 对象中的制造商对象就是一个符合后端数据库要求的对象了。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductItem.vue",
          "display": false,
          "commit": "11118c364dd8c3bbe0380075f980767417ec1f33",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductItem.vue",
              "commit": "11118c364dd8c3bbe0380075f980767417ec1f33",
              "hiddenLines": [
                [0, 54],
                [67, 86]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/New.vue",
          "display": false,
          "commit": "11118c364dd8c3bbe0380075f980767417ec1f33",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/New.vue",
              "commit": "11118c364dd8c3bbe0380075f980767417ec1f33",
              "hiddenLines": [
                [0, 10],
                [19, 40]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们带大家分析并尝试解决了操作商品信息表单出现 "
                },
                {
                  "text": "id",
                  "code": true
                },
                {
                  "text": " 属性未定义的问题。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
      "id": "5-zFgvRqX3",
      "articleId": "tc1c9oDB",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
          "id": "XmO_x8VB4v",
          "fixed": true,
          "children": [
            {
              "text": "添加动态效果及消息提示"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们注意到了当用户进行添加或修改商品或者制造商信息时，难免会遇到更新延迟的问题，这个时候如果页面毫无反馈会显得些许尴尬，因此我们认为只要用户进行添加或者修改操作，在后端数据同步完成之前我们为页面添加一个动态加载的效果，给用户一个反馈表示数据正在处理中，请耐心等待；并且在后端同步完成之后为页面添加一个消息提示，给用户一个反馈表示数据处理成功，这样就避免了尴尬的场面，提高了用户的交互体验。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/ManufacturerForm.vue",
          "display": true,
          "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现 loading 动态加载效果"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再次进入 "
                    },
                    {
                      "text": "ManufactureForm",
                      "code": true
                    },
                    {
                      "text": " 组件，实现用户在添加或者修改制造商信息时且当后端数据同步完成之前，页面出现 "
                    },
                    {
                      "text": "loading",
                      "code": true
                    },
                    {
                      "text": "动态加载效果。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/ManufacturerForm.vue",
              "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
              "hiddenLines": [
                [22, 41],
                [73, 84]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们在该组件中使用了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的自定义指令 "
                    },
                    {
                      "text": "v-loading",
                      "code": true
                    },
                    {
                      "text": "，通过判断 "
                    },
                    {
                      "text": "loading",
                      "code": true
                    },
                    {
                      "text": " 为true还是false来决定是否实现动态加载效果。这里我们通过获取本地状态中的 "
                    },
                    {
                      "text": "showLoader",
                      "code": true
                    },
                    {
                      "text": " 属性作为 "
                    },
                    {
                      "text": "loading",
                      "code": true
                    },
                    {
                      "text": " 属性值，因为在用户刚进行添加或修改操作时，向后端发起数据请求，此时本地状态中的 "
                    },
                    {
                      "text": "showLoader",
                      "code": true
                    },
                    {
                      "text": " 属性值为true，当成功获取到了数据响应之后，也就是后端数据同步完成，此时 "
                    },
                    {
                      "text": "showLoader",
                      "code": true
                    },
                    {
                      "text": " 属性值为false，这样就实现了在指定时间显示动态加载效果；除此之外，我们还按照 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 组件补充修改了数据处理，解决制造商表单组件编辑问题。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/products/ProductForm.vue",
          "display": true,
          "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同样进入 "
                    },
                    {
                      "text": "ProductForm",
                      "code": true
                    },
                    {
                      "text": " 组件进行修改，实现用户在添加或修改商品信息时，且当后端数据同步完成之前，页面出现 "
                    },
                    {
                      "text": "loading",
                      "code": true
                    },
                    {
                      "text": " 动态加载效果。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/products/ProductForm.vue",
              "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
              "hiddenLines": [
                [14, 35],
                [44, 127],
                [155, 168]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/actions.js",
          "display": true,
          "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现消息提示功能"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先进入 "
                    },
                    {
                      "text": "actions.js",
                      "code": true
                    },
                    {
                      "text": " 文件进行修改，由于发送网络请求数据的操作在该文件中执行，因此我们可以将消息提示功能添加到这里。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/actions.js",
              "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
              "hiddenLines": [
                [0, 23],
                [26, 27],
                [30, 36],
                [39, 46],
                [109, 109],
                [112, 118],
                [121, 128]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们首先导入了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "Message",
                      "code": true
                    },
                    {
                      "text": " 消息提示组件，并在网络请求成功之后添加成功消息提醒，在请求失败之后添加失败消息提醒。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/mutations.js",
          "display": true,
          "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后进入 "
                    },
                    {
                      "text": "mutations.js",
                      "code": true
                    },
                    {
                      "text": " 文件进行修改，这里的修改是为本地购物车数据处理添加消息提示。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/mutations.js",
              "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
              "hiddenLines": [
                [0, 24],
                [27, 81],
                [102, 155]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同样的我们首先需要导入 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "Message",
                      "code": true
                    },
                    {
                      "text": " 消息提示组件，当用户进行添加或者移除购物车操作时，执行操作成功消息提醒。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在进行添加、删除、修改以及加入或移除购物车操作时都会得到这样的反馈："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170bd8414598aa64.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/New.vue",
          "display": false,
          "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/New.vue",
              "commit": "38caf6d47d40776d073f517ea7ff25c9e21b0a8b",
              "hiddenLines": [
                [0, 25],
                [33, 39]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们主要做的几点工作："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "为表单组件添加 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "v-loading",
                      "code": true
                    },
                    {
                      "text": " 指令，实现动态加载效果；"
                    }
                  ],
                  "level": 0
                },
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "添加了 "
                    },
                    {
                      "text": "element-ui",
                      "code": true
                    },
                    {
                      "text": " 组件库提供的 "
                    },
                    {
                      "text": "Message",
                      "code": true
                    },
                    {
                      "text": " 消息提示组件，实现用户操作表单信息后得到的反馈消息提示。"
                    }
                  ],
                  "level": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
      "id": "jproB4oTdJ",
      "articleId": "tc1c9oDB",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
          "id": "WuirC5Iw0N",
          "fixed": true,
          "children": [
            {
              "text": "解决表单信息修改后无法显示最新"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "重构到这里相信有些朋友已经迫不及待地将项目跑起来了，但是总是事与愿违，但是大家丝毫不用方，只要您跟着我们一步一步脚踏实地地去分析问题，那么什么问题都会迎刃而解了。现在的问题就是当用户对商品或者制造商进行信息修改时，点击更新之后表单却又显示了旧信息。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "大家遇到的状况应该是这样："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://static.tuture.co/c/092faf4/170bd845ae228eb9.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "image",
              "url": "https://static.tuture.co/c/092faf4/170bd848f59fad3b.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "children": [
                {
                  "text": "数据出现问题我们应该根据 "
                },
                {
                  "text": "vue",
                  "code": true
                },
                {
                  "text": " 的单向数据流原则进行调试，当用户对表单信息进行更新时，应该首先向后端发起网络请求，然后将最新数据同步到本地状态中进行展示，因此我们来到 "
                },
                {
                  "text": "actions.js",
                  "code": true
                },
                {
                  "text": " 文件中进行调试。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/actions.js",
          "display": true,
          "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "提交最新数据"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "再次进入 "
                    },
                    {
                      "text": "actions.js",
                      "code": true
                    },
                    {
                      "text": " 文件进行调试，我们可以大胆的猜测网络请求成功之后提交到 "
                    },
                    {
                      "text": "mutations.js",
                      "code": true
                    },
                    {
                      "text": " 文件中的数据对象不是用户修改的最新数据。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/actions.js",
              "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
              "hiddenLines": [
                [0, 27],
                [29, 66],
                [86, 103],
                [105, 105],
                [107, 144],
                [164, 180]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在这里将网络请求成功时提交的载荷修改为了最新数据对象，然后提交到对应类型的 "
                    },
                    {
                      "text": "mutation",
                      "code": true
                    },
                    {
                      "text": " 中进行本地数据的更新。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/mutations.js",
          "display": true,
          "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "将最新数据同步到本地"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "紧接着我们需要进入 "
                    },
                    {
                      "text": "mutations.js",
                      "code": true
                    },
                    {
                      "text": " 文件，将其获取到的最新数据同步到本地状态中。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/mutations.js",
              "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
              "hiddenLines": [
                [0, 25],
                [27, 56],
                [77, 82],
                [84, 103],
                [105, 134],
                [152, 157]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/Edit.vue",
          "display": false,
          "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/Edit.vue",
              "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
              "hiddenLines": [
                [0, 38],
                [50, 54]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/admin/EditManufacturers.vue",
          "display": false,
          "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/admin/EditManufacturers.vue",
              "commit": "aa23775d642373413aa51b97bc3e7915ac9e2095",
              "hiddenLines": [
                [0, 22],
                [34, 38]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节我们主要带大家分析并尝试解决了表单信息修改后无法显示最新信息的问题。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "本篇教程为大家呈现了在实际开发过程中，使用element-ui组件库对电商应用前端代码进行重构所遇到的一些问题，并且我们一步一步地带大家去分析及尝试解决问题。希望这篇教程让大家对element-ui组件库的使用需要注意的问题有一个大致的了解，重要的是分析和尝试解决问题的能力。好了，到这里我们的项目基本上可以愉快地跑起来了，用户的交互体验感明显得到了改善。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "40e98722ac395db0546ac896d7497313e46081a1",
      "id": "EOFTHG1NuR",
      "articleId": "-td0ssrw",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "id": "7kd4-cgTwh",
          "fixed": true,
          "children": [
            {
              "text": "应用容器化和 Docker Compose 配置"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，如果你是一路跟着前面七篇教程一路敲过来的，那么将整个 Vue 前端项目放到新创建的 "
                },
                {
                  "text": "client",
                  "code": true
                },
                {
                  "text": " 目录中，把整个 Express 后端项目放到新创建的 "
                },
                {
                  "text": "server",
                  "code": true
                },
                {
                  "text": " 目录。如果你打算直接从这一篇开始学习部署，可以通过直接下载我们提供的代码："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b deploy-start https://github.com/tuture-dev/vue-online-shop-frontend.git"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在正式开始整个全栈应用的容器化之前，让我们通过一张图来梳理一下思路："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://static.tuture.co/c/092faf4/170e3df21624b4e9.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们将使用三个容器："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "nginx",
                      "code": true
                    },
                    {
                      "text": " 容器包括了 Nginx 服务器（存放了 Vue 框架实现的前端静态页面）"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "api",
                      "code": true
                    },
                    {
                      "text": " 容器则包括了我们用 Express 框架实现的 API 服务器"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "db",
                      "code": true
                    },
                    {
                      "text": " 容器则是 MongoDB 数据库"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们将整个应用通过 Nginx 实现反向代理。也就是说，用户想要访问我们的应用，必须得先经过 Nginx。并且，所有获取前端资源的请求（例如 HTML、CSS、JS 等静态文件资源），Nginx 可以直接返回；所有获取 API 端点的请求（例如 "
                },
                {
                  "text": "/api/v1/products",
                  "code": true
                },
                {
                  "text": " ），则将请求转交给给 API 服务器，然后再将 API 服务器返回的 JSON 数据返回给用户。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这种经典的架构有以下优势："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过 Nginx 可以实现访问控制，过滤掉不合法的请求"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "解决了前后端跨域的问题，因为前端页面和后端 API 都通过同一个端点访问"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "整个应用架构对用户透明，可以轻松进行配置扩容，并且 Nginx 搭配了负载均衡"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ],
          "flag": "step_start"
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/config/nginx.conf",
          "display": true,
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "前端应用的容器化"
                    }
                  ],
                  "id": "pkcqBGX5"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先，让我们来容器化之前用 Vue 完成的前端应用。进入 "
                    },
                    {
                      "text": "client",
                      "code": true
                    },
                    {
                      "text": " 目录，然后把 Vue 前端项目构建成静态页面："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "npm run build"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 或者 yarn build"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后添加 "
                    },
                    {
                      "text": "client/config/nginx.conf",
                      "code": true
                    },
                    {
                      "text": " 配置文件，代码如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "client/config/nginx.conf",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其中需要关注的就是两条 "
                    },
                    {
                      "text": "location",
                      "code": true
                    },
                    {
                      "text": " 规则："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "如果访问 "
                        },
                        {
                          "text": "/api/v1",
                          "code": true
                        },
                        {
                          "text": " ，那么一律把请求传递给 "
                        },
                        {
                          "text": "api",
                          "code": true
                        },
                        {
                          "text": " 容器"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "如果访问 "
                        },
                        {
                          "text": "/",
                          "code": true
                        },
                        {
                          "text": " ，则直接返回前端静态页面（index.html）"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "client/src/store/actions.js",
          "display": true,
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后在前端访问后端的代码中，我们需要做一点改变。打开 "
                    },
                    {
                      "text": "client/src/store/actions.js",
                      "code": true
                    },
                    {
                      "text": " 文件，修改 "
                    },
                    {
                      "text": "API_BASE",
                      "code": true
                    },
                    {
                      "text": " 常量如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "client/src/store/actions.js",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [
                [0, 23],
                [30, 103],
                [107, 179]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这样修改后，前端实际访问的 API 就取决于当前该页面的 URL，而不是硬编码的 "
                    },
                    {
                      "text": "localhost:3000",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "client/Dockerfile",
          "display": true,
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在做好准备工作后，我们就要正式开始容器化了。"
                    }
                  ],
                  "id": "MLZS4AAj"
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "如果你对 Docker 的核心概念不太熟悉，推荐学习一波我们图雀社区的"
                        },
                        {
                          "text": "《一杯茶的时间，上手 Docker》",
                          "link": true,
                          "url": "https://tuture.co/2020/01/01/442cc8d/"
                        },
                        {
                          "text": "，帮助你快速掌握"
                        },
                        {
                          "text": "镜像",
                          "bold": true
                        },
                        {
                          "text": "和"
                        },
                        {
                          "text": "容器",
                          "bold": true
                        },
                        {
                          "text": "这两个重要概念，并手把手带你容器化第一个应用。"
                        }
                      ],
                      "id": "MLZS4AAj"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "text": "client",
                      "code": true
                    },
                    {
                      "text": " 目录下创建 "
                    },
                    {
                      "text": "Dockerfile",
                      "code": true
                    },
                    {
                      "text": " 文件，代码如下："
                    }
                  ],
                  "id": "MLZS4AAj"
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "client/Dockerfile",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "client/.dockerignore",
          "display": true,
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建 "
                    },
                    {
                      "text": "client/.dockerignore",
                      "code": true
                    },
                    {
                      "text": " 文件，确保在构建镜像时忽略掉 "
                    },
                    {
                      "text": "node_modules",
                      "code": true
                    },
                    {
                      "text": " ："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "client/.dockerignore",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "server/app.js",
          "display": true,
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "后端应用的容器化"
                    }
                  ],
                  "id": "KTXThaEl"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "容器化前端应用之后，接下来就开始准备后端应用的容器化。首先我们要把硬编码的 MongoDB 连接字符串改成通过环境变量注入。修改 "
                    },
                    {
                      "text": "server/app.js",
                      "code": true
                    },
                    {
                      "text": " 文件，代码如下："
                    }
                  ],
                  "id": "2IP56SvO"
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "server/app.js",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [
                [0, 12],
                [21, 66]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "server/Dockerfile",
          "display": true,
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着创建 "
                    },
                    {
                      "text": "server/Dockerfile",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "server/Dockerfile",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "server/.dockerignore",
          "display": true,
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "和前端一样，创建 "
                    },
                    {
                      "text": "server/.dockerignore",
                      "code": true
                    },
                    {
                      "text": " 文件，确保 "
                    },
                    {
                      "text": "node_modules",
                      "code": true
                    },
                    {
                      "text": " 不会被打包到镜像中去："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "server/.dockerignore",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "docker-compose.yml",
          "display": true,
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "Docker Compose 配置"
                    }
                  ],
                  "id": "x4NKNz2G"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Docker Compose",
                      "link": true,
                      "url": "https://docs.docker.com/compose/"
                    },
                    {
                      "text": " 是一个强大的多容器管理工具，通过一个 YAML 文件配置完成后，只需要一个命令就可以启动全部容器（服务）。在项目根目录创建 "
                    },
                    {
                      "text": "docker-compose.yml",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ],
                  "id": "aNDiLt21"
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "docker-compose.yml",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们创建了三个 "
                    },
                    {
                      "text": "service",
                      "code": true
                    },
                    {
                      "text": " ，对应我们的三个容器（"
                    },
                    {
                      "text": "db",
                      "code": true
                    },
                    {
                      "text": " ，"
                    },
                    {
                      "text": "api",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "nginx",
                      "code": true
                    },
                    {
                      "text": " ）："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "db",
                          "code": true
                        },
                        {
                          "text": " 服务指定镜像为 "
                        },
                        {
                          "text": "mongo",
                          "code": true
                        },
                        {
                          "text": " ，然后设置 "
                        },
                        {
                          "text": "restart: always",
                          "code": true
                        },
                        {
                          "text": " ，确保因某种原因停止后自动重启"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "api",
                          "code": true
                        },
                        {
                          "text": " 服务指定镜像通过 "
                        },
                        {
                          "text": "server",
                          "code": true
                        },
                        {
                          "text": " 目录构建，端口映射规则为 "
                        },
                        {
                          "text": "3000:3000",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "nginx",
                          "code": true
                        },
                        {
                          "text": " 服务指定镜像通过 "
                        },
                        {
                          "text": "client",
                          "code": true
                        },
                        {
                          "text": " 目录构建，端口映射规则为 "
                        },
                        {
                          "text": "8080:80",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "在指定每个 service 时，如果使用 "
                        },
                        {
                          "text": "image",
                          "code": true
                        },
                        {
                          "text": " 字段指定镜像，那么就会直接从镜像仓库拉取该镜像，这里我们的 "
                        },
                        {
                          "text": "db",
                          "code": true
                        },
                        {
                          "text": " 服务就是如此。如果使用 "
                        },
                        {
                          "text": "build",
                          "code": true
                        },
                        {
                          "text": " 字段指定镜像，则会根据指定的目录下的 "
                        },
                        {
                          "text": "Dockerfile",
                          "code": true
                        },
                        {
                          "text": " 文件构建镜像，例如这里我们指定 "
                        },
                        {
                          "text": "server",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "client",
                          "code": true
                        },
                        {
                          "text": " 目录分别构建 "
                        },
                        {
                          "text": "api",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "nginx",
                          "code": true
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "Docker Compose 默认为所有服务创建了一个 Docker 网络，使得容器之间可以通过服务发现的机制进行相互通信（而不是通过固定 IP），这也就是为什么在 Nginx 配置中可以直接指定 "
                        },
                        {
                          "text": "http://api:3000",
                          "code": true
                        },
                        {
                          "text": " ，以及将 MongoDB 连接字符串设置为 "
                        },
                        {
                          "text": "mongodb://db:27017/test",
                          "code": true
                        },
                        {
                          "text": " 。如果想要透彻理解 Docker 网络，可浏览之前发布的"
                        },
                        {
                          "text": "《Docker 筑梦师系列（一）：实现容器互联》",
                          "link": true,
                          "url": "https://tuture.co/2020/01/12/cd44c84/"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "一切就绪，我们在电商根目录下通过一个命令实现整个应用的构建 + 运行："
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker-compose up --build"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "初次构建可能需要相当久的时间（拉取基础镜像），这时候不妨给自己点一杯咖啡☕️，静静等待结果的到来~ 如果你在控制台看到了如下输出，就代表镜像已经构建完毕了："
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170e3df21661b0dd.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "接着每个镜像会输出各自的日志信息。我们通过 "
                    },
                    {
                      "text": "docker ps",
                      "code": true
                    },
                    {
                      "text": " 命令进一步确认三个容器的状态："
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170e3df219c9c305.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "OK，我们可以通过 "
                    },
                    {
                      "text": "localhost:8080",
                      "code": true
                    },
                    {
                      "text": " 访问我们的站点了！"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "text": "并且，我们还通过内网（例如同一 WiFi 下的其他设备）访问我们的站点，通过查询本机的内网 IP（例如 "
                    },
                    {
                      "text": "192.168.1.1",
                      "code": true
                    },
                    {
                      "text": " ），然后在手机的浏览器里面输入这个 IP 地址，就可以通过 "
                    },
                    {
                      "text": "192.168.1.1:8080",
                      "code": true
                    },
                    {
                      "text": " 访问。查询本机内网 IP 可以自行去搜索引擎找答案哦。"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "client/.gitignore",
          "display": false,
          "commit": "40e98722ac395db0546ac896d7497313e46081a1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/.gitignore",
              "commit": "40e98722ac395db0546ac896d7497313e46081a1",
              "hiddenLines": [[0, 10]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "GzLSDJbN"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一小节中，我们学习了："
                }
              ],
              "id": "731bSfky"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过 Nginx 容器提供前端静态页面，并将后端请求转发给 API 容器"
                    }
                  ],
                  "id": "731bSfky",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "容器化后端应用，建立与数据库的连接"
                    }
                  ],
                  "id": "731bSfky",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过 Docker Compose 一键构建和启动应用"
                    }
                  ],
                  "id": "731bSfky",
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ],
          "flag": "step_end"
        }
      ]
    },
    {
      "commit": "cc4d59c976050064882d1e08f448c4525d35b2dc",
      "id": "X_78VTqdhO",
      "articleId": "-td0ssrw",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "cc4d59c976050064882d1e08f448c4525d35b2dc",
          "id": "UyMOnZLxXl",
          "fixed": true,
          "children": [
            {
              "text": "配置 MongoDB 的身份验证"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在之前的部署配置中，有一个重大的安全隐患：我们的 MongoDB 数据库没有配置任何的身份验证措施，这意味着所有能够访问数据库的请求都可以对数据库作出任何修改！接下来，我们就来搞定 MongoDB 的身份验证，为我们的数据安全保驾护航。"
                }
              ]
            }
          ],
          "flag": "step_start"
        },
        {
          "file": "server/app.js",
          "display": true,
          "commit": "cc4d59c976050064882d1e08f448c4525d35b2dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "修改 MongoDB 连接设置"
                    }
                  ],
                  "id": "HAjn2Tc2"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先，我们修改 "
                    },
                    {
                      "text": "server/app.js",
                      "code": true
                    },
                    {
                      "text": " 中的 MongoDB 连接设置，代码如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "server/app.js",
              "commit": "cc4d59c976050064882d1e08f448c4525d35b2dc",
              "hiddenLines": [
                [0, 15],
                [26, 71]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "四个选项的含义分别如下："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "useNewUrlParser",
                          "code": true
                        },
                        {
                          "text": " ：使用新的 MongoDB 驱动 URL 解析器"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "useUnifiedTopology",
                          "code": true
                        },
                        {
                          "text": " ：使用新的连接管理引擎，能够大大提高连接的稳定性，支持重连"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "user",
                          "code": true
                        },
                        {
                          "text": " ：连接用户名，通过环境变量注入"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "pass",
                          "code": true
                        },
                        {
                          "text": " ：连接密码，通过环境变量注入"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "server/Dockerfile",
          "display": true,
          "commit": "cc4d59c976050064882d1e08f448c4525d35b2dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "Dockerfile 中注入环境变量"
                    }
                  ],
                  "id": "zmHO9UXb"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后在 "
                    },
                    {
                      "text": "server/Dockerfile",
                      "code": true
                    },
                    {
                      "text": " 中加入这些环境变量："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "server/Dockerfile",
              "commit": "cc4d59c976050064882d1e08f448c4525d35b2dc",
              "hiddenLines": [
                [0, 12],
                [23, 27]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到我们调整了 "
                    },
                    {
                      "text": "MONGO_URI",
                      "code": true
                    },
                    {
                      "text": " ，把数据库从 "
                    },
                    {
                      "text": "test",
                      "code": true
                    },
                    {
                      "text": " 设置为默认生成的 "
                    },
                    {
                      "text": "admin",
                      "code": true
                    },
                    {
                      "text": " ，这是为了使用 "
                    },
                    {
                      "text": "admin",
                      "code": true
                    },
                    {
                      "text": " 作为"
                    },
                    {
                      "text": "鉴权数据库",
                      "link": true,
                      "url": "https://docs.mongodb.com/manual/core/security-users/#user-authentication-database"
                    },
                    {
                      "text": "（Authentication Database）。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "docker-compose.yml",
          "display": true,
          "commit": "cc4d59c976050064882d1e08f448c4525d35b2dc",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "Docker Compose 中配置初始密码"
                    }
                  ],
                  "id": "GbZereuf"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后在 "
                    },
                    {
                      "text": "docker-compose.yml",
                      "code": true
                    },
                    {
                      "text": " 里面为 "
                    },
                    {
                      "text": "db",
                      "code": true
                    },
                    {
                      "text": " 服务添加初始密码环境变量："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "docker-compose.yml",
              "commit": "cc4d59c976050064882d1e08f448c4525d35b2dc",
              "hiddenLines": [
                [0, 2],
                [12, 16]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "OK，一切就绪，首先把之前创建的容器群彻底删除："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker-compose down --volumes"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "down",
                      "code": true
                    },
                    {
                      "text": " 命令的含义就和之前的 "
                    },
                    {
                      "text": "up",
                      "code": true
                    },
                    {
                      "text": " 刚好相反，把 "
                    },
                    {
                      "text": "up",
                      "code": true
                    },
                    {
                      "text": " 创建的所有镜像、容器、网络、数据卷全部删除，并且我们通过 "
                    },
                    {
                      "text": "--volumes",
                      "code": true
                    },
                    {
                      "text": " 参数删除 MongoDB 容器创建的数据卷。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "如果不把之前 MongoDB 容器的数据卷删干净，接下来创建带有身份验证的 MongoDB 容器就会复用之前的数据卷，直接跳过初始化用户的过程（笔者在这个地方踩了接近两个小时的坑）。如果你担心数据卷还没删干净，可以运行 "
                        },
                        {
                          "text": "docker volume prune",
                          "code": true
                        },
                        {
                          "text": " 。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后重新构建并开启容器群："
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker-compose up --build"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这时候再检查我们的应用（访问 "
                    },
                    {
                      "text": "localhost:8080",
                      "code": true
                    },
                    {
                      "text": " ），应该看到一切正常。不过一颗悬着的心终于放下了——这次我们的数据库不再处于“裸奔”状态了！"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "jZdCG8GZ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节中，我们完整地实践了一波如何为 MongoDB 容器配备身份验证。不过平心而论，我们采用的方法还是相当原始的，把机密信息明文写在代码文件中。在大型的容器编排系统中（例如 Kubernetes 和 Docker Swarm），都集成了完善的、企业级的机密信息管理方案。由于这一系列教程的入门性质，我们就点到为止啦。"
                }
              ],
              "id": "ENWQ4uxJ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "此外，我们也没有讲 MongoDB 数据库备份和恢复的细节，如果想要了解和学习，可以阅读我们之前的"
                },
                {
                  "text": "《Docker 筑梦师系列（二）：上手容器数据管理》",
                  "link": true,
                  "url": "https://tuture.co/2020/03/06/0X8ssR3/"
                },
                {
                  "text": "。"
                }
              ],
              "id": "ENWQ4uxJ"
            }
          ],
          "flag": "step_end"
        }
      ]
    },
    {
      "commit": "b8afe6837849e25e1386f78c89786cce23159272",
      "id": "CVMmYydEvx",
      "articleId": "-td0ssrw",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "b8afe6837849e25e1386f78c89786cce23159272",
          "id": "j_rgZFGFpX",
          "fixed": true,
          "children": [
            {
              "text": "使用阿里云镜像仓库服务"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "到了这一步，实际上我们已经可以轻松地进行应用部署了。通过 SSH（或其他方式）连接到远程主机后，然后运行以下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 把仓库抓下来"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone https://github.com/tuture-dev/vue-online-shop-frontend.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd vue-online-shop-frontend"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 构建前端代码"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd client && npm install && npm run build && cd .."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 通过 Docker Compose 启动所有容器，并进入守护态运行"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker-compose up -d --build"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这个时候，通过远程主机的 IP（或域名）加上端口号（这里是 "
                },
                {
                  "text": "8080",
                  "code": true
                },
                {
                  "text": " ，当然你可以在 "
                },
                {
                  "text": "docker-compose.yml",
                  "code": true
                },
                {
                  "text": " 中自行修改 "
                },
                {
                  "text": "nginx",
                  "code": true
                },
                {
                  "text": " 服务的端口配置）。例如我们远程主机的 IP 是 "
                },
                {
                  "text": "1.2.3.4",
                  "code": true
                },
                {
                  "text": " ，那么就可以通过 "
                },
                {
                  "text": "1.2.3.4:8080",
                  "code": true
                },
                {
                  "text": " 访问我们的网站啦！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "实际上，我们还可以通过一种更高效的方式进行镜像的分发与部署——"
                },
                {
                  "text": "云端的镜像仓库服务",
                  "bold": true
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Docker Hub 和镜像命名规则"
                }
              ],
              "id": "idw6XNY5"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "实际上，Docker 公司已经做了一个叫 "
                },
                {
                  "text": "Docker Hub",
                  "link": true,
                  "url": "https://hub.docker.com/"
                },
                {
                  "text": " 的镜像仓库，提供了丰富的官方维护镜像，以及自定义镜像的存储和分发。我们在平时用的镜像（例如 "
                },
                {
                  "text": "mongo",
                  "code": true
                },
                {
                  "text": " 、"
                },
                {
                  "text": "nginx",
                  "code": true
                },
                {
                  "text": " 、"
                },
                {
                  "text": "node",
                  "code": true
                },
                {
                  "text": " 等）都是 Docker Hub 上的官方镜像（或者是其他代理加速器）。"
                }
              ],
              "id": "v28eOZeV"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "镜像的命名规则如下："
                }
              ],
              "id": "v28eOZeV"
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<registry_name>/<username>/<image_name>"
                    }
                  ],
                  "id": "v28eOZeV"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中："
                }
              ],
              "id": "v28eOZeV"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "registry_name",
                      "code": true
                    },
                    {
                      "text": " 代表镜像仓库的名称，如果省略的话就是 Docker Hub"
                    }
                  ],
                  "id": "v28eOZeV",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "username",
                      "code": true
                    },
                    {
                      "text": " 代表镜像仓库的用户名，如果和 "
                    },
                    {
                      "text": "registry_name",
                      "code": true
                    },
                    {
                      "text": " 一起省略的话就是 Docker 官方镜像"
                    }
                  ],
                  "id": "v28eOZeV",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "image_name",
                      "code": true
                    },
                    {
                      "text": " 就是镜像名称"
                    }
                  ],
                  "id": "v28eOZeV",
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Docker Hub 虽说是官方出品，但实际上存在以下问题："
                }
              ],
              "id": "v28eOZeV",
              "level": 0,
              "parent": "bulleted-list"
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "免费用户支持 1 个私有镜像"
                    }
                  ],
                  "id": "v28eOZeV",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "上传和拉取的速度在国内不稳定"
                    }
                  ],
                  "id": "v28eOZeV",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "没有镜像安全扫描功能"
                    }
                  ],
                  "id": "v28eOZeV",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而我们接下来要体验的阿里云镜像仓库服务则能很好地解决以上问题。"
                }
              ],
              "id": "v28eOZeV",
              "level": 0,
              "parent": "numbered-list",
              "number": 3
            }
          ],
          "flag": "step_start"
        },
        {
          "file": "docker-compose.yml",
          "display": true,
          "commit": "b8afe6837849e25e1386f78c89786cce23159272",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "体验阿里云镜像仓库服务"
                    }
                  ],
                  "id": "NbU-dxfG"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先让我们访问"
                    },
                    {
                      "text": "阿里云",
                      "link": true,
                      "url": "https://www.aliyun.com/"
                    },
                    {
                      "text": "的官方网站，然后在产品列表中找到“镜像仓库服务”，点击开通。开通后进入控制台，创建镜像命名空间，如下图所示："
                    }
                  ],
                  "id": "Gp6H6_mh"
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170e3df21636b67e.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "名称随意填写，这里我们填的是 "
                    },
                    {
                      "text": "vue-online-shop",
                      "code": true
                    },
                    {
                      "text": " 。创建后如下图所示："
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170e3df21a7ca3b2.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "创建好命名空间后，就可以为我们应用的每个镜像（除了 MongoDB 数据库镜像）创建相应的镜像仓库。点击“创建镜像仓库”按钮，如下图所示："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170e3df21cb0520a.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "第一步，填写镜像仓库相关信息："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170e3df248bd0cc9.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "第二步，选择代码源，这里我们选择“本地仓库”："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170e3df248d09a1e.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "创建好两个镜像仓库（"
                    },
                    {
                      "text": "api",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "nginx",
                      "code": true
                    },
                    {
                      "text": " ）后，可以看到镜像列表如下："
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/092faf4/170e3df24a00c61c.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "OK，然后点击单个仓库的“管理”按钮，按照指示进行镜像的上传。在这里我们贴一下示例代码（"
                    },
                    {
                      "text": "实际操作时按自己控制台的指示说明为准",
                      "bold": true
                    },
                    {
                      "text": "）："
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "children": [
                        {
                          "text": "# 登录阿里云镜像仓库，aliyunUser 改成自己的账户名"
                        }
                      ],
                      "type": "code-line"
                    },
                    {
                      "children": [
                        {
                          "text": "docker login --username=aliyunUser registry.cn-shanghai.aliyuncs.com"
                        }
                      ],
                      "type": "code-line"
                    },
                    {
                      "children": [
                        {
                          "text": ""
                        }
                      ],
                      "type": "code-line"
                    },
                    {
                      "children": [
                        {
                          "text": "# 构建和推送 api 镜像"
                        }
                      ],
                      "type": "code-line"
                    },
                    {
                      "children": [
                        {
                          "text": "docker build -t registry.cn-shanghai.aliyuncs.com/vue-online-shop/api server"
                        }
                      ],
                      "type": "code-line"
                    },
                    {
                      "children": [
                        {
                          "text": "docker push registry.cn-shanghai.aliyuncs.com/vue-online-shop/api"
                        }
                      ],
                      "type": "code-line"
                    },
                    {
                      "children": [
                        {
                          "text": ""
                        }
                      ],
                      "type": "code-line"
                    },
                    {
                      "children": [
                        {
                          "text": "# 构建和推送 nginx 镜像"
                        }
                      ],
                      "type": "code-line"
                    },
                    {
                      "children": [
                        {
                          "text": "docker build -t registry.cn-shanghai.aliyuncs.com/vue-online-shop/nginx client"
                        }
                      ],
                      "type": "code-line"
                    },
                    {
                      "children": [
                        {
                          "text": "docker push registry.cn-shanghai.aliyuncs.com/vue-online-shop/nginx"
                        }
                      ],
                      "type": "code-line"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "children": [
                        {
                          "text": "实际部署时，建议给每个镜像加上一个标签，推荐是当前 Git 提交的 Hash，例如："
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "type": "code-block",
                      "lang": "bash",
                      "children": [
                        {
                          "children": [
                            {
                              "text": "docker build -t registry.cn-shanghai.aliyuncs.com/vue-online-shop/api:9ca500a server"
                            }
                          ],
                          "type": "code-line"
                        }
                      ]
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "在镜像推送完成后，我们把 "
                    },
                    {
                      "text": "docker-compose.yml",
                      "code": true
                    },
                    {
                      "text": " 中的 "
                    },
                    {
                      "text": "api",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "nginx",
                      "code": true
                    },
                    {
                      "text": " 服务改成使用云端镜像（"
                    },
                    {
                      "text": "下面是我的镜像仓库地址，记得改成你自己的喔",
                      "italic": true
                    },
                    {
                      "text": "）："
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "docker-compose.yml",
              "commit": "b8afe6837849e25e1386f78c89786cce23159272",
              "hiddenLines": [[0, 6]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "搞定之后，我们只需把这个 "
                    },
                    {
                      "text": "docker-compose.yml",
                      "code": true
                    },
                    {
                      "text": " 文件放到远程主机上，然后在所在的目录开启 Docker Compose 容器群即可："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 拉取所有镜像的最新版本"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker-compose pull"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 启动所有容器"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker-compose up -d"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "Bl6vD6xe"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一步中，我们："
                }
              ],
              "id": "W4dt_8Ru"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先了解了如何通过 Git 抓取代码的方式在远程主机上进行部署"
                    }
                  ],
                  "id": "W4dt_8Ru",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "然后了解了 Docker Hub 及镜像命名的规则，并分析了一波 Docker Hub 的缺陷"
                    }
                  ],
                  "id": "W4dt_8Ru",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "接着一步步带你体验和使用阿里云镜像仓库服务，轻松实现镜像的分发与部署"
                    }
                  ],
                  "id": "W4dt_8Ru",
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "终于，我们的迷你全栈电商系列实战就到此为止啦🎉🎉，感谢一路看下来始终不离不弃、热爱学习的你😘！让我们在接下来更精彩的文章中再见👋~"
                }
              ],
              "id": "W4dt_8Ru",
              "level": 0,
              "parent": "bulleted-list"
            }
          ],
          "flag": "step_end"
        }
      ]
    },
    {
      "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
      "id": "a778459a",
      "articleId": null,
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
          "id": "0f75e33b",
          "fixed": true,
          "children": [
            {
              "text": "重构页面"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/App.vue",
          "display": true,
          "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/App.vue",
              "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/components/Header.vue",
          "display": true,
          "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/Header.vue",
              "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/components/products/ProductButton.vue",
          "display": true,
          "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/products/ProductButton.vue",
              "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
              "hiddenLines": [[34, 45]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/Cart.vue",
          "display": true,
          "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/Cart.vue",
              "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
              "hiddenLines": [[8, 8]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/Home.vue",
          "display": true,
          "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/Home.vue",
              "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
              "hiddenLines": [[8, 9]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/admin/Index.vue",
          "display": true,
          "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/admin/Index.vue",
              "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/store/actions.js",
          "display": true,
          "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/store/actions.js",
              "commit": "4588ca697e3eed582cf976f51b03500fac4b9ec4",
              "hiddenLines": [
                [5, 19],
                [48, 48],
                [155, 157],
                [169, 169]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "id": "96038675",
      "articleId": "nO-RmUbzz",
      "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
      "children": [
        {
          "type": "heading-two",
          "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
          "id": "72ccf1a2",
          "fixed": true,
          "children": [
            {
              "text": "添加用户界面及路由"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/main.js",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/main.js",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/pages/user/Index.vue",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Index.vue",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/pages/user/Login.vue",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Login.vue",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/pages/user/Setting.vue",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Setting.vue",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/router/index.js",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/router/index.js",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
      "id": "3eb3632d",
      "articleId": "nO-RmUbzz",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
          "id": "b685530e",
          "fixed": true,
          "children": [
            {
              "text": "添加用户界面及路由"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先我们先来看一下整体用户系统接入后的效果："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://static.tuture.co/c/092faf4/172281d303fc18b0.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "了解了效果之后，我们为你准备好了重构之后的迷你电商代码，你可以 Clone 这份代码，然后跟着教程，补充集成用户系统需要的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b auth-start https://github.com/tuture-dev/vue-online-shop-frontend.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 或者下载 Gitee 上的仓库"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b auth-start https://gitee.com/tuture/vue-online-shop-frontend.git"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "代码下载后，在 "
                },
                {
                  "text": "client/src/pages",
                  "code": true
                },
                {
                  "text": " 目录中创建 "
                },
                {
                  "text": "user",
                  "code": true
                },
                {
                  "text": " 目录，在接下来时间我们会在其中实现所有与用户系统相关的页面。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "本篇教程采用的是 Vue 2.x 版本，但这篇教程的核心是通过 Authing 集成用户系我们并没有使用太多关于 Vue 的知识。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/main.js",
          "display": false,
          "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/main.js",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/user/Index.vue",
          "display": true,
          "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现用户系统相关页面"
                    }
                  ],
                  "id": "co9uU1bTi"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先，我们在 "
                    },
                    {
                      "text": "user",
                      "code": true
                    },
                    {
                      "text": " 页面目录下创建 "
                    },
                    {
                      "text": "Index.vue",
                      "code": true
                    },
                    {
                      "text": " 用户首页组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Index.vue",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/user/Login.vue",
          "display": true,
          "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着创建 "
                    },
                    {
                      "text": "Login.vue",
                      "code": true
                    },
                    {
                      "text": " 登录组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Login.vue",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/user/Setting.vue",
          "display": true,
          "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后创建 "
                    },
                    {
                      "text": "Setting.vue",
                      "code": true
                    },
                    {
                      "text": " 设置组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Setting.vue",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/router/index.js",
          "display": true,
          "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "配置中心路由"
                    }
                  ],
                  "id": "ZDRojGGyR"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后是在路由中集成上面定义的用户系统相关页面，修改 "
                    },
                    {
                      "text": "client/src/router/index.js",
                      "code": true
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/router/index.js",
              "commit": "0bc64d13046e72ce7fd9529cb7efbb69c011d1c7",
              "hiddenLines": [[0, 26]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "把项目跑起来，点击右上角的登录或注册应该可以成功地跳转到登录页面（虽然现在还很简陋哈）："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://static.tuture.co/c/092faf4/172281d30417fb78.jpeg"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "OK，接下来让我们具体地实现各个页面吧~"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
      "id": "20a3c151",
      "articleId": "nO-RmUbzz",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
          "id": "e46e0ee4",
          "fixed": true,
          "children": [
            {
              "text": "使用 Authing 接入用户系统"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一步骤中，我们将正式使用 "
                },
                {
                  "text": "Authing",
                  "link": true,
                  "url": "https://authing.cn/?utm_source=tuture"
                },
                {
                  "text": " 接入用户系统。Authing 是国内出色的身份认证云，能让我们轻松集成身份认证相关的逻辑，对于个人开发者来说，其"
                },
                {
                  "text": "免费使用额度",
                  "link": true,
                  "url": "https://authing.cn/pricing?utm_source=tuture"
                },
                {
                  "text": "也是相当充足的。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，让我们访问 Authing 官方网站，点击右上角的登录按钮，如下图所示："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://static.tuture.co/c/092faf4/172281d3055eca8c.png"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进入到登录页面后，我们输入帐户名和密码，会直接为我们创建帐号："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://static.tuture.co/c/092faf4/172281d3095f926b.png"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进入到控制台后，让我们创建一个新的"
                },
                {
                  "text": "用户池",
                  "link": true,
                  "url": "https://docs.authing.cn/authing/quickstart/basic#yong-hu-chi?utm_source=tuture"
                },
                {
                  "text": "（顾名思义，就是用来管理和存储一系列用户的数据和信息），如下图所示："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://static.tuture.co/c/092faf4/172281d309214195.jpeg"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在创建用户池的时候，输入我们想要的用户池名称和专属域名后，选择类型为 Web，最后点击，我们的第一个用户池边创建好了。点击“基础配置”书签，可以查看到刚才创建用户池的一些关键信息，特别是用户池 ID，如下图所示："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://static.tuture.co/c/092faf4/172281d32d134626.jpeg"
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "后续应用开发时，所有的用户池 ID（"
                    },
                    {
                      "text": "userPoolId",
                      "code": true
                    },
                    {
                      "text": "）请替换成自己帐户的真实 ID。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/store/mutation-types.js",
          "display": true,
          "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "配置 Vuex Mutations 和 Store"
                    }
                  ],
                  "id": "ocYxgr-Ys"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "由于我们的应用使用了 "
                    },
                    {
                      "text": "Vuex",
                      "link": true,
                      "url": "https://vuex.vuejs.org/"
                    },
                    {
                      "text": " 来解决状态管理问题，因此我们首先需要定义身份验证相关的 Mutation。这里我们定义两个新的 Mutation："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "SET_USER",
                          "code": true
                        },
                        {
                          "text": "  ：设置用户身份数据"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "LOGOUT",
                          "code": true
                        },
                        {
                          "text": " ：退出登录"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "text": "client/src/store/mutation-types.js",
                      "code": true
                    },
                    {
                      "text": " 中添加上面三个 Mutation 常量，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/store/mutation-types.js",
              "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/store/mutations.js",
          "display": true,
          "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后我们在 "
                    },
                    {
                      "text": "client/src/store/mutations.js",
                      "code": true
                    },
                    {
                      "text": " 中实现上面定义用户相关 Mutation，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/store/mutations.js",
              "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
              "hiddenLines": [
                [0, 19],
                [42, 62],
                [73, 75],
                [84, 101],
                [129, 150],
                [161, 180]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/store/index.js",
          "display": true,
          "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们在 Vuex Store 中集成相应的状态与 Mutation，修改 "
                    },
                    {
                      "text": "client/src/store/index.js",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/store/index.js",
              "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
              "hiddenLines": [
                [0, 7],
                [22, 33],
                [43, 52]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/App.vue",
          "display": true,
          "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在根组件 App 中集成用户逻辑"
                    }
                  ],
                  "id": "iBks_R1S2"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们打开根组件 "
                    },
                    {
                      "text": "client/src/App.vue",
                      "code": true
                    },
                    {
                      "text": "，在其中添加一个 "
                    },
                    {
                      "text": "mounted",
                      "code": true
                    },
                    {
                      "text": " 方法，使得在整个应用刚启动时获取并检查用户身份数据。修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/App.vue",
              "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
              "hiddenLines": [
                [0, 4],
                [20, 28]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们从 "
                    },
                    {
                      "text": "localStorage",
                      "code": true
                    },
                    {
                      "text": " 中检查是否有 "
                    },
                    {
                      "text": "userInfo",
                      "code": true
                    },
                    {
                      "text": " 数据，如果有的话通过 "
                    },
                    {
                      "text": "SET_USER",
                      "code": true
                    },
                    {
                      "text": " Mutation 将用户身份数据存入状态中。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/components/Header.vue",
          "display": true,
          "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在头部组件 Header 中集成用户逻辑"
                    }
                  ],
                  "id": "5kE3XCGXb"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开头部组件 "
                    },
                    {
                      "text": "client/src/components/Header.vue",
                      "code": true
                    },
                    {
                      "text": " ，我们在其中添加用户系统相关的逻辑，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/Header.vue",
              "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
              "hiddenLines": [[0, 89]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们主要做了以下改变："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "把 "
                        },
                        {
                          "text": "isLogged",
                          "code": true
                        },
                        {
                          "text": " 从原先的 "
                        },
                        {
                          "text": "data",
                          "code": true
                        },
                        {
                          "text": " 变成了一个计算属性，通过从 Vuex Store 中获取 "
                        },
                        {
                          "text": "token",
                          "code": true
                        },
                        {
                          "text": " 是否存在来判断是否登录"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "添加了 "
                        },
                        {
                          "text": "avatar",
                          "code": true
                        },
                        {
                          "text": " 计算属性，用于从 Store 中获取用户头像"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实现了 "
                        },
                        {
                          "text": "handleLogout",
                          "code": true
                        },
                        {
                          "text": " 方法，用于处理登出逻辑，包括从 "
                        },
                        {
                          "text": "localStorage",
                          "code": true
                        },
                        {
                          "text": " 中去除 "
                        },
                        {
                          "text": "token",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "userInfo",
                          "code": true
                        },
                        {
                          "text": " 数据，并发起一个 "
                        },
                        {
                          "text": "LOGOUT",
                          "code": true
                        },
                        {
                          "text": " Mutation 用于更新 Store 的状态"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/index.html",
          "display": true,
          "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "通过 Authing Guard 实现登录页面"
                    }
                  ],
                  "id": "2lGzEyhxm"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Guard ",
                      "link": true,
                      "url": "https://docs.authing.cn/authing/sdk/guard?utm_source=tuture"
                    },
                    {
                      "text": "是 Authing 推出的可嵌入登录表单，能够让我们用几行代码为整个应用集成登录和注册功能，集成后的效果如下："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d333d68545.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "整体效果还是很 OK 的，而且我们可以通过一些配置项轻松实现定制，下面我们就来看看怎么实现吧。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先，我们通过引入 Authing UMD 构建文件来集成 "
                    },
                    {
                      "text": "Authing Guard",
                      "link": true,
                      "url": "https://docs.authing.cn/authing/sdk/guard?utm_source=tuture"
                    },
                    {
                      "text": "。在 "
                    },
                    {
                      "text": "client/index.html",
                      "code": true
                    },
                    {
                      "text": " 文件中通过 "
                    },
                    {
                      "text": "script",
                      "code": true
                    },
                    {
                      "text": " 标签引入："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/index.html",
              "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/user/Login.vue",
          "display": true,
          "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着打开登录页面组件 "
                    },
                    {
                      "text": "client/src/pages/user/Login.vue",
                      "code": true
                    },
                    {
                      "text": "，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Login.vue",
              "commit": "f8e83ff89ed688548582d08d4c81a57981187a17",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在 "
                    },
                    {
                      "text": "mounted",
                      "code": true
                    },
                    {
                      "text": " 生命周期方法中初始化 "
                    },
                    {
                      "text": "Guard",
                      "code": true
                    },
                    {
                      "text": " 实例。在初始化 "
                    },
                    {
                      "text": "Guard",
                      "code": true
                    },
                    {
                      "text": " 实例时，第一个参数是用户池 ID（"
                    },
                    {
                      "text": "记得换成自己的用户池 ID！",
                      "bold": true,
                      "italic": true
                    },
                    {
                      "text": "），可以通过 Authing 控制台获取，第二个参数则是 Guard 组件的一些选项参数："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "logo",
                          "code": true
                        },
                        {
                          "text": " 是我们整个网站的 Logo 图片链接"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "title",
                          "code": true
                        },
                        {
                          "text": " 是整个登录表单的标题"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "mountId",
                          "code": true
                        },
                        {
                          "text": " 是用于挂载登录表单的 DOM ID，这里就是模板中唯一的 "
                        },
                        {
                          "text": "div",
                          "code": true
                        },
                        {
                          "text": " 元素 "
                        },
                        {
                          "text": "login-form",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "hideClose",
                          "code": true
                        },
                        {
                          "text": " 用于隐藏关闭按钮，因为我们把登录做成了一个独立的页面，不希望用户把登录表单关掉（这样整个页面就一片空白啦）"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "关于 "
                        },
                        {
                          "text": "Guard",
                          "code": true
                        },
                        {
                          "text": " 完整的构造函数 API，请参考"
                        },
                        {
                          "text": "官方文档",
                          "link": true,
                          "url": "https://docs.authing.cn/authing/sdk/guard#gou-zao-han-shu-new-guarduserpoolid-options?utm_source=tuture"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在初始化 "
                    },
                    {
                      "text": "Guard",
                      "code": true
                    },
                    {
                      "text": " 组件后，我们还需要添加身份验证成功后的监听事件函数，即 "
                    },
                    {
                      "text": "form.on(\"authenticated\", handler)",
                      "code": true
                    },
                    {
                      "text": " 。可以看到，在回调函数中，我们做了三件事："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "发出 "
                        },
                        {
                          "text": "SET_USER",
                          "code": true
                        },
                        {
                          "text": " Mutation，修改 Store 状态"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "text": "localStorage",
                          "code": true
                        },
                        {
                          "text": " 中存储登录后获取的用户信息"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "通过 "
                        },
                        {
                          "text": "$router",
                          "code": true
                        },
                        {
                          "text": " 路由重定向到首页"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "更多回调事件，可参考"
                        },
                        {
                          "text": "完整事件列表",
                          "link": true,
                          "url": "https://docs.authing.cn/authing/sdk/guard#hui-tiao-shi-jian-onevent-callback?utm_source=tuture"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "配置完成后，开启应用，点击登录按钮，就可以看到我们炫酷的登录页面了："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://static.tuture.co/c/092faf4/172281d336625305.jpeg"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "看上去很不错！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "10225335e6195fd3cb4d98c84b64f3d2807048af",
      "id": "e350f44f",
      "articleId": "nO-RmUbzz",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "10225335e6195fd3cb4d98c84b64f3d2807048af",
          "id": "47226a80",
          "fixed": true,
          "children": [
            {
              "text": "添加权限管理和路由守卫"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一步中，我们将配置权限管理和路由守卫。权限管理很容易理解，就是当用户进行某些需要登录的操作（例如添加到购物车）时判断是否已经登录，如果未登录则重定向到登录页面。所谓"
                },
                {
                  "text": "路由守卫",
                  "link": true,
                  "url": "https://router.vuejs.org/zh/guide/advanced/navigation-guards.html?utm_source=tuture"
                },
                {
                  "text": "（或称"
                },
                {
                  "text": "导航守卫",
                  "bold": true
                },
                {
                  "text": "），就是在进入一个具体的路由（页面）"
                },
                {
                  "text": "之前",
                  "bold": true
                },
                {
                  "text": "，判断用户是否具备足够的权限，如果权限不够，则直接重定向到登录页面，否则允许进入该页面。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在我们的应用中，主要有三个地方需要配置权限："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "商品添加按钮（ProductionButton）"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "购物车（Cart）"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "后台管理（Admin）"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "让我们逐个击破吧。"
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/components/products/ProductButton.vue",
          "display": true,
          "commit": "10225335e6195fd3cb4d98c84b64f3d2807048af",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "添加商品添加按钮的权限管理"
                    }
                  ],
                  "id": "VDqy8fpIb"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先，我们需要为商品添加按钮配置权限管理。打开 "
                    },
                    {
                      "text": "client/src/components/products/ProductButton.vue",
                      "code": true
                    },
                    {
                      "text": " 组件，修改 "
                    },
                    {
                      "text": "methods",
                      "code": true
                    },
                    {
                      "text": " 中的 "
                    },
                    {
                      "text": "addToCart",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "removeFromCart",
                      "code": true
                    },
                    {
                      "text": " 方法，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/products/ProductButton.vue",
              "commit": "10225335e6195fd3cb4d98c84b64f3d2807048af",
              "hiddenLines": [
                [0, 12],
                [15, 36]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，实现权限管理的思路很简单：先从 "
                    },
                    {
                      "text": "localStorage",
                      "code": true
                    },
                    {
                      "text": " 中判断用于鉴权的 "
                    },
                    {
                      "text": "token",
                      "code": true
                    },
                    {
                      "text": " 是否存在，如果存在则表明已登录，执行相应的 Mutation；如果不存在 "
                    },
                    {
                      "text": "token",
                      "code": true
                    },
                    {
                      "text": "，则弹出 Alert 提示框询问用户是否需要跳转到登录页面进行登录。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/Cart.vue",
          "display": true,
          "commit": "10225335e6195fd3cb4d98c84b64f3d2807048af",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现购物车的路由守卫"
                    }
                  ],
                  "id": "0YBRNop9P"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后我们来实现购物车的路由守卫。幸运的是，Vue Router 已经为我们提供了"
                    },
                    {
                      "text": "组件级别的路由守卫的方法",
                      "link": true,
                      "url": "https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E5%AE%88%E5%8D%AB?utm_source=tuture"
                    },
                    {
                      "text": " "
                    },
                    {
                      "text": "beforeRouteEnter",
                      "code": true
                    },
                    {
                      "text": " 。打开 "
                    },
                    {
                      "text": "client/src/pages/Cart.vue",
                      "code": true
                    },
                    {
                      "text": "，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/Cart.vue",
              "commit": "10225335e6195fd3cb4d98c84b64f3d2807048af",
              "hiddenLines": [
                [0, 10],
                [12, 13],
                [17, 31]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "依然是通过 "
                    },
                    {
                      "text": "localStorage",
                      "code": true
                    },
                    {
                      "text": " 中尝试获取 "
                    },
                    {
                      "text": "token",
                      "code": true
                    },
                    {
                      "text": " 来判断登录状态，然后通过 "
                    },
                    {
                      "text": "next",
                      "code": true
                    },
                    {
                      "text": " 函数进入合适的路由。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/admin/Index.vue",
          "display": true,
          "commit": "10225335e6195fd3cb4d98c84b64f3d2807048af",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现后台管理的路由守卫"
                    }
                  ],
                  "id": "y6zZmzn20"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "类似地，我们实现后台管理页面的路由守卫。打开 "
                    },
                    {
                      "text": "client/src/pages/admin.Index.vue",
                      "code": true
                    },
                    {
                      "text": "，添加路由守卫方法，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/admin/Index.vue",
              "commit": "10225335e6195fd3cb4d98c84b64f3d2807048af",
              "hiddenLines": [
                [0, 11],
                [13, 14],
                [17, 27]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "完成这一步后，打开应用，我们来看一下添加了权限管理和路由守卫的之后的应用会是怎么样的："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://static.tuture.co/c/092faf4/172281d34166fbdd.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "d1c5dad8ef4db3d706cb489dad23996846b9d6b7",
      "id": "9eb3b275",
      "articleId": "nO-RmUbzz",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "d1c5dad8ef4db3d706cb489dad23996846b9d6b7",
          "id": "2502e9f9",
          "fixed": true,
          "children": [
            {
              "text": "将用户系统与现有的数据库集成"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "仅仅实现登录和注册功能是远远不够的，我们还需要将用户系统集成到现有的数据库中。例如我们在添加商品时，希望能够和具体的用户绑定。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "所幸我们使用的是 MongoDB 数据库，因此不像传统的关系型数据库那样需要繁杂的表结构更新，只需修改数据模型定义即可。"
                }
              ]
            }
          ]
        },
        {
          "file": "server/model/index.js",
          "display": true,
          "commit": "d1c5dad8ef4db3d706cb489dad23996846b9d6b7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "更新 Mongoose 数据定义"
                    }
                  ],
                  "id": "DqsbMcXRR"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先让我们来更新一波 Mongoose 数据定义。打开 "
                    },
                    {
                      "text": "server/model/index.js",
                      "code": true
                    },
                    {
                      "text": " ，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/model/index.js",
              "commit": "d1c5dad8ef4db3d706cb489dad23996846b9d6b7",
              "hiddenLines": [
                [0, 4],
                [24, 30]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们主要是在两个数据模型 "
                    },
                    {
                      "text": "productSchema",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "manufacturerSchema",
                      "code": true
                    },
                    {
                      "text": " 中加入了 "
                    },
                    {
                      "text": "user",
                      "code": true
                    },
                    {
                      "text": " 字段，其他均无需改变。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/store/actions.js",
          "display": true,
          "commit": "d1c5dad8ef4db3d706cb489dad23996846b9d6b7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "配置 Vuex Action"
                    }
                  ],
                  "id": "8ON51qZBT"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们修改项目的 Action，主要是在两个新增数据的 Action（"
                    },
                    {
                      "text": "addProduct",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "addManufacturer",
                      "code": true
                    },
                    {
                      "text": "）创建模型时记录用户数据。打开 "
                    },
                    {
                      "text": "client/src/store/actions.js",
                      "code": true
                    },
                    {
                      "text": "，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/store/actions.js",
              "commit": "d1c5dad8ef4db3d706cb489dad23996846b9d6b7",
              "hiddenLines": [
                [0, 27],
                [29, 86],
                [101, 107],
                [110, 110],
                [116, 173],
                [184, 190],
                [193, 193]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们在前端发起请求创建新数据时，把 "
                    },
                    {
                      "text": "user",
                      "code": true
                    },
                    {
                      "text": " 的 "
                    },
                    {
                      "text": "_id",
                      "code": true
                    },
                    {
                      "text": " 也传了进去，这样数据库里面对应的商品和制造商就会记录相应的用户 ID 啦。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "server/controllers/product.js",
          "display": false,
          "commit": "d1c5dad8ef4db3d706cb489dad23996846b9d6b7",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/controllers/product.js",
              "commit": "d1c5dad8ef4db3d706cb489dad23996846b9d6b7",
              "hiddenLines": [[23, 23]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
      "id": "1e88ef4a",
      "articleId": "nO-RmUbzz",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
          "id": "32f2ee12",
          "fixed": true,
          "children": [
            {
              "text": "添加账户设置并修改信息"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在最后一步中，我们将借助 "
                },
                {
                  "text": "Authing SDK",
                  "link": true,
                  "url": "https://docs.authing.cn/authing/sdk/sdk-for-javascript?utm_source=tuture"
                },
                {
                  "text": " 实现更细粒度的用户身份管理，以及个人信息设置页面。首先用 npm 安装 Authing 的 JavaScript SDK："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm install authing-js-sdk"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/package.json",
          "display": false,
          "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/package.json",
              "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
              "hiddenLines": [[0, 9]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/components/Header.vue",
          "display": true,
          "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "修改 Header 的帐户设置链接"
                    }
                  ],
                  "id": "43xkckrmq"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先，让我们修改 Header 头部中的帐户设置链接。打开 "
                    },
                    {
                      "text": "client/src/components/Header.vue",
                      "code": true
                    },
                    {
                      "text": "，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/Header.vue",
              "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
              "hiddenLines": [
                [2, 35],
                [49, 56],
                [60, 90],
                [96, 113]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们主要做了两点变动："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在模板中调整“账户设置”的链接，从原先 Authing 的链接替换成了本应用的 "
                        },
                        {
                          "text": "/user/settings",
                          "code": true
                        },
                        {
                          "text": " 路由，这个我们后面马上会实现"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "text": "handleLogout",
                          "code": true
                        },
                        {
                          "text": " 方法中，我们在 "
                        },
                        {
                          "text": "localStorage",
                          "code": true
                        },
                        {
                          "text": " 抹去用户信息之前，通过 "
                        },
                        {
                          "text": "authing.checkLoginStatus",
                          "code": true
                        },
                        {
                          "text": " 检查登录状态，然后通过 "
                        },
                        {
                          "text": "authing.logout",
                          "code": true
                        },
                        {
                          "text": " 执行登出操作"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/user/Setting.vue",
          "display": true,
          "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现 Setting 帐户设置页面"
                    }
                  ],
                  "id": "39FYBnbFx"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开之前已经创建好的设置页面 "
                    },
                    {
                      "text": "client/src/pages/user/Setting.vue",
                      "code": true
                    },
                    {
                      "text": "，实现用户个人信息设置页面，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Setting.vue",
              "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们主要看一下 "
                    },
                    {
                      "text": "script",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "template",
                      "code": true
                    },
                    {
                      "text": " 部分。首先在 "
                    },
                    {
                      "text": "script",
                      "code": true
                    },
                    {
                      "text": " 部分中，我们的组件包括："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "data",
                          "code": true
                        },
                        {
                          "text": " 字段定义了模板中所需要的数据，包括 "
                        },
                        {
                          "text": "user",
                          "code": true
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "text": "imageUrl",
                          "code": true
                        },
                        {
                          "text": "（头像链接）以及 "
                        },
                        {
                          "text": "rules",
                          "code": true
                        },
                        {
                          "text": "（表单校验规则）"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "created",
                          "code": true
                        },
                        {
                          "text": " 生命周期方法用于从 Vuex Store 以及 "
                        },
                        {
                          "text": "localStorage",
                          "code": true
                        },
                        {
                          "text": " 中获取用户数据（"
                        },
                        {
                          "text": "localStorage",
                          "code": true
                        },
                        {
                          "text": " 的优先级更高一些），然后初始化上面的 "
                        },
                        {
                          "text": "data",
                          "code": true
                        },
                        {
                          "text": " 字段"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "components",
                          "code": true
                        },
                        {
                          "text": " 用于指定 "
                        },
                        {
                          "text": "app-header",
                          "code": true
                        },
                        {
                          "text": " 组件为我们刚才修改好的 "
                        },
                        {
                          "text": "Header",
                          "code": true
                        },
                        {
                          "text": " 组件"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "methods",
                          "code": true
                        },
                        {
                          "text": " 中定义了 "
                        },
                        {
                          "text": "handleAvatarSuccess",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "submitForm",
                          "code": true
                        },
                        {
                          "text": " 两个 Handler，分别用于处理头像上传成功以及提交表单的逻辑。在 "
                        },
                        {
                          "text": "submitForm",
                          "code": true
                        },
                        {
                          "text": " 方法中，我们先从表单中获取到相应的数据，然后通过 "
                        },
                        {
                          "text": "authing.update",
                          "code": true
                        },
                        {
                          "text": " 更新用户数据，成功后再修改 Vuex Store 中的状态"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/App.vue",
          "display": true,
          "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "调整 App 根组件"
                    }
                  ],
                  "id": "6fUJbzXeI"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们调整一下 App 根组件。打开 "
                    },
                    {
                      "text": "client/src/App.vue",
                      "code": true
                    },
                    {
                      "text": " ，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/App.vue",
              "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
              "hiddenLines": [
                [0, 4],
                [46, 54]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们主要实现了一个 "
                    },
                    {
                      "text": "checkLogin",
                      "code": true
                    },
                    {
                      "text": " 方法，用于在整个应用刚挂载时检查登录状态，如果登录成功，则从 "
                    },
                    {
                      "text": "storage",
                      "code": true
                    },
                    {
                      "text": " 里面取出数据并设置进 Redux Store ，如果登录失效，则清空本地的 "
                    },
                    {
                      "text": "storage",
                      "code": true
                    },
                    {
                      "text": " 信息。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/user/Index.vue",
          "display": true,
          "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "调整其他页面"
                    }
                  ],
                  "id": "_zPLrzOO6"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们调整一下其他页面的一些细节。修改 "
                    },
                    {
                      "text": "client/src/pages/user/Index.vue",
                      "code": true
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Index.vue",
              "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/src/pages/user/Login.vue",
          "display": true,
          "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "继续修改 "
                    },
                    {
                      "text": "client/src/pages/user/Login.vue",
                      "code": true
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/pages/user/Login.vue",
              "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
              "hiddenLines": [[16, 46]],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当保存上面的修改的代码，我们可以看到如下的效果："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d34c19bd30.gif"
                },
                {
                  "type": "heading-two",
                  "children": [
                    {
                      "text": "集成微信、QQ 登录或 Github 登录"
                    }
                  ],
                  "id": "ATn1k27w-"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "通过上述流程，我们就完成了一个完整的用户系统及其与现有系统的整合，但是有同学发现了，我们在平时生活或工作中，除了常规的手机号+验证码、邮箱密码等，还会有一些更方便的登录方式，如微信登录、QQ登录等，那么我们如何集成这些方便的登录呢？实际上可能看起来很复杂，但是在我们现有的基础上，用 Authing 可以很方便的集成微信、QQ登录等。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "只有企业才能集成微信或 QQ 登录，如果你是个人开发者，那么这一节你可以跳过哦🤓"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "集成微信扫码登录"
                    }
                  ],
                  "id": "nB787Uvc2"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先去微信官方文档完成注册，然后申请一个"
                    },
                    {
                      "text": "微信网页应用",
                      "link": true,
                      "url": "https://open.weixin.qq.com/cgi-bin/frame?t=home/web_tmpl&lang=zh_CN"
                    },
                    {
                      "text": "，然后获取到微信网页应用的 AppID 和 AppSecret："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d3566d0e0d.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着滑动到底部，将授权回调域改为 "
                    },
                    {
                      "text": "oauth.authing.cn",
                      "code": true
                    },
                    {
                      "text": " "
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d360ce9fa8.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后我们开始去 Authing 控制台，在相应微信登录里面，填入刚刚获取的 "
                    },
                    {
                      "text": "AppID",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "AppSecret",
                      "code": true
                    },
                    {
                      "text": " ："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d366bb0ba1.png"
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d36d70102e.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到上面我们第三个参数 “重定向地址” 填写了我们现在 Vue 全栈电商应用的开发服务器地址，读者应该根据自己当前的需要地址进行对应的填写。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "大功告成，通过上面的步骤我们就配置好了微信网页登录，现在你应该可以看到如下的效果："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d37286a52f.gif"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我的天！好神奇！就是上面几下手工点按配置，我们就集成好了微信登录！😅"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "集成 QQ 登录"
                    }
                  ],
                  "id": "zcascN_xA"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "按照和接入微信网页登录类似的方式，我们前往"
                    },
                    {
                      "text": " QQ 互联中心",
                      "link": true,
                      "url": "https://connect.qq.com/manage.html#/"
                    },
                    {
                      "text": "，注册一个账号，并创建一个网页应用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后进入网页应用，将授权回调地址填写为："
                    },
                    {
                      "text": "https://oauth.authing.cn/oauth/qq/redirect  ",
                      "code": true
                    },
                    {
                      "text": " ，接着回到 Authing 控制台，我们配置 QQ 登录："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d37ca48ed6.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d3865db313.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存之后，大功告成！我们的应用里面就有了 QQ 登录，和微信登录同样简单！"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "集成 Github 登录"
                    }
                  ],
                  "id": "ddjounxzC"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们再来尝试集成一下开发者比较喜爱的 Github 登录，看看 Authing 是如何简化这一劳动的呢？"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先根据 Github 指引，创建一个 "
                    },
                    {
                      "text": "OAuth 应用",
                      "link": true,
                      "url": "https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d38eaec73b.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后填入如下内容："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d3990fc36f.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其中红框框出来的内容需要填入 Authing 相关的 "
                    },
                    {
                      "text": "https://oauth.authing.cn/oauth/github/redirect",
                      "code": true
                    },
                    {
                      "text": "，然后创建好应用之后，取出 "
                    },
                    {
                      "text": "Client ID",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "Client Secret",
                      "code": true
                    },
                    {
                      "text": " ："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d3a81ef29d.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "之后就是类似之前的操作，进入 Authing 控制台，配置 Github 相关的内容："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d3a8503117.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后可以看到如下效果："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/092faf4/172281d3b53de278.gif"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/yarn.lock",
          "display": false,
          "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/yarn.lock",
              "commit": "f25eb7cbe23d905594334ddeede9a1e13d2d8462",
              "hiddenLines": [
                [0, 360],
                [378, 1864],
                [1876, 4139],
                [4151, 5994]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "xw7CJJ3K5"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "至此，本篇教程也就结束了，相信你已经感受到了 Authing 身份认证机制的强大与便捷。在当今 Serverless 时代，越来越多标准化的流程（例如身份验证、人工智能应用等等）正在逐渐迈向云端，成为一种可直接消费的资源，而我们作为应用终端的开发者则可以将更多的时间和精力放在打磨和完善自身的产品上，在一定程度上解放了生产力。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "图雀社区秉承“加速技术传播”的理念，致力于推广能够真正让开发者和用户的生活变得更美好的技术。"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "remotes": []
}
